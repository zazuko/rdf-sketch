import{f as d,j as o,h as m}from"./main-tOzq9Ppd.js";async function x(r){const t=[];for await(const s of r)t.push(s);return t}class n extends d.Readable{constructor(t,{baseIRI:s,compact:e,context:i={},encoding:h="object",flatten:a,frame:l,prettyPrint:f,skipContext:u}={}){super({objectMode:!0,read:()=>{}}),this.compact=e,this.context=i,this.encoding=h,this.flatten=a,this.frame=l,this.prettyPrint=f,this.skipContext=u,s&&(this.context["@base"]=s.value||s.toString()),t.on("prefix",(c,p)=>{this.context[c]||(this.context[c]=p.value)}),this.handleData(t)}async handleData(t){try{const s=(await x(t)).map(n.toJsonldQuad),e=await o.fromRDF(s),i=await this.transform(e,this.options);this.push(i),this.push(null)}catch(s){this.emit("error",s)}}async transform(t){return this.compact&&(t=await o.compact(t,this.context)),this.flatten&&(t=await o.flatten(t,this.context)),this.frame&&(t=await o.frame(t,this.context)),this.skipContext&&t["@context"]&&delete t["@context"],this.encoding==="string"?this.prettyPrint?JSON.stringify(t,null,2):JSON.stringify(t):t}static toJsonldQuad(t){return{subject:n.toJsonldTerm(t.subject),predicate:n.toJsonldTerm(t.predicate),object:n.toJsonldTerm(t.object),graph:n.toJsonldTerm(t.graph)}}static toJsonldTerm(t){return t.termType==="BlankNode"?{termType:"BlankNode",value:`_:${t.value}`}:t}}class J extends m{constructor(t){super(n,t)}}export{J as default};
