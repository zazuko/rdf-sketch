{"version":3,"file":"js/919.5eca6f19.js","mappings":"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","sources":["webpack://@zazuko/rdf-sketch/./node_modules/@rdfjs/parser-n3/index.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdfjs/parser-n3/lib/ParserStream.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdfjs/sink/index.js","webpack://@zazuko/rdf-sketch/./node_modules/n3/src/IRIs.js","webpack://@zazuko/rdf-sketch/./node_modules/n3/src/N3Lexer.js","webpack://@zazuko/rdf-sketch/./node_modules/n3/src/N3Util.js","webpack://@zazuko/rdf-sketch/./node_modules/n3/src/N3DataFactory.js","webpack://@zazuko/rdf-sketch/./node_modules/n3/src/N3Parser.js","webpack://@zazuko/rdf-sketch/./node_modules/n3/src/N3Writer.js","webpack://@zazuko/rdf-sketch/./node_modules/n3/src/N3Store.js","webpack://@zazuko/rdf-sketch/./node_modules/n3/src/N3StreamParser.js","webpack://@zazuko/rdf-sketch/./node_modules/n3/src/N3StreamWriter.js","webpack://@zazuko/rdf-sketch/./node_modules/n3/src/index.js","webpack://@zazuko/rdf-sketch/./node_modules/queue-microtask/index.js","webpack://@zazuko/rdf-sketch/./node_modules/readable-to-readable/index.js"],"sourcesContent":["const ParserStream = require('./lib/ParserStream')\nconst Sink = require('@rdfjs/sink')\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nmodule.exports = Parser\n","const N3 = require('n3')\nconst rdf = require('@rdfjs/data-model')\nconst { finished } = require('readable-stream')\nconst ReadableToReadable = require('readable-to-readable')\n\nclass ParserStream extends ReadableToReadable {\n  constructor (input, { baseIRI = '', factory = rdf } = {}) {\n    const parser = new N3.StreamParser({ baseIRI, factory })\n\n    super(parser, { objectMode: true })\n\n    parser.on('prefix', (prefix, term) => {\n      this.emit('prefix', prefix, term)\n    })\n\n    parser.on('error', err => {\n      this.destroy(err)\n    })\n\n    finished(this, () => {\n      parser.end()\n    })\n\n    input.pipe(parser)\n  }\n}\n\nmodule.exports = ParserStream\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, Object.assign({}, this.options, options))\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', (err) => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nmodule.exports = Sink\n","const RDF  = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n    XSD  = 'http://www.w3.org/2001/XMLSchema#',\n    SWAP = 'http://www.w3.org/2000/10/swap/';\n\nexport default {\n  xsd: {\n    decimal: `${XSD}decimal`,\n    boolean: `${XSD}boolean`,\n    double:  `${XSD}double`,\n    integer: `${XSD}integer`,\n    string:  `${XSD}string`,\n  },\n  rdf: {\n    type:       `${RDF}type`,\n    nil:        `${RDF}nil`,\n    first:      `${RDF}first`,\n    rest:       `${RDF}rest`,\n    langString: `${RDF}langString`,\n  },\n  owl: {\n    sameAs: 'http://www.w3.org/2002/07/owl#sameAs',\n  },\n  r: {\n    forSome: `${SWAP}reify#forSome`,\n    forAll:  `${SWAP}reify#forAll`,\n  },\n  log: {\n    implies: `${SWAP}log#implies`,\n  },\n};\n","// **N3Lexer** tokenizes N3 documents.\nimport namespaces from './IRIs';\nimport queueMicrotask from 'queue-microtask';\n\nconst { xsd } = namespaces;\n\n// Regular expression and replacement string to escape N3 strings\nconst escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\([^])/g;\nconst escapeReplacements = {\n  '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\n  'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',\n  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',\n  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',\n  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',\n};\nconst illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\n\nconst lineModeRegExps = {\n  _iri: true,\n  _unescapedIri: true,\n  _simpleQuotedString: true,\n  _langcode: true,\n  _blank: true,\n  _newline: true,\n  _comment: true,\n  _whitespace: true,\n  _endOfFile: true,\n};\nconst invalidRegExp = /$0^/;\n\n// ## Constructor\nexport default class N3Lexer {\n  constructor(options) {\n    // ## Regular expressions\n    // It's slightly faster to have these as properties than as in-scope variables\n    this._iri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/; // IRI with escape sequences; needs sanity check after unescaping\n    this._unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/; // IRI without escape sequences; no unescaping\n    this._simpleQuotedString = /^\"([^\"\\\\\\r\\n]*)\"(?=[^\"])/; // string without escape sequences\n    this._simpleApostropheString = /^'([^'\\\\\\r\\n]*)'(?=[^'])/;\n    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i;\n    this._prefix = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/;\n    this._prefixed = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?:[ \\t]+|(?=\\.?[,;!\\^\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._variable = /^\\?(?:(?:[A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=[.,;!\\^\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._blank = /^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?:[ \\t]+|(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._number = /^[\\-+]?(?:(\\d+\\.\\d*|\\.?\\d+)[eE][\\-+]?|\\d*(\\.)?)\\d+(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._boolean = /^(?:true|false)(?=[.,;\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._keyword = /^@[a-z]+(?=[\\s#<:])/i;\n    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\\s#<])/i;\n    this._shortPredicates = /^a(?=[\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._newline = /^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/;\n    this._comment = /#([^\\n\\r]*)/;\n    this._whitespace = /^[ \\t]+/;\n    this._endOfFile = /^(?:#[^\\n\\r]*)?$/;\n    options = options || {};\n\n    // In line mode (N-Triples or N-Quads), only simple features may be parsed\n    if (this._lineMode = !!options.lineMode) {\n      this._n3Mode = false;\n      // Don't tokenize special literals\n      for (const key in this) {\n        if (!(key in lineModeRegExps) && this[key] instanceof RegExp)\n          this[key] = invalidRegExp;\n      }\n    }\n    // When not in line mode, enable N3 functionality by default\n    else {\n      this._n3Mode = options.n3 !== false;\n    }\n    // Don't output comment tokens by default\n    this._comments = !!options.comments;\n    // Cache the last tested closing position of long literals\n    this._literalClosingPos = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback\n  _tokenizeToEnd(callback, inputFinished) {\n    // Continue parsing as far as possible; the loop will return eventually\n    let input = this._input;\n    let currentLineLength = input.length;\n    while (true) {\n      // Count and skip whitespace lines\n      let whiteSpaceMatch, comment;\n      while (whiteSpaceMatch = this._newline.exec(input)) {\n        // Try to find a comment\n        if (this._comments && (comment = this._comment.exec(whiteSpaceMatch[0])))\n          emitToken('comment', comment[1], '', this._line, whiteSpaceMatch[0].length);\n        // Advance the input\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n        currentLineLength = input.length;\n        this._line++;\n      }\n      // Skip whitespace on current line\n      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n\n      // Stop for now if we're at the end\n      if (this._endOfFile.test(input)) {\n        // If the input is finished, emit EOF\n        if (inputFinished) {\n          // Try to find a final comment\n          if (this._comments && (comment = this._comment.exec(input)))\n            emitToken('comment', comment[1], '', this._line, input.length);\n          input = null;\n          emitToken('eof', '', '', this._line, 0);\n        }\n        return this._input = input;\n      }\n\n      // Look for specific token types based on the first character\n      const line = this._line, firstChar = input[0];\n      let type = '', value = '', prefix = '',\n          match = null, matchLength = 0, inconclusive = false;\n      switch (firstChar) {\n      case '^':\n        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed\n        if (input.length < 3)\n          break;\n        // Try to match a type\n        else if (input[1] === '^') {\n          this._previousMarker = '^^';\n          // Move to type IRI or prefixed name\n          input = input.substr(2);\n          if (input[0] !== '<') {\n            inconclusive = true;\n            break;\n          }\n        }\n        // If no type, it must be a path expression\n        else {\n          if (this._n3Mode) {\n            matchLength = 1;\n            type = '^';\n          }\n          break;\n        }\n        // Fall through in case the type is an IRI\n      case '<':\n        // Try to find a full IRI without escape sequences\n        if (match = this._unescapedIri.exec(input))\n          type = 'IRI', value = match[1];\n        // Try to find a full IRI with escape sequences\n        else if (match = this._iri.exec(input)) {\n          value = this._unescape(match[1]);\n          if (value === null || illegalIriChars.test(value))\n            return reportSyntaxError(this);\n          type = 'IRI';\n        }\n        // Try to find a nested triple\n        else if (input.length > 1 && input[1] === '<')\n          type = '<<', matchLength = 2;\n        // Try to find a backwards implication arrow\n        else if (this._n3Mode && input.length > 1 && input[1] === '=')\n          type = 'inverse', matchLength = 2, value = '>';\n        break;\n\n      case '>':\n        if (input.length > 1 && input[1] === '>')\n          type = '>>', matchLength = 2;\n        break;\n\n      case '_':\n        // Try to find a blank node. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a blank node.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if ((match = this._blank.exec(input)) ||\n            inputFinished && (match = this._blank.exec(`${input} `)))\n          type = 'blank', prefix = '_', value = match[1];\n        break;\n\n      case '\"':\n        // Try to find a literal without escape sequences\n        if (match = this._simpleQuotedString.exec(input))\n          value = match[1];\n        // Try to find a literal wrapped in three pairs of quotes\n        else {\n          ({ value, matchLength } = this._parseLiteral(input));\n          if (value === null)\n            return reportSyntaxError(this);\n        }\n        if (match !== null || matchLength !== 0) {\n          type = 'literal';\n          this._literalClosingPos = 0;\n        }\n        break;\n\n      case \"'\":\n        if (!this._lineMode) {\n          // Try to find a literal without escape sequences\n          if (match = this._simpleApostropheString.exec(input))\n            value = match[1];\n          // Try to find a literal wrapped in three pairs of quotes\n          else {\n            ({ value, matchLength } = this._parseLiteral(input));\n            if (value === null)\n              return reportSyntaxError(this);\n          }\n          if (match !== null || matchLength !== 0) {\n            type = 'literal';\n            this._literalClosingPos = 0;\n          }\n        }\n        break;\n\n      case '?':\n        // Try to find a variable\n        if (this._n3Mode && (match = this._variable.exec(input)))\n          type = 'var', value = match[0];\n        break;\n\n      case '@':\n        // Try to find a language code\n        if (this._previousMarker === 'literal' && (match = this._langcode.exec(input)))\n          type = 'langcode', value = match[1];\n        // Try to find a keyword\n        else if (match = this._keyword.exec(input))\n          type = match[0];\n        break;\n\n      case '.':\n        // Try to find a dot as punctuation\n        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {\n          type = '.';\n          matchLength = 1;\n          break;\n        }\n        // Fall through to numerical case (could be a decimal dot)\n\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '+':\n      case '-':\n        // Try to find a number. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a number.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if (match = this._number.exec(input) ||\n            inputFinished && (match = this._number.exec(`${input} `))) {\n          type = 'literal', value = match[0];\n          prefix = (typeof match[1] === 'string' ? xsd.double :\n                    (typeof match[2] === 'string' ? xsd.decimal : xsd.integer));\n        }\n        break;\n\n      case 'B':\n      case 'b':\n      case 'p':\n      case 'P':\n      case 'G':\n      case 'g':\n        // Try to find a SPARQL-style keyword\n        if (match = this._sparqlKeyword.exec(input))\n          type = match[0].toUpperCase();\n        else\n          inconclusive = true;\n        break;\n\n      case 'f':\n      case 't':\n        // Try to match a boolean\n        if (match = this._boolean.exec(input))\n          type = 'literal', value = match[0], prefix = xsd.boolean;\n        else\n          inconclusive = true;\n        break;\n\n      case 'a':\n        // Try to find an abbreviated predicate\n        if (match = this._shortPredicates.exec(input))\n          type = 'abbreviation', value = 'a';\n        else\n          inconclusive = true;\n        break;\n\n      case '=':\n        // Try to find an implication arrow or equals sign\n        if (this._n3Mode && input.length > 1) {\n          type = 'abbreviation';\n          if (input[1] !== '>')\n            matchLength = 1, value = '=';\n          else\n            matchLength = 2, value = '>';\n        }\n        break;\n\n      case '!':\n        if (!this._n3Mode)\n          break;\n      case ',':\n      case ';':\n      case '[':\n      case ']':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n        if (!this._lineMode) {\n          matchLength = 1;\n          type = firstChar;\n        }\n        break;\n\n      default:\n        inconclusive = true;\n      }\n\n      // Some first characters do not allow an immediate decision, so inspect more\n      if (inconclusive) {\n        // Try to find a prefix\n        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') &&\n            (match = this._prefix.exec(input)))\n          type = 'prefix', value = match[1] || '';\n        // Try to find a prefixed name. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a prefixed name.\n        // Therefore, try inserting a space if we're at the end of the input.\n        else if ((match = this._prefixed.exec(input)) ||\n                 inputFinished && (match = this._prefixed.exec(`${input} `)))\n          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);\n      }\n\n      // A type token is special: it can only be emitted after an IRI or prefixed name is read\n      if (this._previousMarker === '^^') {\n        switch (type) {\n        case 'prefixed': type = 'type';    break;\n        case 'IRI':      type = 'typeIRI'; break;\n        default:         type = '';\n        }\n      }\n\n      // What if nothing of the above was found?\n      if (!type) {\n        // We could be in streaming mode, and then we just wait for more input to arrive.\n        // Otherwise, a syntax error has occurred in the input.\n        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).\n        if (inputFinished || (!/^'''|^\"\"\"/.test(input) && /\\n|\\r/.test(input)))\n          return reportSyntaxError(this);\n        else\n          return this._input = input;\n      }\n\n      // Emit the parsed token\n      const length = matchLength || match[0].length;\n      const token = emitToken(type, value, prefix, line, length);\n      this.previousToken = token;\n      this._previousMarker = type;\n\n      // Advance to next part to tokenize\n      input = input.substr(length, input.length);\n    }\n\n    // Emits the token through the callback\n    function emitToken(type, value, prefix, line, length) {\n      const start = input ? currentLineLength - input.length : currentLineLength;\n      const end = start + length;\n      const token = { type, value, prefix, line, start, end };\n      callback(null, token);\n      return token;\n    }\n    // Signals the syntax error through the callback\n    function reportSyntaxError(self) { callback(self._syntaxError(/^\\S*/.exec(input)[0])); }\n  }\n\n  // ### `_unescape` replaces N3 escape codes by their corresponding characters\n  _unescape(item) {\n    let invalid = false;\n    const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {\n      // 4-digit unicode character\n      if (typeof unicode4 === 'string')\n        return String.fromCharCode(Number.parseInt(unicode4, 16));\n      // 8-digit unicode character\n      if (typeof unicode8 === 'string') {\n        let charCode = Number.parseInt(unicode8, 16);\n        return charCode <= 0xFFFF ? String.fromCharCode(Number.parseInt(unicode8, 16)) :\n          String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));\n      }\n      // fixed escape sequence\n      if (escapedChar in escapeReplacements)\n        return escapeReplacements[escapedChar];\n      // invalid escape sequence\n      invalid = true;\n      return '';\n    });\n    return invalid ? null : replaced;\n  }\n\n  // ### `_parseLiteral` parses a literal into an unescaped value\n  _parseLiteral(input) {\n    // Ensure we have enough lookahead to identify triple-quoted strings\n    if (input.length >= 3) {\n      // Identify the opening quote(s)\n      const opening = input.match(/^(?:\"\"\"|\"|'''|'|)/)[0];\n      const openingLength = opening.length;\n\n      // Find the next candidate closing quotes\n      let closingPos = Math.max(this._literalClosingPos, openingLength);\n      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {\n        // Count backslashes right before the closing quotes\n        let backslashCount = 0;\n        while (input[closingPos - backslashCount - 1] === '\\\\')\n          backslashCount++;\n\n        // An even number of backslashes (in particular 0)\n        // means these are actual, non-escaped closing quotes\n        if (backslashCount % 2 === 0) {\n          // Extract and unescape the value\n          const raw = input.substring(openingLength, closingPos);\n          const lines = raw.split(/\\r\\n|\\r|\\n/).length - 1;\n          const matchLength = closingPos + openingLength;\n          // Only triple-quoted strings can be multi-line\n          if (openingLength === 1 && lines !== 0 ||\n              openingLength === 3 && this._lineMode)\n            break;\n          this._line += lines;\n          return { value: this._unescape(raw), matchLength };\n        }\n        closingPos++;\n      }\n      this._literalClosingPos = input.length - openingLength + 1;\n    }\n    return { value: '', matchLength: 0 };\n  }\n\n  // ### `_syntaxError` creates a syntax error for the given issue\n  _syntaxError(issue) {\n    this._input = null;\n    const err = new Error(`Unexpected \"${issue}\" on line ${this._line}.`);\n    err.context = {\n      token: undefined,\n      line: this._line,\n      previousToken: this.previousToken,\n    };\n    return err;\n  }\n\n  // ### Strips off any starting UTF BOM mark.\n  _readStartingBom(input) {\n    return input.startsWith('\\ufeff') ? input.substr(1) : input;\n  }\n\n  // ## Public methods\n\n  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.\n  // The input can be a string or a stream.\n  tokenize(input, callback) {\n    this._line = 1;\n\n    // If the input is a string, continuously emit tokens through the callback until the end\n    if (typeof input === 'string') {\n      this._input = this._readStartingBom(input);\n      // If a callback was passed, asynchronously call it\n      if (typeof callback === 'function')\n        queueMicrotask(() => this._tokenizeToEnd(callback, true));\n      // If no callback was passed, tokenize synchronously and return\n      else {\n        const tokens = [];\n        let error;\n        this._tokenizeToEnd((e, t) => e ? (error = e) : tokens.push(t), true);\n        if (error) throw error;\n        return tokens;\n      }\n    }\n    // Otherwise, the input must be a stream\n    else {\n      this._pendingBuffer = null;\n      if (typeof input.setEncoding === 'function')\n        input.setEncoding('utf8');\n      // Adds the data chunk to the buffer and parses as far as possible\n      input.on('data', data => {\n        if (this._input !== null && data.length !== 0) {\n          // Prepend any previous pending writes\n          if (this._pendingBuffer) {\n            data = Buffer.concat([this._pendingBuffer, data]);\n            this._pendingBuffer = null;\n          }\n          // Hold if the buffer ends in an incomplete unicode sequence\n          if (data[data.length - 1] & 0x80) {\n            this._pendingBuffer = data;\n          }\n          // Otherwise, tokenize as far as possible\n          else {\n            // Only read a BOM at the start\n            if (typeof this._input === 'undefined')\n              this._input = this._readStartingBom(typeof data === 'string' ? data : data.toString());\n            else\n              this._input += data;\n            this._tokenizeToEnd(callback, false);\n          }\n        }\n      });\n      // Parses until the end\n      input.on('end', () => {\n        if (typeof this._input === 'string')\n          this._tokenizeToEnd(callback, true);\n      });\n      input.on('error', callback);\n    }\n  }\n}\n","// **N3Util** provides N3 utility functions.\n\nimport N3DataFactory from './N3DataFactory';\n\n// Tests whether the given term represents an IRI\nexport function isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n}\n\n// Tests whether the given term represents a blank node\nexport function isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n}\n\n// Tests whether the given term represents a literal\nexport function isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n}\n\n// Tests whether the given term represents a variable\nexport function isVariable(term) {\n  return !!term && term.termType === 'Variable';\n}\n\n// Tests whether the given term represents the default graph\nexport function isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n}\n\n// Tests whether the given quad is in the default graph\nexport function inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n}\n\n// Creates a function that prepends the given IRI to a local name\nexport function prefix(iri, factory) {\n  return prefixes({ '': iri.value || iri }, factory)('');\n}\n\n// Creates a function that allows registering and expanding prefixes\nexport function prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  const prefixes = Object.create(null);\n  for (const prefix in defaultPrefixes)\n    processPrefix(prefix, defaultPrefixes[prefix]);\n  // Set the default factory if none was specified\n  factory = factory || N3DataFactory;\n\n  // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      const cache = Object.create(null);\n      prefixes[prefix] = local => {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    }\n    else if (!(prefix in prefixes)) {\n      throw new Error(`Unknown prefix: ${prefix}`);\n    }\n    return prefixes[prefix];\n  }\n  return processPrefix;\n}\n","// N3.js implementations of the RDF/JS core data types\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\n\nimport namespaces from './IRIs';\nimport { isDefaultGraph } from './N3Util';\nconst { rdf, xsd } = namespaces;\n\n// eslint-disable-next-line prefer-const\nlet DEFAULTGRAPH;\nlet _blankNodeCounter = 0;\n\nconst escapedLiteral = /^\"(.*\".*)(?=\"[^\"]*$)/;\nconst quadId = /^<<(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) ?(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+)?>>$/;\n\n// ## DataFactory singleton\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  variable,\n  literal,\n  defaultGraph,\n  quad,\n  triple: quad,\n};\nexport default DataFactory;\n\n// ## Term constructor\nexport class Term {\n  constructor(id) {\n    this.id = id;\n  }\n\n  // ### The value of this term\n  get value() {\n    return this.id;\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Term)\n      return this.id === other.id;\n    // Otherwise, compare term type and value\n    return !!other && this.termType === other.termType &&\n                      this.value    === other.value;\n  }\n\n  // ### Implement hashCode for Immutable.js, since we implement `equals`\n  // https://immutable-js.com/docs/v4.0.0/ValueObject/#hashCode()\n  hashCode() {\n    return 0;\n  }\n\n  // ### Returns a plain object representation of this term\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n    };\n  }\n}\n\n\n// ## NamedNode constructor\nexport class NamedNode extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'NamedNode';\n  }\n}\n\n// ## Literal constructor\nexport class Literal extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'Literal';\n  }\n\n  // ### The text value of this literal\n  get value() {\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\n  }\n\n  // ### The language of this literal\n  get language() {\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\n    const id = this.id;\n    let atPos = id.lastIndexOf('\"') + 1;\n    // If \"@\" it follows, return the remaining substring; empty otherwise\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\n  }\n\n  // ### The datatype IRI of this literal\n  get datatype() {\n    return new NamedNode(this.datatypeString);\n  }\n\n  // ### The datatype string of this literal\n  get datatypeString() {\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\n    const id = this.id, dtPos = id.lastIndexOf('\"') + 1;\n    const char = dtPos < id.length ? id[dtPos] : '';\n    // If \"^\" it follows, return the remaining substring\n    return char === '^' ? id.substr(dtPos + 2) :\n           // If \"@\" follows, return rdf:langString; xsd:string otherwise\n           (char !== '@' ? xsd.string : rdf.langString);\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both literals were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Literal)\n      return this.id === other.id;\n    // Otherwise, compare term type, value, language, and datatype\n    return !!other && !!other.datatype &&\n                      this.termType === other.termType &&\n                      this.value    === other.value    &&\n                      this.language === other.language &&\n                      this.datatype.value === other.datatype.value;\n  }\n\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n      language: this.language,\n      datatype: { termType: 'NamedNode', value: this.datatypeString },\n    };\n  }\n}\n\n// ## BlankNode constructor\nexport class BlankNode extends Term {\n  constructor(name) {\n    super(`_:${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'BlankNode';\n  }\n\n  // ### The name of this blank node\n  get value() {\n    return this.id.substr(2);\n  }\n}\n\nexport class Variable extends Term {\n  constructor(name) {\n    super(`?${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Variable';\n  }\n\n  // ### The name of this variable\n  get value() {\n    return this.id.substr(1);\n  }\n}\n\n// ## DefaultGraph constructor\nexport class DefaultGraph extends Term {\n  constructor() {\n    super('');\n    return DEFAULTGRAPH || this;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'DefaultGraph';\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through strict equality;\n    // otherwise, compare term types.\n    return (this === other) || (!!other && (this.termType === other.termType));\n  }\n}\n\n// ## DefaultGraph singleton\nDEFAULTGRAPH = new DefaultGraph();\n\n\n// ### Constructs a term from the given internal string ID\nexport function termFromId(id, factory) {\n  factory = factory || DataFactory;\n\n  // Falsy value or empty string indicate the default graph\n  if (!id)\n    return factory.defaultGraph();\n\n  // Identify the term type based on the first character\n  switch (id[0]) {\n  case '?':\n    return factory.variable(id.substr(1));\n  case '_':\n    return factory.blankNode(id.substr(2));\n  case '\"':\n    // Shortcut for internal literals\n    if (factory === DataFactory)\n      return new Literal(id);\n    // Literal without datatype or language\n    if (id[id.length - 1] === '\"')\n      return factory.literal(id.substr(1, id.length - 2));\n    // Literal with datatype or language\n    const endPos = id.lastIndexOf('\"', id.length - 1);\n    return factory.literal(id.substr(1, endPos - 1),\n            id[endPos + 1] === '@' ? id.substr(endPos + 2)\n                                   : factory.namedNode(id.substr(endPos + 3)));\n  case '<':\n    const components = quadId.exec(id);\n    return factory.quad(\n      termFromId(unescapeQuotes(components[1]), factory),\n      termFromId(unescapeQuotes(components[2]), factory),\n      termFromId(unescapeQuotes(components[3]), factory),\n      components[4] && termFromId(unescapeQuotes(components[4]), factory)\n    );\n  default:\n    return factory.namedNode(id);\n  }\n}\n\n// ### Constructs an internal string ID from the given term or ID string\nexport function termToId(term) {\n  if (typeof term === 'string')\n    return term;\n  if (term instanceof Term && term.termType !== 'Quad')\n    return term.id;\n  if (!term)\n    return DEFAULTGRAPH.id;\n\n  // Term instantiated with another library\n  switch (term.termType) {\n  case 'NamedNode':    return term.value;\n  case 'BlankNode':    return `_:${term.value}`;\n  case 'Variable':     return `?${term.value}`;\n  case 'DefaultGraph': return '';\n  case 'Literal':      return `\"${term.value}\"${\n    term.language ? `@${term.language}` :\n      (term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : '')}`;\n  case 'Quad':\n    // To identify RDF* quad components, we escape quotes by doubling them.\n    // This avoids the overhead of backslash parsing of Turtle-like syntaxes.\n    return `<<${\n        escapeQuotes(termToId(term.subject))\n      } ${\n        escapeQuotes(termToId(term.predicate))\n      } ${\n        escapeQuotes(termToId(term.object))\n      }${\n        (isDefaultGraph(term.graph)) ? '' : ` ${termToId(term.graph)}`\n      }>>`;\n  default: throw new Error(`Unexpected termType: ${term.termType}`);\n  }\n}\n\n\n// ## Quad constructor\nexport class Quad extends Term {\n  constructor(subject, predicate, object, graph) {\n    super('');\n    this._subject   = subject;\n    this._predicate = predicate;\n    this._object    = object;\n    this._graph     = graph || DEFAULTGRAPH;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Quad';\n  }\n\n  get subject() {\n    return this._subject;\n  }\n\n  get predicate() {\n    return this._predicate;\n  }\n\n  get object() {\n    return this._object;\n  }\n\n  get graph() {\n    return this._graph;\n  }\n\n  // ### Returns a plain object representation of this quad\n  toJSON() {\n    return {\n      termType:  this.termType,\n      subject:   this._subject.toJSON(),\n      predicate: this._predicate.toJSON(),\n      object:    this._object.toJSON(),\n      graph:     this._graph.toJSON(),\n    };\n  }\n\n  // ### Returns whether this object represents the same quad as the other\n  equals(other) {\n    return !!other && this._subject.equals(other.subject)     &&\n                      this._predicate.equals(other.predicate) &&\n                      this._object.equals(other.object)       &&\n                      this._graph.equals(other.graph);\n  }\n}\nexport { Quad as Triple };\n\n// ### Escapes the quotes within the given literal\nexport function escapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"/g, '\"\"')}`);\n}\n\n// ### Unescapes the quotes within the given literal\nexport function unescapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"\"/g, '\"')}`);\n}\n\n// ### Creates an IRI\nfunction namedNode(iri) {\n  return new NamedNode(iri);\n}\n\n// ### Creates a blank node\nfunction blankNode(name) {\n  return new BlankNode(name || `n3-${_blankNodeCounter++}`);\n}\n\n// ### Creates a literal\nfunction literal(value, languageOrDataType) {\n  // Create a language-tagged string\n  if (typeof languageOrDataType === 'string')\n    return new Literal(`\"${value}\"@${languageOrDataType.toLowerCase()}`);\n\n  // Automatically determine datatype for booleans and numbers\n  let datatype = languageOrDataType ? languageOrDataType.value : '';\n  if (datatype === '') {\n    // Convert a boolean\n    if (typeof value === 'boolean')\n      datatype = xsd.boolean;\n    // Convert an integer or double\n    else if (typeof value === 'number') {\n      if (Number.isFinite(value))\n        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;\n      else {\n        datatype = xsd.double;\n        if (!Number.isNaN(value))\n          value = value > 0 ? 'INF' : '-INF';\n      }\n    }\n  }\n\n  // Create a datatyped literal\n  return (datatype === '' || datatype === xsd.string) ?\n    new Literal(`\"${value}\"`) :\n    new Literal(`\"${value}\"^^${datatype}`);\n}\n\n// ### Creates a variable\nfunction variable(name) {\n  return new Variable(name);\n}\n\n// ### Returns the default graph\nfunction defaultGraph() {\n  return DEFAULTGRAPH;\n}\n\n// ### Creates a quad\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph);\n}\n","// **N3Parser** parses N3 documents.\nimport N3Lexer from './N3Lexer';\nimport N3DataFactory from './N3DataFactory';\nimport namespaces from './IRIs';\n\nlet blankNodePrefix = 0;\n\n// ## Constructor\nexport default class N3Parser {\n  constructor(options) {\n    this._contextStack = [];\n    this._graph = null;\n\n    // Set the document IRI\n    options = options || {};\n    this._setBase(options.baseIRI);\n    options.factory && initDataFactory(this, options.factory);\n\n    // Set supported features depending on the format\n    const format = (typeof options.format === 'string') ?\n                 options.format.match(/\\w*$/)[0].toLowerCase() : '',\n        isTurtle = /turtle/.test(format), isTriG = /trig/.test(format),\n        isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),\n        isN3 = this._n3Mode = /n3/.test(format),\n        isLineMode = isNTriples || isNQuads;\n    if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))\n      this._readPredicateOrNamedGraph = this._readPredicate;\n    // Support triples in other graphs\n    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);\n    // Support nesting of triples\n    this._supportsRDFStar = format === '' || /star|\\*$/.test(format);\n    // Disable relative IRIs in N-Triples or N-Quads mode\n    if (isLineMode)\n      this._resolveRelativeIRI = iri => { return null; };\n    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :\n                              options.blankNodePrefix.replace(/^(?!_:)/, '_:');\n    this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode, n3: isN3 });\n    // Disable explicit quantifiers by default\n    this._explicitQuantifiers = !!options.explicitQuantifiers;\n  }\n\n  // ## Static class methods\n\n  // ### `_resetBlankNodePrefix` restarts blank node prefix identification\n  static _resetBlankNodePrefix() {\n    blankNodePrefix = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_setBase` sets the base IRI to resolve relative IRIs\n  _setBase(baseIRI) {\n    if (!baseIRI) {\n      this._base = '';\n      this._basePath = '';\n    }\n    else {\n      // Remove fragment if present\n      const fragmentPos = baseIRI.indexOf('#');\n      if (fragmentPos >= 0)\n        baseIRI = baseIRI.substr(0, fragmentPos);\n      // Set base IRI and its components\n      this._base = baseIRI;\n      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :\n                         baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');\n      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i);\n      this._baseRoot   = baseIRI[0];\n      this._baseScheme = baseIRI[1];\n    }\n  }\n\n  // ### `_saveContext` stores the current parsing context\n  // when entering a new scope (list, blank node, formula)\n  _saveContext(type, graph, subject, predicate, object) {\n    const n3Mode = this._n3Mode;\n    this._contextStack.push({\n      type,\n      subject, predicate, object, graph,\n      inverse: n3Mode ? this._inversePredicate : false,\n      blankPrefix: n3Mode ? this._prefixes._ : '',\n      quantified: n3Mode ? this._quantified : null,\n    });\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      // Every new scope resets the predicate direction\n      this._inversePredicate = false;\n      // In N3, blank nodes are scoped to a formula\n      // (using a dot as separator, as a blank node label cannot start with it)\n      this._prefixes._ = (this._graph ? `${this._graph.id.substr(2)}.` : '.');\n      // Quantifiers are scoped to a formula\n      this._quantified = Object.create(this._quantified);\n    }\n  }\n\n  // ### `_restoreContext` restores the parent context\n  // when leaving a scope (list, blank node, formula)\n  _restoreContext(type, token) {\n    // Obtain the previous context\n    const context = this._contextStack.pop();\n    if (!context || context.type !== type)\n      return this._error(`Unexpected ${token.type}`, token);\n\n    // Restore the quad of the previous context\n    this._subject   = context.subject;\n    this._predicate = context.predicate;\n    this._object    = context.object;\n    this._graph     = context.graph;\n\n    // Restore N3 context settings\n    if (this._n3Mode) {\n      this._inversePredicate = context.inverse;\n      this._prefixes._ = context.blankPrefix;\n      this._quantified = context.quantified;\n    }\n  }\n\n  // ### `_readInTopContext` reads a token when in the top context\n  _readInTopContext(token) {\n    switch (token.type) {\n    // If an EOF token arrives in the top context, signal that we're done\n    case 'eof':\n      if (this._graph !== null)\n        return this._error('Unclosed graph', token);\n      delete this._prefixes._;\n      return this._callback(null, null, this._prefixes);\n    // It could be a prefix declaration\n    case 'PREFIX':\n      this._sparqlStyle = true;\n    case '@prefix':\n      return this._readPrefix;\n    // It could be a base declaration\n    case 'BASE':\n      this._sparqlStyle = true;\n    case '@base':\n      return this._readBaseIRI;\n    // It could be a graph\n    case '{':\n      if (this._supportsNamedGraphs) {\n        this._graph = '';\n        this._subject = null;\n        return this._readSubject;\n      }\n    case 'GRAPH':\n      if (this._supportsNamedGraphs)\n        return this._readNamedGraphLabel;\n    // Otherwise, the next token must be a subject\n    default:\n      return this._readSubject(token);\n    }\n  }\n\n  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable\n  _readEntity(token, quantifier) {\n    let value;\n    switch (token.type) {\n    // Read a relative or absolute IRI\n    case 'IRI':\n    case 'typeIRI':\n      const iri = this._resolveIRI(token.value);\n      if (iri === null)\n        return this._error('Invalid IRI', token);\n      value = this._namedNode(iri);\n      break;\n    // Read a prefixed name\n    case 'type':\n    case 'prefixed':\n      const prefix = this._prefixes[token.prefix];\n      if (prefix === undefined)\n        return this._error(`Undefined prefix \"${token.prefix}:\"`, token);\n      value = this._namedNode(prefix + token.value);\n      break;\n    // Read a blank node\n    case 'blank':\n      value = this._blankNode(this._prefixes[token.prefix] + token.value);\n      break;\n    // Read a variable\n    case 'var':\n      value = this._variable(token.value.substr(1));\n      break;\n    // Everything else is not an entity\n    default:\n      return this._error(`Expected entity but got ${token.type}`, token);\n    }\n    // In N3 mode, replace the entity if it is quantified\n    if (!quantifier && this._n3Mode && (value.id in this._quantified))\n      value = this._quantified[value.id];\n    return value;\n  }\n\n  // ### `_readSubject` reads a quad's subject\n  _readSubject(token) {\n    this._predicate = null;\n    switch (token.type) {\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph,\n                        this._subject = this._blankNode(), null, null);\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this.RDF_NIL, null, null);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph,\n                        this._graph = this._blankNode(), null, null);\n      return this._readSubject;\n    case '}':\n       // No subject; the graph in which we are reading is closed instead\n      return this._readPunctuation(token);\n    case '@forSome':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forSome\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORSOME;\n      this._quantifier = this._blankNode;\n      return this._readQuantifierList;\n    case '@forAll':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forAll\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORALL;\n      this._quantifier = this._variable;\n      return this._readQuantifierList;\n    case 'literal':\n      if (!this._n3Mode)\n        return this._error('Unexpected literal', token);\n\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._completeSubjectLiteral;\n      }\n      else\n        this._subject = this._literal(token.value, this._namedNode(token.prefix));\n\n      break;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, null, null, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the subject entity\n      if ((this._subject = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the subject might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._readPredicateOrNamedGraph);\n    }\n\n    // The next token must be a predicate,\n    // or, if the subject was actually a graph IRI, a named graph\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // ### `_readPredicate` reads a quad's predicate\n  _readPredicate(token) {\n    const type = token.type;\n    switch (type) {\n    case 'inverse':\n      this._inversePredicate = true;\n    case 'abbreviation':\n      this._predicate = this.ABBREVIATIONS[token.value];\n      break;\n    case '.':\n    case ']':\n    case '}':\n      // Expected predicate didn't come, must have been trailing semicolon\n      if (this._predicate === null)\n        return this._error(`Unexpected ${type}`, token);\n      this._subject = null;\n      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);\n    case ';':\n      // Additional semicolons can be safely ignored\n      return this._predicate !== null ? this._readPredicate :\n             this._error('Expected predicate but got ;', token);\n    case '[':\n      if (this._n3Mode) {\n        // Start a new quad with a new blank node as subject\n        this._saveContext('blank', this._graph, this._subject,\n                          this._subject = this._blankNode(), null);\n        return this._readBlankNodeHead;\n      }\n    case 'blank':\n      if (!this._n3Mode)\n        return this._error('Disallowed blank node as predicate', token);\n    default:\n      if ((this._predicate = this._readEntity(token)) === undefined)\n        return;\n    }\n    // The next token must be an object\n    return this._readObject;\n  }\n\n  // ### `_readObject` reads a quad's object\n  _readObject(token) {\n    switch (token.type) {\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._readDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else\n        this._object = this._literal(token.value, this._namedNode(token.prefix));\n      break;\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph, this._subject, this._predicate,\n                        this._subject = this._blankNode());\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, this._subject, this._predicate, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the object entity\n      if ((this._object = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the object might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._getContextEndReader());\n    }\n    return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph\n  _readPredicateOrNamedGraph(token) {\n    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);\n  }\n\n  // ### `_readGraph` reads a graph\n  _readGraph(token) {\n    if (token.type !== '{')\n      return this._error(`Expected graph but got ${token.type}`, token);\n    // The \"subject\" we read is actually the GRAPH's label\n    this._graph = this._subject, this._subject = null;\n    return this._readSubject;\n  }\n\n  // ### `_readBlankNodeHead` reads the head of a blank node\n  _readBlankNodeHead(token) {\n    if (token.type === ']') {\n      this._subject = null;\n      return this._readBlankNodeTail(token);\n    }\n    else {\n      this._predicate = null;\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readBlankNodeTail` reads the end of a blank node\n  _readBlankNodeTail(token) {\n    if (token.type !== ']')\n      return this._readBlankNodePunctuation(token);\n\n    // Store blank node quad\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this blank node\n    const empty = this._predicate === null;\n    this._restoreContext('blank', token);\n    // If the blank node was the object, restore previous context and read punctuation\n    if (this._object !== null)\n      return this._getContextEndReader();\n    // If the blank node was the predicate, continue reading the object\n    else if (this._predicate !== null)\n      return this._readObject;\n    // If the blank node was the subject, continue reading the predicate\n    else\n      // If the blank node was empty, it could be a named graph label\n      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;\n  }\n\n  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node\n  _readPredicateAfterBlank(token) {\n    switch (token.type) {\n    case '.':\n    case '}':\n      // No predicate is coming if the triple is terminated here\n      this._subject = null;\n      return this._readPunctuation(token);\n    default:\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readListItem` reads items from a list\n  _readListItem(token) {\n    let item = null,                      // The item of the list\n        list = null,                      // The list itself\n        next = this._readListItem;        // The next function to execute\n    const previousList = this._subject,   // The previous list that contains this list\n        stack = this._contextStack,       // The stack of parent contexts\n        parent = stack[stack.length - 1]; // The parent containing the current list\n\n    switch (token.type) {\n    case '[':\n      // Stack the current list quad and start a new quad with a blank node as subject\n      this._saveContext('blank', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST,\n                        this._subject = item = this._blankNode());\n      next = this._readBlankNodeHead;\n      break;\n    case '(':\n      // Stack the current list quad and start a new list\n      this._saveContext('list', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);\n      this._subject = null;\n      break;\n    case ')':\n      // Closing the list; restore the parent context\n      this._restoreContext('list', token);\n      // If this list is contained within a parent list, return the membership quad here.\n      // This will be `<parent list element> rdf:first <this list>.`.\n      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')\n        this._emit(this._subject, this._predicate, this._object, this._graph);\n      // Was this list the parent's subject?\n      if (this._predicate === null) {\n        // The next token is the predicate\n        next = this._readPredicate;\n        // No list tail if this was an empty list\n        if (this._subject === this.RDF_NIL)\n          return next;\n      }\n      // The list was in the parent context's object\n      else {\n        next = this._getContextEndReader();\n        // No list tail if this was an empty list\n        if (this._object === this.RDF_NIL)\n          return next;\n      }\n      // Close the list by making the head nil\n      list = this.RDF_NIL;\n      break;\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        next = this._readListItemDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else {\n        item = this._literal(token.value, this._namedNode(token.prefix));\n        next = this._getContextEndReader();\n      }\n      break;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    default:\n      if ((item = this._readEntity(token)) === undefined)\n        return;\n    }\n\n     // Create a new blank node if no item head was assigned yet\n    if (list === null)\n      this._subject = list = this._blankNode();\n\n    // Is this the first element of the list?\n    if (previousList === null) {\n      // This list is either the subject or the object of its parent\n      if (parent.predicate === null)\n        parent.subject = list;\n      else\n        parent.object = list;\n    }\n    else {\n      // Continue the previous list with the current list\n      this._emit(previousList, this.RDF_REST, list, this._graph);\n    }\n    // If an item was read, add it to the list\n    if (item !== null) {\n      // In N3 mode, the item might be a path\n      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {\n        // Create a new context to add the item's path\n        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);\n        this._subject = item, this._predicate = null;\n        // _readPath will restore the context and output the item\n        return this._getPathReader(this._readListItem);\n      }\n      // Output the item\n      this._emit(list, this.RDF_FIRST, item, this._graph);\n    }\n    return next;\n  }\n\n  // ### `_readDataTypeOrLang` reads an _optional_ datatype or language\n  _readDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, false);\n  }\n\n\n  // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list\n  _readListItemDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, true);\n  }\n\n  // ### `_completeLiteral` completes a literal with an optional datatype or language\n  _completeLiteral(token) {\n    // Create a simple string literal by default\n    let literal = this._literal(this._literalValue);\n\n    switch (token.type) {\n    // Create a datatyped literal\n    case 'type':\n    case 'typeIRI':\n      const datatype = this._readEntity(token);\n      if (datatype === undefined) return; // No datatype means an error occurred\n      literal = this._literal(this._literalValue, datatype);\n      token = null;\n      break;\n    // Create a language-tagged string\n    case 'langcode':\n      literal = this._literal(this._literalValue, token.value);\n      token = null;\n      break;\n    }\n\n    return { token, literal };\n  }\n\n  // Completes a literal in subject position\n  _completeSubjectLiteral(token) {\n    this._subject = this._completeLiteral(token).literal;\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // Completes a literal in object position\n  _completeObjectLiteral(token, listItem) {\n    const completed = this._completeLiteral(token);\n    if (!completed)\n      return;\n    this._object = completed.literal;\n\n    // If this literal was part of a list, write the item\n    // (we could also check the context stack, but passing in a flag is faster)\n    if (listItem)\n      this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);\n    // If the token was consumed, continue with the rest of the input\n    if (completed.token === null)\n      return this._getContextEndReader();\n    // Otherwise, consume the token now\n    else {\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(completed.token);\n    }\n  }\n\n  // ### `_readFormulaTail` reads the end of a formula\n  _readFormulaTail(token) {\n    if (token.type !== '}')\n      return this._readPunctuation(token);\n\n    // Store the last quad of the formula\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this formula\n    this._restoreContext('formula', token);\n    // If the formula was the subject, continue reading the predicate.\n    // If the formula was the object, read punctuation.\n    return this._object === null ? this._readPredicate : this._getContextEndReader();\n  }\n\n  // ### `_readPunctuation` reads punctuation between quads or quad parts\n  _readPunctuation(token) {\n    let next, graph = this._graph;\n    const subject = this._subject, inversePredicate = this._inversePredicate;\n    switch (token.type) {\n    // A closing brace ends a graph\n    case '}':\n      if (this._graph === null)\n        return this._error('Unexpected graph closing', token);\n      if (this._n3Mode)\n        return this._readFormulaTail(token);\n      this._graph = null;\n    // A dot just ends the statement, without sharing anything with the next\n    case '.':\n      this._subject = null;\n      next = this._contextStack.length ? this._readSubject : this._readInTopContext;\n      if (inversePredicate) this._inversePredicate = false;\n      break;\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {\n        next = this._readQuadPunctuation;\n        break;\n      }\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    if (subject !== null) {\n      const predicate = this._predicate, object = this._object;\n      if (!inversePredicate)\n        this._emit(subject, predicate, object,  graph);\n      else\n        this._emit(object,  predicate, subject, graph);\n    }\n    return next;\n  }\n\n    // ### `_readBlankNodePunctuation` reads punctuation in a blank node\n  _readBlankNodePunctuation(token) {\n    let next;\n    switch (token.type) {\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    this._emit(this._subject, this._predicate, this._object, this._graph);\n    return next;\n  }\n\n  // ### `_readQuadPunctuation` reads punctuation after a quad\n  _readQuadPunctuation(token) {\n    if (token.type !== '.')\n      return this._error('Expected dot to follow quad', token);\n    return this._readInTopContext;\n  }\n\n  // ### `_readPrefix` reads the prefix of a prefix declaration\n  _readPrefix(token) {\n    if (token.type !== 'prefix')\n      return this._error('Expected prefix to follow @prefix', token);\n    this._prefix = token.value;\n    return this._readPrefixIRI;\n  }\n\n  // ### `_readPrefixIRI` reads the IRI of a prefix declaration\n  _readPrefixIRI(token) {\n    if (token.type !== 'IRI')\n      return this._error(`Expected IRI to follow prefix \"${this._prefix}:\"`, token);\n    const prefixNode = this._readEntity(token);\n    this._prefixes[this._prefix] = prefixNode.value;\n    this._prefixCallback(this._prefix, prefixNode);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readBaseIRI` reads the IRI of a base declaration\n  _readBaseIRI(token) {\n    const iri = token.type === 'IRI' && this._resolveIRI(token.value);\n    if (!iri)\n      return this._error('Expected valid IRI to follow base declaration', token);\n    this._setBase(iri);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readNamedGraphLabel` reads the label of a named graph\n  _readNamedGraphLabel(token) {\n    switch (token.type) {\n    case 'IRI':\n    case 'blank':\n    case 'prefixed':\n      return this._readSubject(token), this._readGraph;\n    case '[':\n      return this._readNamedGraphBlankLabel;\n    default:\n      return this._error('Invalid graph label', token);\n    }\n  }\n\n  // ### `_readNamedGraphLabel` reads a blank node label of a named graph\n  _readNamedGraphBlankLabel(token) {\n    if (token.type !== ']')\n      return this._error('Invalid graph label', token);\n    this._subject = this._blankNode();\n    return this._readGraph;\n  }\n\n  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration\n  _readDeclarationPunctuation(token) {\n    // SPARQL-style declarations don't have punctuation\n    if (this._sparqlStyle) {\n      this._sparqlStyle = false;\n      return this._readInTopContext(token);\n    }\n\n    if (token.type !== '.')\n      return this._error('Expected declaration to end with a dot', token);\n    return this._readInTopContext;\n  }\n\n  // Reads a list of quantified symbols from a @forSome or @forAll statement\n  _readQuantifierList(token) {\n    let entity;\n    switch (token.type) {\n    case 'IRI':\n    case 'prefixed':\n      if ((entity = this._readEntity(token, true)) !== undefined)\n        break;\n    default:\n      return this._error(`Unexpected ${token.type}`, token);\n    }\n    // Without explicit quantifiers, map entities to a quantified entity\n    if (!this._explicitQuantifiers)\n      this._quantified[entity.id] = this._quantifier(this._blankNode().value);\n    // With explicit quantifiers, output the reified quantifier\n    else {\n      // If this is the first item, start a new quantifier list\n      if (this._subject === null)\n        this._emit(this._graph || this.DEFAULTGRAPH, this._predicate,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Otherwise, continue the previous list\n      else\n        this._emit(this._subject, this.RDF_REST,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Output the list item\n      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);\n    }\n    return this._readQuantifierPunctuation;\n  }\n\n  // Reads punctuation from a @forSome or @forAll statement\n  _readQuantifierPunctuation(token) {\n    // Read more quantifiers\n    if (token.type === ',')\n      return this._readQuantifierList;\n    // End of the quantifier list\n    else {\n      // With explicit quantifiers, close the quantifier list\n      if (this._explicitQuantifiers) {\n        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);\n        this._subject = null;\n      }\n      // Read a dot\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(token);\n    }\n  }\n\n  // ### `_getPathReader` reads a potential path and then resumes with the given function\n  _getPathReader(afterPath) {\n    this._afterPath = afterPath;\n    return this._readPath;\n  }\n\n  // ### `_readPath` reads a potential path\n  _readPath(token) {\n    switch (token.type) {\n    // Forward path\n    case '!': return this._readForwardPath;\n    // Backward path\n    case '^': return this._readBackwardPath;\n    // Not a path; resume reading where we left off\n    default:\n      const stack = this._contextStack, parent = stack.length && stack[stack.length - 1];\n      // If we were reading a list item, we still need to output it\n      if (parent && parent.type === 'item') {\n        // The list item is the remaining subejct after reading the path\n        const item = this._subject;\n        // Switch back to the context of the list\n        this._restoreContext('item', token);\n        // Output the list item\n        this._emit(this._subject, this.RDF_FIRST, item, this._graph);\n      }\n      return this._afterPath(token);\n    }\n  }\n\n  // ### `_readForwardPath` reads a '!' path\n  _readForwardPath(token) {\n    let subject, predicate;\n    const object = this._blankNode();\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's object\n    if (this._predicate === null)\n      subject = this._subject, this._subject = object;\n    // If we were reading an object, replace the subject by the path's object\n    else\n      subject = this._object,  this._object  = object;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readBackwardPath` reads a '^' path\n  _readBackwardPath(token) {\n    const subject = this._blankNode();\n    let predicate, object;\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's subject\n    if (this._predicate === null)\n      object = this._subject, this._subject = subject;\n    // If we were reading an object, replace the subject by the path's subject\n    else\n      object = this._object,  this._object  = subject;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple\n  _readRDFStarTailOrGraph(token) {\n    if (token.type !== '>>') {\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined)\n        return this._readRDFStarTail;\n      return this._error(`Expected >> to follow \"${this._object.id}\"`, token);\n    }\n    return this._readRDFStarTail(token);\n  }\n\n  // ### `_readRDFStarTail` reads the end of a nested RDF* triple\n  _readRDFStarTail(token) {\n    if (token.type !== '>>')\n      return this._error(`Expected >> but got ${token.type}`, token);\n    // Read the quad and restore the previous context\n    const quad = this._quad(this._subject, this._predicate, this._object,\n      this._graph || this.DEFAULTGRAPH);\n    this._restoreContext('<<', token);\n    // If the triple was the subject, continue by reading the predicate.\n    if (this._subject === null) {\n      this._subject = quad;\n      return this._readPredicate;\n    }\n    // If the triple was the object, read context end.\n    else {\n      this._object = quad;\n      return this._getContextEndReader();\n    }\n  }\n\n  // ### `_getContextEndReader` gets the next reader function at the end of a context\n  _getContextEndReader() {\n    const contextStack = this._contextStack;\n    if (!contextStack.length)\n      return this._readPunctuation;\n\n    switch (contextStack[contextStack.length - 1].type) {\n    case 'blank':\n      return this._readBlankNodeTail;\n    case 'list':\n      return this._readListItem;\n    case 'formula':\n      return this._readFormulaTail;\n    case '<<':\n      return this._readRDFStarTailOrGraph;\n    }\n  }\n\n  // ### `_emit` sends a quad through the callback\n  _emit(subject, predicate, object, graph) {\n    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));\n  }\n\n  // ### `_error` emits an error message through the callback\n  _error(message, token) {\n    const err = new Error(`${message} on line ${token.line}.`);\n    err.context = {\n      token: token,\n      line: token.line,\n      previousToken: this._lexer.previousToken,\n    };\n    this._callback(err);\n    this._callback = noop;\n  }\n\n  // ### `_resolveIRI` resolves an IRI against the base path\n  _resolveIRI(iri) {\n    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);\n  }\n\n  // ### `_resolveRelativeIRI` resolves an IRI against the base path,\n  // assuming that a base path has been set and that the IRI is indeed relative\n  _resolveRelativeIRI(iri) {\n    // An empty relative IRI indicates the base IRI\n    if (!iri.length)\n      return this._base;\n    // Decide resolving strategy based in the first character\n    switch (iri[0]) {\n    // Resolve relative fragment IRIs against the base IRI\n    case '#': return this._base + iri;\n    // Resolve relative query string IRIs by replacing the query string\n    case '?': return this._base.replace(/(?:\\?.*)?$/, iri);\n    // Resolve root-relative IRIs at the root of the base IRI\n    case '/':\n      // Resolve scheme-relative IRIs to the scheme\n      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);\n    // Resolve all other IRIs at the base IRI's path\n    default:\n      // Relative IRIs cannot contain a colon in the first path segment\n      return (/^[^/:]*:/.test(iri)) ? null : this._removeDotSegments(this._basePath + iri);\n    }\n  }\n\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986\n  _removeDotSegments(iri) {\n    // Don't modify the IRI if it does not contain any dot segments\n    if (!/(^|\\/)\\.\\.?($|[/#?])/.test(iri))\n      return iri;\n\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\n    const length = iri.length;\n    let result = '', i = -1, pathStart = -1, segmentStart = 0, next = '/';\n\n    while (i < length) {\n      switch (next) {\n      // The path starts with the first slash after the authority\n      case ':':\n        if (pathStart < 0) {\n          // Skip two slashes before the authority\n          if (iri[++i] === '/' && iri[++i] === '/')\n            // Skip to slash after the authority\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\n              i = pathStart;\n        }\n        break;\n      // Don't modify a query string or fragment\n      case '?':\n      case '#':\n        i = length;\n        break;\n      // Handle '/.' or '/..' path segments\n      case '/':\n        if (iri[i + 1] === '.') {\n          next = iri[++i + 1];\n          switch (next) {\n          // Remove a '/.' segment\n          case '/':\n            result += iri.substring(segmentStart, i - 1);\n            segmentStart = i + 1;\n            break;\n          // Remove a trailing '/.' segment\n          case undefined:\n          case '?':\n          case '#':\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\n          // Remove a '/..' segment\n          case '.':\n            next = iri[++i + 1];\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\n              result += iri.substring(segmentStart, i - 2);\n              // Try to remove the parent path from result\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\n                result = result.substr(0, segmentStart);\n              // Remove a trailing '/..' segment\n              if (next !== '/')\n                return `${result}/${iri.substr(i + 1)}`;\n              segmentStart = i + 1;\n            }\n          }\n        }\n      }\n      next = iri[++i];\n    }\n    return result + iri.substring(segmentStart);\n  }\n\n  // ## Public methods\n\n  // ### `parse` parses the N3 input and emits each parsed quad through the callback\n  parse(input, quadCallback, prefixCallback) {\n    // The read callback is the next function to be executed when a token arrives.\n    // We start reading in the top context.\n    this._readCallback = this._readInTopContext;\n    this._sparqlStyle = false;\n    this._prefixes = Object.create(null);\n    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2)\n                                             : `b${blankNodePrefix++}_`;\n    this._prefixCallback = prefixCallback || noop;\n    this._inversePredicate = false;\n    this._quantified = Object.create(null);\n\n    // Parse synchronously if no quad callback is given\n    if (!quadCallback) {\n      const quads = [];\n      let error;\n      this._callback = (e, t) => { e ? (error = e) : t && quads.push(t); };\n      this._lexer.tokenize(input).every(token => {\n        return this._readCallback = this._readCallback(token);\n      });\n      if (error) throw error;\n      return quads;\n    }\n\n    // Parse asynchronously otherwise, executing the read callback when a token arrives\n    this._callback = quadCallback;\n    this._lexer.tokenize(input, (error, token) => {\n      if (error !== null)\n        this._callback(error), this._callback = noop;\n      else if (this._readCallback)\n        this._readCallback = this._readCallback(token);\n    });\n  }\n}\n\n// The empty function\nfunction noop() {}\n\n// Initializes the parser with the given data factory\nfunction initDataFactory(parser, factory) {\n  // Set factory methods\n  const namedNode = factory.namedNode;\n  parser._namedNode   = namedNode;\n  parser._blankNode   = factory.blankNode;\n  parser._literal     = factory.literal;\n  parser._variable    = factory.variable;\n  parser._quad        = factory.quad;\n  parser.DEFAULTGRAPH = factory.defaultGraph();\n\n  // Set common named nodes\n  parser.RDF_FIRST  = namedNode(namespaces.rdf.first);\n  parser.RDF_REST   = namedNode(namespaces.rdf.rest);\n  parser.RDF_NIL    = namedNode(namespaces.rdf.nil);\n  parser.N3_FORALL  = namedNode(namespaces.r.forAll);\n  parser.N3_FORSOME = namedNode(namespaces.r.forSome);\n  parser.ABBREVIATIONS = {\n    'a': namedNode(namespaces.rdf.type),\n    '=': namedNode(namespaces.owl.sameAs),\n    '>': namedNode(namespaces.log.implies),\n  };\n  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');\n}\ninitDataFactory(N3Parser.prototype, N3DataFactory);\n","// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport { default as N3DataFactory, Term } from './N3DataFactory';\nimport { isDefaultGraph } from './N3Util';\n\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\n\nconst { rdf, xsd } = namespaces;\n\n// Characters in literals that require escaping\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals() {\n    return false;\n  }\n}\n\n// ## Constructor\nexport default class N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function')\n      options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      let output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) { output += chunk; done && done(); },\n        end: done => { done && done(null, output); },\n      };\n      this._endStream = true;\n    }\n    else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!(/triple|quad/i).test(options.format)) {\n      this._lineMode = false;\n      this._graph = DEFAULTGRAPH;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n      if (options.baseIRI) {\n        this._baseMatcher = new RegExp(`^${escapeRegex(options.baseIRI)\n            }${options.baseIRI.endsWith('/') ? '' : '[#?]'}`);\n        this._baseLength = options.baseIRI.length;\n      }\n    }\n    else {\n      this._lineMode = true;\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(`;\\n    ${\n                      this._encodePredicate(this._predicate = predicate)} ${\n                      this._encodeObject(object)}`, done);\n      }\n      // Different subject; write the whole quad\n      else\n        this._write(`${(this._subject === null ? '' : '.\\n') +\n                    this._encodeSubject(this._subject = subject)} ${\n                    this._encodePredicate(this._predicate = predicate)} ${\n                    this._encodeObject(object)}`, done);\n    }\n    catch (error) { done && done(error); }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return  `${this._encodeSubject(subject)} ${\n            this._encodeIriOrBlank(predicate)} ${\n            this._encodeObject(object)\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    return quads.map(t => {\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\n    }).join('');\n  }\n\n  // ### `_encodeSubject` represents a subject\n  _encodeSubject(entity) {\n    return entity.termType === 'Quad' ?\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && (entity.value in this._lists))\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseMatcher && this._baseMatcher.test(iri))\n      iri = iri.substr(this._baseLength);\n    // Escape special characters\n    if (escape.test(iri))\n      iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? `<${iri}>` :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    let value = literal.value;\n    if (escape.test(value))\n      value = value.replace(escapeAll, characterReplacer);\n\n    // Write a language-tagged literal\n    if (literal.language)\n      return `\"${value}\"@${literal.language}`;\n\n    // Write dedicated literals per data type\n    if (this._lineMode) {\n      // Only abbreviate strings in N-Triples or N-Quads\n      if (literal.datatype.value === xsd.string)\n        return `\"${value}\"`;\n    }\n    else {\n      // Use common datatype abbreviations in Turtle or TriG\n      switch (literal.datatype.value) {\n      case xsd.string:\n        return `\"${value}\"`;\n      case xsd.boolean:\n        if (value === 'true' || value === 'false')\n          return value;\n        break;\n      case xsd.integer:\n        if (/^[+-]?\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.decimal:\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.double:\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\n          return value;\n        break;\n      }\n    }\n\n    // Write a regular datatyped literal\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    switch (object.termType) {\n    case 'Quad':\n      return this._encodeQuad(object);\n    case 'Literal':\n      return this._encodeLiteral(object);\n    default:\n      return this._encodeIriOrBlank(object);\n    }\n  }\n\n  // ### `_encodeQuad` encodes an RDF* quad\n  _encodeQuad({ subject, predicate, object, graph }) {\n    return `<<${\n      this._encodeSubject(subject)} ${\n      this._encodePredicate(predicate)} ${\n      this._encodeObject(object)}${\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined)\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function')\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    const prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    // Ignore prefixes if not supported by the serialization\n    if (!this._prefixIRIs)\n      return done && done();\n\n    // Write all new prefixes\n    let hasPrefixes = false;\n    for (let prefix in prefixes) {\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string')\n        iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = (prefix += ':');\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '', prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = escapeRegex(IRIlist, /[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\n                                     `^(${IRIlist})([a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    let children = predicate, child, length;\n    // Empty blank node\n    if (predicate === undefined)\n      children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType)\n      children = [{ predicate: predicate, object: object }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate))\n      children = [predicate];\n\n    switch (length = children.length) {\n    // Generate an empty blank node\n    case 0:\n      return new SerializedTerm('[]');\n    // Generate a non-nested one-triple blank node\n    case 1:\n      child = children[0];\n      if (!(child.object instanceof SerializedTerm))\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\n                                  this._encodeObject(child.object)} ]`);\n    // Generate a multi-triple or nested blank node\n    default:\n      let contents = '[';\n      // Write all triples in order\n      for (let i = 0; i < length; i++) {\n        child = children[i];\n        // Write only the object is the predicate is the same as the previous\n        if (child.predicate.equals(predicate))\n          contents += `, ${this._encodeObject(child.object)}`;\n        // Otherwise, write the predicate and the object\n        else {\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\n                      this._encodePredicate(child.predicate)} ${\n                      this._encodeObject(child.object)}`;\n          predicate = child.predicate;\n        }\n      }\n      return new SerializedTerm(`${contents}\\n]`);\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    const length = elements && elements.length || 0, contents = new Array(length);\n    for (let i = 0; i < length; i++)\n      contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm(`(${contents.join(' ')})`);\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n\nfunction escapeRegex(regex) {\n  return regex.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n}\n","// **N3Store** objects store N3 quads by graph in memory.\nimport { default as N3DataFactory, termToId, termFromId } from './N3DataFactory';\nimport { Readable } from 'readable-stream';\nimport namespaces from './IRIs';\n\n// ## Constructor\nexport default class N3Store {\n  constructor(quads, options) {\n    // The number of quads is initially zero\n    this._size = 0;\n    // `_graphs` contains subject, predicate, and object indexes per graph\n    this._graphs = Object.create(null);\n    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,\n    // saving memory by using only numbers as keys in `_graphs`\n    this._id = 0;\n    this._ids = Object.create(null);\n    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero\n    this._entities = Object.create(null); // inverse of `_ids`\n    // `_blankNodeIndex` is the index of the last automatically named blank node\n    this._blankNodeIndex = 0;\n\n    // Shift parameters if `quads` is not given\n    if (!options && quads && !quads[0])\n      options = quads, quads = null;\n    options = options || {};\n    this._factory = options.factory || N3DataFactory;\n\n    // Add quads if passed\n    if (quads)\n      this.addQuads(quads);\n  }\n\n  // ## Public properties\n\n  // ### `size` returns the number of quads in the store\n  get size() {\n    // Return the quad count if if was cached\n    let size = this._size;\n    if (size !== null)\n      return size;\n\n    // Calculate the number of quads by counting to the deepest level\n    size = 0;\n    const graphs = this._graphs;\n    let subjects, subject;\n    for (const graphKey in graphs)\n      for (const subjectKey in (subjects = graphs[graphKey].subjects))\n        for (const predicateKey in (subject = subjects[subjectKey]))\n          size += Object.keys(subject[predicateKey]).length;\n    return this._size = size;\n  }\n\n  // ## Private methods\n\n  // ### `_addToIndex` adds a quad to a three-layered index.\n  // Returns if the index has changed, if the entry did not already exist.\n  _addToIndex(index0, key0, key1, key2) {\n    // Create layers as necessary\n    const index1 = index0[key0] || (index0[key0] = {});\n    const index2 = index1[key1] || (index1[key1] = {});\n    // Setting the key to _any_ value signals the presence of the quad\n    const existed = key2 in index2;\n    if (!existed)\n      index2[key2] = null;\n    return !existed;\n  }\n\n  // ### `_removeFromIndex` removes a quad from a three-layered index\n  _removeFromIndex(index0, key0, key1, key2) {\n    // Remove the quad from the index\n    const index1 = index0[key0], index2 = index1[key1];\n    delete index2[key2];\n\n    // Remove intermediary index layers if they are empty\n    for (const key in index2) return;\n    delete index1[key1];\n    for (const key in index1) return;\n    delete index0[key0];\n  }\n\n  // ### `_findInIndex` finds a set of quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  // `name0`, `name1`, and `name2` are the names of the keys at each level,\n  // used when reconstructing the resulting quad\n  // (for instance: _subject_, _predicate_, and _object_).\n  // Finally, `graphId` will be the graph of the created quads.\n  *_findInIndex(index0, key0, key1, key2, name0, name1, name2, graphId) {\n    let tmp, index1, index2;\n    const entityKeys = this._entities;\n    const graph = termFromId(graphId, this._factory);\n    const parts = { subject: null, predicate: null, object: null };\n\n    // If a key is specified, use only that part of index 0.\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      if (index1 = index0[value0]) {\n        parts[name0] = termFromId(entityKeys[value0], this._factory);\n        // If a key is specified, use only that part of index 1.\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          if (index2 = index1[value1]) {\n            parts[name1] = termFromId(entityKeys[value1], this._factory);\n            // If a key is specified, use only that part of index 2, if it exists.\n            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);\n            // Create quads for all items found in index 2.\n            for (let l = 0; l < values.length; l++) {\n              parts[name2] = termFromId(entityKeys[values[l]], this._factory);\n              yield this._factory.quad(parts.subject, parts.predicate, parts.object, graph);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // ### `_loop` executes the callback on all keys of index 0\n  _loop(index0, callback) {\n    for (const key0 in index0)\n      callback(key0);\n  }\n\n  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0\n  _loopByKey0(index0, key0, callback) {\n    let index1, key1;\n    if (index1 = index0[key0]) {\n      for (key1 in index1)\n        callback(key1);\n    }\n  }\n\n  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0\n  _loopByKey1(index0, key1, callback) {\n    let key0, index1;\n    for (key0 in index0) {\n      index1 = index0[key0];\n      if (index1[key1])\n        callback(key0);\n    }\n  }\n\n  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2\n  _loopBy2Keys(index0, key0, key1, callback) {\n    let index1, index2, key2;\n    if ((index1 = index0[key0]) && (index2 = index1[key1])) {\n      for (key2 in index2)\n        callback(key2);\n    }\n  }\n\n  // ### `_countInIndex` counts matching quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  _countInIndex(index0, key0, key1, key2) {\n    let count = 0, tmp, index1, index2;\n\n    // If a key is specified, count only that part of index 0\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      if (index1 = index0[value0]) {\n        // If a key is specified, count only that part of index 1\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          if (index2 = index1[value1]) {\n            // If a key is specified, count the quad if it exists\n            if (key2) (key2 in index2) && count++;\n            // Otherwise, count all quads\n            else count += Object.keys(index2).length;\n          }\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `_getGraphs` returns an array with the given graph,\n  // or all graphs if the argument is null or undefined.\n  _getGraphs(graph) {\n    if (!isString(graph))\n      return this._graphs;\n    const graphs = {};\n    graphs[graph] = this._graphs[graph];\n    return graphs;\n  }\n\n  // ### `_uniqueEntities` returns a function that accepts an entity ID\n  // and passes the corresponding entity to callback if it hasn't occurred before.\n  _uniqueEntities(callback) {\n    const uniqueIds = Object.create(null);\n    return id => {\n      if (!(id in uniqueIds)) {\n        uniqueIds[id] = true;\n        callback(termFromId(this._entities[id], this._factory));\n      }\n    };\n  }\n\n  // ## Public methods\n\n  // ### `add` adds the specified quad to the dataset.\n  // Returns the dataset instance it was called on.\n  // Existing quads, as defined in Quad.equals, will be ignored.\n  add(quad) {\n    this.addQuad(quad);\n    return this;\n  }\n\n  // ### `addQuad` adds a new quad to the store.\n  // Returns if the quad index has changed, if the quad did not already exist.\n  addQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find the graph that will contain the triple\n    let graphItem = this._graphs[graph];\n    // Create the graph if it doesn't exist yet\n    if (!graphItem) {\n      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };\n      // Freezing a graph helps subsequent `add` performance,\n      // and properties will never be modified anyway\n      Object.freeze(graphItem);\n    }\n\n    // Since entities can often be long IRIs, we avoid storing them in every index.\n    // Instead, we have a separate index that maps entities to numbers,\n    // which are then used as keys in the other indexes.\n    const ids = this._ids;\n    const entities = this._entities;\n    subject   = ids[subject]   || (ids[entities[++this._id] = subject]   = this._id);\n    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);\n    object    = ids[object]    || (ids[entities[++this._id] = object]    = this._id);\n\n    const changed = this._addToIndex(graphItem.subjects,   subject,   predicate, object);\n    this._addToIndex(graphItem.predicates, predicate, object,    subject);\n    this._addToIndex(graphItem.objects,    object,    subject,   predicate);\n\n    // The cached quad count is now invalid\n    this._size = null;\n    return changed;\n  }\n\n  // ### `addQuads` adds multiple quads to the store\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `delete` removes the specified quad from the dataset.\n  // Returns the dataset instance it was called on.\n  delete(quad) {\n    this.removeQuad(quad);\n    return this;\n  }\n\n  // ### `has` determines whether a dataset includes a certain quad or quad pattern.\n  has(subjectOrQuad, predicate, object, graph) {\n    if (subjectOrQuad && subjectOrQuad.subject)\n      ({ subject: subjectOrQuad, predicate, object, graph } = subjectOrQuad);\n    return !this.readQuads(subjectOrQuad, predicate, object, graph).next().done;\n  }\n\n  // ### `import` adds a stream of quads to the store\n  import(stream) {\n    stream.on('data', quad => { this.addQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeQuad` removes a quad from the store if it exists\n  removeQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    subject = termToId(subject);\n    predicate = termToId(predicate);\n    object = termToId(object);\n    graph = termToId(graph);\n\n    // Find internal identifiers for all components\n    // and verify the quad exists.\n    const ids = this._ids, graphs = this._graphs;\n    let graphItem, subjects, predicates;\n    if (!(subject    = ids[subject]) || !(predicate = ids[predicate]) ||\n        !(object     = ids[object])  || !(graphItem = graphs[graph])  ||\n        !(subjects   = graphItem.subjects[subject]) ||\n        !(predicates = subjects[predicate]) ||\n        !(object in predicates))\n      return false;\n\n    // Remove it from all indexes\n    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);\n    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);\n    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);\n    if (this._size !== null) this._size--;\n\n    // Remove the graph if it is empty\n    for (subject in graphItem.subjects) return true;\n    delete graphs[graph];\n    return true;\n  }\n\n  // ### `removeQuads` removes multiple quads from the store\n  removeQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.removeQuad(quads[i]);\n  }\n\n  // ### `remove` removes a stream of quads from the store\n  remove(stream) {\n    stream.on('data', quad => { this.removeQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeMatches` removes all matching quads from the store\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  removeMatches(subject, predicate, object, graph) {\n    const stream = new Readable({ objectMode: true });\n\n    stream._read = () => {\n      for (const quad of this.readQuads(subject, predicate, object, graph))\n        stream.push(quad);\n      stream.push(null);\n    };\n\n    return this.remove(stream);\n  }\n\n  // ### `deleteGraph` removes all triples with the given graph from the store\n  deleteGraph(graph) {\n    return this.removeMatches(null, null, null, graph);\n  }\n\n  // ### `getQuads` returns an array of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getQuads(subject, predicate, object, graph) {\n    return [...this.readQuads(subject, predicate, object, graph)];\n  }\n\n  // ### `readQuads` returns an generator of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  *readQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the object index will be the fastest\n            yield* this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                              'object', 'subject', 'predicate', graphId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            yield* this._findInIndex(content.subjects, subjectId, predicateId, null,\n                              'subject', 'predicate', 'object', graphId);\n        }\n        else if (predicateId)\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          yield* this._findInIndex(content.predicates, predicateId, objectId, null,\n                            'predicate', 'object', 'subject', graphId);\n        else if (objectId)\n          // If only object is given, the object index will be the fastest\n          yield* this._findInIndex(content.objects, objectId, null, null,\n                            'object', 'subject', 'predicate', graphId);\n        else\n          // If nothing is given, iterate subjects and predicates first\n          yield* this._findInIndex(content.subjects, null, null, null,\n                            'subject', 'predicate', 'object', graphId);\n      }\n    }\n  }\n\n  // ### `match` returns a new dataset that is comprised of all quads in the current instance matching the given arguments.\n  // The logic described in Quad Matching is applied for each quad in this dataset to check if it should be included in the output dataset.\n  // Note: This method always returns a new DatasetCore, even if that dataset contains no quads.\n  // Note: Since a DatasetCore is an unordered set, the order of the quads within the returned sequence is arbitrary.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  // For backwards compatibility, the object return also implements the Readable stream interface.\n  match(subject, predicate, object, graph) {\n    return new DatasetCoreAndReadableStream(this, subject, predicate, object, graph);\n  }\n\n  // ### `countQuads` returns the number of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  countQuads(subject, predicate, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const graphs = this._getGraphs(graph), ids = this._ids;\n    let count = 0, content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject])   ||\n        isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return 0;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subject) {\n          if (object)\n            // If subject and object are given, the object index will be the fastest\n            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);\n        }\n        else if (predicate) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);\n        }\n        else {\n          // If only object is possibly given, the object index will be the fastest\n          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `forEach` executes the callback on all quads.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forEach(callback, subject, predicate, object, graph) {\n    this.some(quad => {\n      callback(quad);\n      return false;\n    }, subject, predicate, object, graph);\n  }\n\n  // ### `every` executes the callback on all quads,\n  // and returns `true` if it returns truthy for all them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  every(callback, subject, predicate, object, graph) {\n    let some = false;\n    const every = !this.some(quad => {\n      some = true;\n      return !callback(quad);\n    }, subject, predicate, object, graph);\n    return some && every;\n  }\n\n  // ### `some` executes the callback on all quads,\n  // and returns `true` if it returns truthy for any of them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  some(callback, subject, predicate, object, graph) {\n    for (const quad of this.readQuads(subject, predicate, object, graph))\n      if (callback(quad))\n        return true;\n    return false;\n  }\n\n  // ### `getSubjects` returns all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getSubjects(predicate, object, graph) {\n    const results = [];\n    this.forSubjects(s => { results.push(s); }, predicate, object, graph);\n    return results;\n  }\n\n  // ### `forSubjects` executes the callback on all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forSubjects(callback, predicate, object, graph) {\n    // Convert terms to internal string representation\n    predicate = predicate && termToId(predicate);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, predicateId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(predicate) && !(predicateId = ids[predicate]) ||\n        isString(object)    && !(objectId    = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (predicateId) {\n          if (objectId)\n            // If predicate and object are given, the POS index is best.\n            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);\n          else\n            // If only predicate is given, the SPO index is best.\n            this._loopByKey1(content.subjects, predicateId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the OSP index is best.\n          this._loopByKey0(content.objects, objectId, callback);\n        else\n          // If no params given, iterate all the subjects\n          this._loop(content.subjects, callback);\n      }\n    }\n  }\n\n  // ### `getPredicates` returns all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getPredicates(subject, object, graph) {\n    const results = [];\n    this.forPredicates(p => { results.push(p); }, subject, object, graph);\n    return results;\n  }\n\n  // ### `forPredicates` executes the callback on all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forPredicates(callback, subject, object, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    object = object && termToId(object);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject) && !(subjectId = ids[subject]) ||\n        isString(object)  && !(objectId  = ids[object]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the OSP index is best.\n            this._loopBy2Keys(content.objects, objectId, subjectId, callback);\n          else\n            // If only subject is given, the SPO index is best.\n            this._loopByKey0(content.subjects, subjectId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the POS index is best.\n          this._loopByKey1(content.predicates, objectId, callback);\n        else\n          // If no params given, iterate all the predicates.\n          this._loop(content.predicates, callback);\n      }\n    }\n  }\n\n  // ### `getObjects` returns all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getObjects(subject, predicate, graph) {\n    const results = [];\n    this.forObjects(o => { results.push(o); }, subject, predicate, graph);\n    return results;\n  }\n\n  // ### `forObjects` executes the callback on all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forObjects(callback, subject, predicate, graph) {\n    // Convert terms to internal string representation\n    subject = subject && termToId(subject);\n    predicate = predicate && termToId(predicate);\n    graph = graph && termToId(graph);\n\n    const ids = this._ids, graphs = this._getGraphs(graph);\n    let content, subjectId, predicateId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (isString(subject)   && !(subjectId   = ids[subject]) ||\n        isString(predicate) && !(predicateId = ids[predicate]))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (predicateId)\n            // If subject and predicate are given, the SPO index is best.\n            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);\n          else\n            // If only subject is given, the OSP index is best.\n            this._loopByKey1(content.objects, subjectId, callback);\n        }\n        else if (predicateId)\n          // If only predicate is given, the POS index is best.\n          this._loopByKey0(content.predicates, predicateId, callback);\n        else\n          // If no params given, iterate all the objects.\n          this._loop(content.objects, callback);\n      }\n    }\n  }\n\n  // ### `getGraphs` returns all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getGraphs(subject, predicate, object) {\n    const results = [];\n    this.forGraphs(g => { results.push(g); }, subject, predicate, object);\n    return results;\n  }\n\n  // ### `forGraphs` executes the callback on all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forGraphs(callback, subject, predicate, object) {\n    for (const graph in this._graphs) {\n      this.some(quad => {\n        callback(quad.graph);\n        return true; // Halt iteration of some()\n      }, subject, predicate, object, graph);\n    }\n  }\n\n  // ### `createBlankNode` creates a new blank node, returning its name\n  createBlankNode(suggestedName) {\n    let name, index;\n    // Generate a name based on the suggested name\n    if (suggestedName) {\n      name = suggestedName = `_:${suggestedName}`, index = 1;\n      while (this._ids[name])\n        name = suggestedName + index++;\n    }\n    // Generate a generic blank node name\n    else {\n      do { name = `_:b${this._blankNodeIndex++}`; }\n      while (this._ids[name]);\n    }\n    // Add the blank node to the entities, avoiding the generation of duplicates\n    this._ids[name] = ++this._id;\n    this._entities[this._id] = name;\n    return this._factory.blankNode(name.substr(2));\n  }\n\n  // ### `extractLists` finds and removes all list triples\n  // and returns the items per list.\n  extractLists({ remove = false, ignoreErrors = false } = {}) {\n    const lists = {}; // has scalar keys so could be a simple Object\n    const onError = ignoreErrors ? (() => true) :\n                  ((node, message) => { throw new Error(`${node.value} ${message}`); });\n\n    // Traverse each list from its tail\n    const tails = this.getQuads(null, namespaces.rdf.rest, namespaces.rdf.nil, null);\n    const toRemove = remove ? [...tails] : [];\n    tails.forEach(tailQuad => {\n      const items = [];             // the members found as objects of rdf:first quads\n      let malformed = false;      // signals whether the current list is malformed\n      let head;                   // the head of the list (_:b1 in above example)\n      let headPos;                // set to subject or object when head is set\n      const graph = tailQuad.graph; // make sure list is in exactly one graph\n\n      // Traverse the list from tail to end\n      let current = tailQuad.subject;\n      while (current && !malformed) {\n        const objectQuads = this.getQuads(null, null, current, null);\n        const subjectQuads = this.getQuads(current, null, null, null);\n        let quad, first = null, rest = null, parent = null;\n\n        // Find the first and rest of this list node\n        for (let i = 0; i < subjectQuads.length && !malformed; i++) {\n          quad = subjectQuads[i];\n          if (!quad.graph.equals(graph))\n            malformed = onError(current, 'not confined to single graph');\n          else if (head)\n            malformed = onError(current, 'has non-list arcs out');\n\n          // one rdf:first\n          else if (quad.predicate.value === namespaces.rdf.first) {\n            if (first)\n              malformed = onError(current, 'has multiple rdf:first arcs');\n            else\n              toRemove.push(first = quad);\n          }\n\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (rest)\n              malformed = onError(current, 'has multiple rdf:rest arcs');\n            else\n              toRemove.push(rest = quad);\n          }\n\n          // alien triple\n          else if (objectQuads.length)\n            malformed = onError(current, 'can\\'t be subject and object');\n          else {\n            head = quad; // e.g. { (1 2 3) :p :o }\n            headPos = 'subject';\n          }\n        }\n\n        // { :s :p (1 2) } arrives here with no head\n        // { (1 2) :p :o } arrives here with head set to the list.\n        for (let i = 0; i < objectQuads.length && !malformed; ++i) {\n          quad = objectQuads[i];\n          if (head)\n            malformed = onError(current, 'can\\'t have coreferences');\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (parent)\n              malformed = onError(current, 'has incoming rdf:rest arcs');\n            else\n              parent = quad;\n          }\n          else {\n            head = quad; // e.g. { :s :p (1 2) }\n            headPos = 'object';\n          }\n        }\n\n        // Store the list item and continue with parent\n        if (!first)\n          malformed = onError(current, 'has no list head');\n        else\n          items.unshift(first.object);\n        current = parent && parent.subject;\n      }\n\n      // Don't remove any quads if the list is malformed\n      if (malformed)\n        remove = false;\n      // Store the list under the value of its head\n      else if (head)\n        lists[head[headPos].value] = items;\n    });\n\n    // Remove list quads if requested\n    if (remove)\n      this.removeQuads(toRemove);\n    return lists;\n  }\n\n  // ### Store is an iterable.\n  // Can be used where iterables are expected: for...of loops, array spread operator,\n  // `yield*`, and destructuring assignment (order is not guaranteed).\n  *[Symbol.iterator]() {\n    yield* this.readQuads();\n  }\n}\n\n// Determines whether the argument is a string\nfunction isString(s) {\n  return typeof s === 'string' || s instanceof String;\n}\n\n/**\n * A class that implements both DatasetCore and Readable.\n */\nclass DatasetCoreAndReadableStream extends Readable {\n  constructor(n3Store, subject, predicate, object, graph) {\n    super({ objectMode: true });\n    Object.assign(this, { n3Store, subject, predicate, object, graph });\n  }\n\n  get filtered() {\n    if (!this._filtered) {\n      const { n3Store, graph, object, predicate, subject } = this;\n      const newStore = this._filtered = new N3Store({ factory: n3Store._factory });\n      for (const quad of n3Store.readQuads(subject, predicate, object, graph))\n        newStore.addQuad(quad);\n    }\n    return this._filtered;\n  }\n\n  get size() {\n    return this.filtered.size;\n  }\n\n  _read() {\n    for (const quad of this)\n      this.push(quad);\n    this.push(null);\n  }\n\n  add(quad) {\n    return this.filtered.add(quad);\n  }\n\n  delete(quad) {\n    return this.filtered.delete(quad);\n  }\n\n  has(quad) {\n    return this.filtered.has(quad);\n  }\n\n  match(subject, predicate, object, graph) {\n    return new DatasetCoreAndReadableStream(this.filtered, subject, predicate, object, graph);\n  }\n\n  *[Symbol.iterator]() {\n    yield* this._filtered || this.n3Store.readQuads(this.subject, this.predicate, this.object, this.graph);\n  }\n}\n","// **N3StreamParser** parses a text stream into a quad stream.\nimport N3Parser from './N3Parser';\nimport { Transform } from 'readable-stream';\n\n// ## Constructor\nexport default class N3StreamParser extends Transform {\n  constructor(options) {\n    super({ decodeStrings: true });\n    this._readableState.objectMode = true;\n\n    // Set up parser with dummy stream to obtain `data` and `end` callbacks\n    const parser = new N3Parser(options);\n    let onData, onEnd;\n    parser.parse({\n      on: (event, callback) => {\n        switch (event) {\n        case 'data': onData = callback; break;\n        case 'end':   onEnd = callback; break;\n        }\n      },\n    },\n      // Handle quads by pushing them down the pipeline\n      (error, quad) => { error && this.emit('error', error) || quad && this.push(quad); },\n      // Emit prefixes through the `prefix` event\n      (prefix, uri) => { this.emit('prefix', prefix, uri); }\n    );\n\n    // Implement Transform methods through parser callbacks\n    this._transform = (chunk, encoding, done) => { onData(chunk); done(); };\n    this._flush = done => { onEnd(); done(); };\n  }\n\n  // ### Parses a stream of strings\n  import(stream) {\n    stream.on('data',  chunk => { this.write(chunk); });\n    stream.on('end',   ()      => { this.end(); });\n    stream.on('error', error => { this.emit('error', error); });\n    return this;\n  }\n}\n","// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer';\n\n// ## Constructor\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({ encoding: 'utf8', writableObjectMode: true });\n\n    // Set up writer with a dummy stream object\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\n      end: callback => { this.push(null); callback && callback(); },\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\n    this._flush = done => { writer.end(done); };\n  }\n\n// ### Serializes a stream of quads\n  import(stream) {\n    stream.on('data',   quad => { this.write(quad); });\n    stream.on('end',    () => { this.end(); });\n    stream.on('error',  error => { this.emit('error', error); });\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\n    return this;\n  }\n}\n","import Lexer from './N3Lexer';\nimport Parser from './N3Parser';\nimport Writer from './N3Writer';\nimport Store from './N3Store';\nimport StreamParser from './N3StreamParser';\nimport StreamWriter from './N3StreamWriter';\nimport * as Util from './N3Util';\n\nimport {\n  default as DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n} from './N3DataFactory';\n\n// Named exports\nexport {\n  Lexer,\n  Parser,\n  Writer,\n  Store,\n  StreamParser,\n  StreamWriter,\n  Util,\n\n  DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n};\n\n// Export all named exports as a default object for backward compatibility\nexport default {\n  Lexer,\n  Parser,\n  Writer,\n  Store,\n  StreamParser,\n  StreamWriter,\n  Util,\n\n  DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n};\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","const { finished, Readable } = require('readable-stream')\n\nfunction nextLoop () {\n  return new Promise(resolve => setTimeout(resolve, 0))\n}\n\nclass ReadableToReadable extends Readable {\n  constructor (input, { end = true, map, ...args } = {}) {\n    super({\n      read: ReadableToReadable.readFrom(input, { end, map }),\n      ...args\n    })\n  }\n\n  static readFrom (input, { end = true, map = v => v } = {}) {\n    let done = false\n\n    finished(input, () => {\n      done = true\n    })\n\n    const read = async function () {\n      while (true) {\n        const chunk = input.read()\n\n        if (!chunk) {\n          if (done && end) {\n            this.push(null)\n          }\n\n          if (done) {\n            return true\n          }\n\n          await nextLoop()\n        } else {\n          if (!this.push(map(chunk))) {\n            return false\n          }\n        }\n      }\n    }\n\n    return read\n  }\n}\n\nmodule.exports = ReadableToReadable\n"],"names":["ParserStream","Sink","Parser","constructor","options","super","module","exports","N3","rdf","finished","ReadableToReadable","input","baseIRI","factory","parser","StreamParser","objectMode","on","prefix","term","this","emit","err","destroy","end","pipe","Impl","import","output","Object","assign","readable","RDF","XSD","SWAP","xsd","decimal","boolean","double","integer","string","type","nil","first","rest","langString","owl","sameAs","r","forSome","forAll","log","implies","escapeSequence","escapeReplacements","illegalIriChars","lineModeRegExps","_iri","_unescapedIri","_simpleQuotedString","_langcode","_blank","_newline","_comment","_whitespace","_endOfFile","invalidRegExp","N3Lexer","_simpleApostropheString","_prefix","_prefixed","_variable","_number","_boolean","_keyword","_sparqlKeyword","_shortPredicates","_lineMode","lineMode","_n3Mode","key","RegExp","n3","_comments","comments","_literalClosingPos","_tokenizeToEnd","callback","inputFinished","_input","currentLineLength","length","whiteSpaceMatch","comment","exec","emitToken","_line","substr","test","line","firstChar","value","match","matchLength","inconclusive","_previousMarker","_unescape","reportSyntaxError","_parseLiteral","toUpperCase","token","previousToken","start","self","_syntaxError","item","invalid","replaced","replace","sequence","unicode4","unicode8","escapedChar","String","fromCharCode","Number","parseInt","charCode","opening","openingLength","closingPos","Math","max","indexOf","backslashCount","raw","substring","lines","split","issue","Error","context","undefined","_readStartingBom","startsWith","tokenize","tokens","error","e","t","push","_pendingBuffer","setEncoding","data","Buffer","concat","toString","isNamedNode","termType","isBlankNode","isLiteral","isVariable","isDefaultGraph","inDefaultGraph","quad","graph","iri","prefixes","defaultPrefixes","create","processPrefix","cache","local","namedNode","N3DataFactory","DEFAULTGRAPH","_blankNodeCounter","escapedLiteral","quadId","DataFactory","blankNode","variable","literal","defaultGraph","triple","Term","id","equals","other","hashCode","toJSON","NamedNode","Literal","lastIndexOf","language","atPos","toLowerCase","datatype","datatypeString","dtPos","char","BlankNode","name","Variable","DefaultGraph","termFromId","endPos","components","unescapeQuotes","termToId","escapeQuotes","subject","predicate","object","Quad","_subject","_predicate","_object","_graph","_","quoted","languageOrDataType","isFinite","isInteger","isNaN","blankNodePrefix","N3Parser","_contextStack","_setBase","initDataFactory","format","isTurtle","isTriG","isNTriples","isNQuads","isN3","isLineMode","_supportsNamedGraphs","_readPredicateOrNamedGraph","_readPredicate","_supportsQuads","_supportsRDFStar","_resolveRelativeIRI","_blankNodePrefix","_lexer","lexer","_explicitQuantifiers","explicitQuantifiers","static","fragmentPos","_base","_basePath","_baseRoot","_baseScheme","_saveContext","n3Mode","inverse","_inversePredicate","blankPrefix","_prefixes","quantified","_quantified","_restoreContext","pop","_error","_readInTopContext","_callback","_sparqlStyle","_readPrefix","_readBaseIRI","_readSubject","_readNamedGraphLabel","_readEntity","quantifier","_resolveIRI","_namedNode","_blankNode","_readBlankNodeHead","RDF_NIL","_readListItem","_readPunctuation","N3_FORSOME","_quantifier","_readQuantifierList","N3_FORALL","_literalValue","_completeSubjectLiteral","_literal","_getPathReader","ABBREVIATIONS","_readBlankNodeTail","_readObject","_readDataTypeOrLang","_getContextEndReader","_readGraph","_readBlankNodePunctuation","_emit","empty","_readPredicateAfterBlank","list","next","previousList","stack","parent","RDF_FIRST","_readListItemDataTypeOrLang","RDF_REST","_completeObjectLiteral","_completeLiteral","listItem","completed","_readCallback","_readFormulaTail","inversePredicate","_readQuadPunctuation","_readPrefixIRI","prefixNode","_prefixCallback","_readDeclarationPunctuation","_readNamedGraphBlankLabel","entity","QUANTIFIERS_GRAPH","_readQuantifierPunctuation","afterPath","_afterPath","_readPath","_readForwardPath","_readBackwardPath","_readRDFStarTailOrGraph","_readRDFStarTail","_quad","contextStack","message","noop","_removeDotSegments","result","i","pathStart","segmentStart","parse","quadCallback","prefixCallback","quads","every","prototype","escapeAll","escapedCharacters","SerializedTerm","N3Writer","outputStream","_prefixRegex","write","_lists","lists","_outputStream","_endStream","chunk","encoding","done","_writeQuad","_writeQuadLine","_prefixIRIs","addPrefixes","_baseMatcher","escapeRegex","endsWith","_baseLength","_inDefaultGraph","_write","_encodeIriOrBlank","_encodeObject","_encodePredicate","_encodeSubject","_prefixMatch","quadToString","quadsToString","map","join","_encodeQuad","characterReplacer","prefixMatch","_encodeLiteral","_blockedWrite","addQuad","addQuads","addPrefix","hasPrefixes","IRIlist","prefixList","prefixIRI","blank","child","children","contents","elements","Array","singleDone","character","charCodeAt","regex","N3Store","_size","_graphs","_id","_ids","_entities","_blankNodeIndex","_factory","size","graphs","subjects","graphKey","subjectKey","predicateKey","keys","_addToIndex","index0","key0","key1","key2","index1","index2","existed","_removeFromIndex","name0","name1","name2","graphId","tmp","entityKeys","parts","value0","value1","values","l","_loop","_loopByKey0","_loopByKey1","_loopBy2Keys","_countInIndex","count","_getGraphs","isString","_uniqueEntities","uniqueIds","add","graphItem","predicates","objects","freeze","ids","entities","changed","delete","removeQuad","has","subjectOrQuad","readQuads","stream","removeQuads","remove","removeMatches","Readable","_read","deleteGraph","getQuads","content","subjectId","predicateId","objectId","_findInIndex","DatasetCoreAndReadableStream","countQuads","forEach","some","getSubjects","results","forSubjects","s","getPredicates","forPredicates","p","getObjects","forObjects","o","getGraphs","forGraphs","g","createBlankNode","suggestedName","index","extractLists","ignoreErrors","onError","node","tails","toRemove","tailQuad","items","head","headPos","malformed","current","objectQuads","subjectQuads","unshift","Symbol","iterator","n3Store","filtered","_filtered","newStore","N3StreamParser","Transform","decodeStrings","_readableState","onData","onEnd","event","uri","_transform","_flush","N3StreamWriter","writableObjectMode","writer","_writer","Lexer","Writer","Store","StreamWriter","Util","Triple","promise","queueMicrotask","bind","window","cb","Promise","resolve","then","catch","setTimeout","nextLoop","args","read","readFrom","v","async"],"sourceRoot":""}