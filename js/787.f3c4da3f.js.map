{"version":3,"file":"js/787.f3c4da3f.js","mappings":"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","sources":["webpack://@zazuko/rdf-sketch/./node_modules/rdfxml-streaming-parser/index.js","webpack://@zazuko/rdf-sketch/./node_modules/rdfxml-streaming-parser/lib/ParseError.js","webpack://@zazuko/rdf-sketch/./node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","webpack://@zazuko/rdf-sketch/./node_modules/sax/lib/sax.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/RdfXmlParser\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseError = void 0;\n/**\n * An error that includes line and column in the error message.\n */\nclass ParseError extends Error {\n    constructor(parser, message) {\n        const saxParser = parser.saxStream._parser;\n        super(parser.trackPosition ? `Line ${saxParser.line + 1} column ${saxParser.column + 1}: ${message}` : message);\n    }\n}\nexports.ParseError = ParseError;\n//# sourceMappingURL=ParseError.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseType = exports.RdfXmlParser = void 0;\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst sax_1 = require(\"sax\");\nconst stream_1 = require(\"stream\");\nconst ParseError_1 = require(\"./ParseError\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nclass RdfXmlParser extends stream_1.Transform {\n    constructor(args) {\n        super({ readableObjectMode: true });\n        this.activeTagStack = [];\n        this.nodeIds = {};\n        if (args) {\n            Object.assign(this, args);\n            this.options = args;\n        }\n        if (!this.dataFactory) {\n            this.dataFactory = new rdf_data_factory_1.DataFactory();\n        }\n        if (!this.baseIRI) {\n            this.baseIRI = '';\n        }\n        if (!this.defaultGraph) {\n            this.defaultGraph = this.dataFactory.defaultGraph();\n        }\n        this.saxStream = sax_1.createStream(this.strict, { xmlns: false, position: this.trackPosition });\n        // Workaround for an issue in SAX where non-strict mode either lower- or upper-cases all tags.\n        if (!this.strict) {\n            this.saxStream._parser.looseCase = 'toString';\n        }\n        this.attachSaxListeners();\n    }\n    /**\n     * Parse the namespace of the given tag,\n     * and take into account the namespace of the parent tag that was already parsed.\n     * @param {Tag} tag A tag to parse the namespace from.\n     * @param {IActiveTag} parentTag The parent tag, or null if this tag is the root.\n     * @return {{[p: string]: string}[]} An array of namespaces,\n     *                                   where the last ones have a priority over the first ones.\n     */\n    static parseNamespace(tag, parentTag) {\n        const thisNs = {};\n        let hasNs = false;\n        for (const attributeKey in tag.attributes) {\n            if (attributeKey.startsWith('xmlns')) {\n                if (attributeKey.length === 5) {\n                    // Set default namespace\n                    hasNs = true;\n                    thisNs[''] = tag.attributes[attributeKey];\n                }\n                else if (attributeKey.charAt(5) === ':') {\n                    // Definition of a prefix\n                    hasNs = true;\n                    thisNs[attributeKey.substr(6)] = tag.attributes[attributeKey];\n                }\n            }\n        }\n        const parentNs = parentTag && parentTag.ns ? parentTag.ns : [RdfXmlParser.DEFAULT_NS];\n        return hasNs ? parentNs.concat([thisNs]) : parentNs;\n    }\n    /**\n     * Expand the given term value based on the given namespaces.\n     * @param {string} term A term value.\n     * @param {{[p: string]: string}[]} ns An array of namespaces,\n     *                                     where the last ones have a priority over the first ones.\n     * @param {RdfXmlParser} parser The RDF/XML parser instance.\n     * @return {IExpandedPrefix} An expanded prefix object.\n     */\n    static expandPrefixedTerm(term, ns, parser) {\n        const colonIndex = term.indexOf(':');\n        let prefix;\n        let local;\n        if (colonIndex >= 0) {\n            // Prefix is set\n            prefix = term.substr(0, colonIndex);\n            local = term.substr(colonIndex + 1);\n        }\n        else {\n            // Prefix is not set, fallback to default namespace\n            prefix = '';\n            local = term;\n        }\n        let uri = null;\n        let defaultNamespace = null;\n        for (let i = ns.length - 1; i >= 0; i--) {\n            const nsElement = ns[i][prefix];\n            if (nsElement) {\n                uri = nsElement;\n                break;\n            }\n            else if (!defaultNamespace) {\n                defaultNamespace = ns[i][''];\n            }\n        }\n        if (!uri) {\n            // Error on unbound prefix\n            if (prefix && prefix !== 'xmlns') {\n                throw new ParseError_1.ParseError(parser, `The prefix '${prefix}' in term '${term}' was not bound.`);\n            }\n            // Fallback to default namespace if no match was found\n            uri = defaultNamespace || '';\n        }\n        return { prefix, local, uri };\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return RdfXmlParser.IRI_REGEX.test(iri);\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        const output = new stream_1.PassThrough({ readableObjectMode: true });\n        stream.on('error', (error) => parsed.emit('error', error));\n        stream.on('data', (data) => output.push(data));\n        stream.on('end', () => output.push(null));\n        const parsed = output.pipe(new RdfXmlParser(this.options));\n        return parsed;\n    }\n    _transform(chunk, encoding, callback) {\n        try {\n            this.saxStream.write(chunk, encoding);\n        }\n        catch (e) {\n            return callback(e);\n        }\n        callback();\n    }\n    /**\n     * Create a new parse error instance.\n     * @param {string} message An error message.\n     * @return {Error} An error instance.\n     */\n    newParseError(message) {\n        return new ParseError_1.ParseError(this, message);\n    }\n    /**\n     * Convert the given value to a IRI by taking into account the baseIRI.\n     *\n     * This will follow the RDF/XML spec for converting values with baseIRIs to a IRI.\n     *\n     * @param {string} value The value to convert to an IRI.\n     * @param {IActiveTag} activeTag The active tag.\n     * @return {NamedNode} an IRI.\n     */\n    valueToUri(value, activeTag) {\n        return this.uriToNamedNode(relative_to_absolute_iri_1.resolve(value, activeTag.baseIRI));\n    }\n    /**\n     * Convert the given value URI string to a named node.\n     *\n     * This throw an error if the URI is invalid.\n     *\n     * @param {string} uri A URI string.\n     * @return {NamedNode} a named node.\n     */\n    uriToNamedNode(uri) {\n        // Validate URI\n        if (!RdfXmlParser.isValidIri(uri)) {\n            throw this.newParseError(`Invalid URI: ${uri}`);\n        }\n        return this.dataFactory.namedNode(uri);\n    }\n    /**\n     * Validate the given value as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n     * If it is invalid, an error will thrown emitted.\n     * @param {string} value A value.\n     */\n    validateNcname(value) {\n        // Validate term as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n        if (!RdfXmlParser.NCNAME_MATCHER.test(value)) {\n            throw this.newParseError(`Not a valid NCName: ${value}`);\n        }\n    }\n    attachSaxListeners() {\n        this.saxStream.on('error', (error) => this.emit('error', error));\n        this.saxStream.on('opentag', this.onTag.bind(this));\n        this.saxStream.on('text', this.onText.bind(this));\n        this.saxStream.on('closetag', this.onCloseTag.bind(this));\n        this.saxStream.on('doctype', this.onDoctype.bind(this));\n    }\n    /**\n     * Handle the given tag.\n     * @param {QualifiedTag} tag A SAX tag.\n     */\n    onTag(tag) {\n        // Get parent tag\n        const parentTag = this.activeTagStack.length\n            ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n        let currentParseType = ParseType.RESOURCE;\n        if (parentTag) {\n            parentTag.hadChildren = true;\n            currentParseType = parentTag.childrenParseType;\n        }\n        // Check if this tag needs to be converted to a string\n        if (parentTag && parentTag.childrenStringTags) {\n            // Convert this tag to a string\n            const tagName = tag.name;\n            let attributes = '';\n            for (const attributeKey in tag.attributes) {\n                attributes += ` ${attributeKey}=\"${tag.attributes[attributeKey]}\"`;\n            }\n            const tagContents = `${tagName}${attributes}`;\n            const tagString = `<${tagContents}>`;\n            parentTag.childrenStringTags.push(tagString);\n            // Inherit the array, so that deeper tags are appended to this same array\n            const stringActiveTag = { childrenStringTags: parentTag.childrenStringTags };\n            stringActiveTag.childrenStringEmitClosingTag = `</${tagName}>`;\n            this.activeTagStack.push(stringActiveTag);\n            // Halt any further processing\n            return;\n        }\n        const activeTag = {};\n        if (parentTag) {\n            // Inherit language scope and baseIRI from parent\n            activeTag.language = parentTag.language;\n            activeTag.baseIRI = parentTag.baseIRI;\n        }\n        else {\n            activeTag.baseIRI = this.baseIRI;\n        }\n        this.activeTagStack.push(activeTag);\n        activeTag.ns = RdfXmlParser.parseNamespace(tag, parentTag);\n        if (currentParseType === ParseType.RESOURCE) {\n            this.onTagResource(tag, activeTag, parentTag, !parentTag);\n        }\n        else { // currentParseType === ParseType.PROPERTY\n            this.onTagProperty(tag, activeTag, parentTag);\n        }\n    }\n    /**\n     * Handle the given node element in resource-mode.\n     * @param {QualifiedTag} tag A SAX tag.\n     * @param {IActiveTag} activeTag The currently active tag.\n     * @param {IActiveTag} parentTag The parent tag or null.\n     * @param {boolean} rootTag If we are currently processing the root tag.\n     */\n    onTagResource(tag, activeTag, parentTag, rootTag) {\n        const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n        activeTag.childrenParseType = ParseType.PROPERTY;\n        // Assume that the current node is a _typed_ node (2.13), unless we find an rdf:Description as node name\n        let typedNode = true;\n        if (tagExpanded.uri === RdfXmlParser.RDF) {\n            // Check forbidden property element names\n            if (!rootTag && RdfXmlParser.FORBIDDEN_NODE_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n                throw this.newParseError(`Illegal node element name: ${tagExpanded.local}`);\n            }\n            switch (tagExpanded.local) {\n                case 'RDF':\n                    // Tags under <rdf:RDF> must always be resources\n                    activeTag.childrenParseType = ParseType.RESOURCE;\n                case 'Description':\n                    typedNode = false;\n            }\n        }\n        const predicates = [];\n        const objects = [];\n        // Collect all attributes as triples\n        // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n        let activeSubjectValue = null;\n        let claimSubjectNodeId = false;\n        let subjectValueBlank = false;\n        let explicitType = null;\n        for (const attributeKey in tag.attributes) {\n            const attributeValue = tag.attributes[attributeKey];\n            const attributeKeyExpanded = RdfXmlParser.expandPrefixedTerm(attributeKey, activeTag.ns, this);\n            if (parentTag && attributeKeyExpanded.uri === RdfXmlParser.RDF) {\n                switch (attributeKeyExpanded.local) {\n                    case 'about':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        activeSubjectValue = attributeValue;\n                        continue;\n                    case 'ID':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        this.validateNcname(attributeValue);\n                        activeSubjectValue = '#' + attributeValue;\n                        claimSubjectNodeId = true;\n                        continue;\n                    case 'nodeID':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        this.validateNcname(attributeValue);\n                        activeSubjectValue = attributeValue;\n                        subjectValueBlank = true;\n                        continue;\n                    case 'bagID':\n                        throw this.newParseError(`rdf:bagID is not supported.`);\n                    case 'type':\n                        // Emit the rdf:type later as named node instead of the default literal\n                        explicitType = attributeValue;\n                        continue;\n                    case 'aboutEach':\n                        throw this.newParseError(`rdf:aboutEach is not supported.`);\n                    case 'aboutEachPrefix':\n                        throw this.newParseError(`rdf:aboutEachPrefix is not supported.`);\n                    case 'li':\n                        throw this.newParseError(`rdf:li on node elements are not supported.`);\n                }\n            }\n            else if (attributeKeyExpanded.uri === RdfXmlParser.XML) {\n                if (attributeKeyExpanded.local === 'lang') {\n                    activeTag.language = attributeValue === '' ? null : attributeValue.toLowerCase();\n                    continue;\n                }\n                else if (attributeKeyExpanded.local === 'base') {\n                    // SAX Parser does not expand xml:base, based on DOCTYPE, so we have to do it manually\n                    activeTag.baseIRI = relative_to_absolute_iri_1.resolve(attributeValue, activeTag.baseIRI);\n                    continue;\n                }\n            }\n            // Interpret attributes at this point as properties on this node,\n            // but we ignore attributes that have no prefix or known expanded URI\n            if (attributeKeyExpanded.prefix !== 'xml' && attributeKeyExpanded.uri) {\n                predicates.push(this.uriToNamedNode(attributeKeyExpanded.uri + attributeKeyExpanded.local));\n                objects.push(attributeValue);\n            }\n        }\n        // Create the subject value _after_ all attributes have been processed\n        if (activeSubjectValue !== null) {\n            activeTag.subject = subjectValueBlank\n                ? this.dataFactory.blankNode(activeSubjectValue) : this.valueToUri(activeSubjectValue, activeTag);\n            if (claimSubjectNodeId) {\n                this.claimNodeId(activeTag.subject);\n            }\n        }\n        // Force the creation of a subject if it doesn't exist yet\n        if (!activeTag.subject) {\n            activeTag.subject = this.dataFactory.blankNode();\n        }\n        // Emit the type if we're at a typed node\n        if (typedNode) {\n            const type = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n            this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), type, parentTag ? parentTag.reifiedStatementId : null);\n        }\n        if (parentTag) {\n            // If the parent tag defined a predicate, add the current tag as property value\n            if (parentTag.predicate) {\n                if (parentTag.childrenCollectionSubject) {\n                    // RDF:List-based properties\n                    const linkTerm = this.dataFactory.blankNode();\n                    // Emit <x> <p> <current-chain> OR <previous-chain> <rdf:rest> <current-chain>\n                    this.emitTriple(parentTag.childrenCollectionSubject, parentTag.childrenCollectionPredicate, linkTerm, parentTag.reifiedStatementId);\n                    // Emit <current-chain> <rdf:first> value\n                    this.emitTriple(linkTerm, this.dataFactory.namedNode(RdfXmlParser.RDF + 'first'), activeTag.subject, activeTag.reifiedStatementId);\n                    // Store <current-chain> in the parent node\n                    parentTag.childrenCollectionSubject = linkTerm;\n                    parentTag.childrenCollectionPredicate = this.dataFactory.namedNode(RdfXmlParser.RDF + 'rest');\n                }\n                else { // !parentTag.predicateEmitted\n                    // Set-based properties\n                    this.emitTriple(parentTag.subject, parentTag.predicate, activeTag.subject, parentTag.reifiedStatementId);\n                    // Emit pending properties on the parent tag that had no defined subject yet.\n                    for (let i = 0; i < parentTag.predicateSubPredicates.length; i++) {\n                        this.emitTriple(activeTag.subject, parentTag.predicateSubPredicates[i], parentTag.predicateSubObjects[i], null);\n                    }\n                    // Cleanup so we don't emit them again when the parent tag is closed\n                    parentTag.predicateSubPredicates = [];\n                    parentTag.predicateSubObjects = [];\n                    parentTag.predicateEmitted = true;\n                }\n            }\n            // Emit all collected triples\n            for (let i = 0; i < predicates.length; i++) {\n                const object = this.dataFactory.literal(objects[i], activeTag.datatype || activeTag.language);\n                this.emitTriple(activeTag.subject, predicates[i], object, parentTag.reifiedStatementId);\n            }\n            // Emit the rdf:type as named node instead of literal\n            if (explicitType) {\n                this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.uriToNamedNode(explicitType), null);\n            }\n        }\n    }\n    /**\n     * Handle the given property element in property-mode.\n     * @param {QualifiedTag} tag A SAX tag.\n     * @param {IActiveTag} activeTag The currently active tag.\n     * @param {IActiveTag} parentTag The parent tag or null.\n     */\n    onTagProperty(tag, activeTag, parentTag) {\n        const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n        activeTag.childrenParseType = ParseType.RESOURCE;\n        activeTag.subject = parentTag.subject; // Inherit parent subject\n        if (tagExpanded.uri === RdfXmlParser.RDF && tagExpanded.local === 'li') {\n            // Convert rdf:li to rdf:_x\n            if (!parentTag.listItemCounter) {\n                parentTag.listItemCounter = 1;\n            }\n            activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + '_' + parentTag.listItemCounter++);\n        }\n        else {\n            activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n        }\n        // Check forbidden property element names\n        if (tagExpanded.uri === RdfXmlParser.RDF\n            && RdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n            throw this.newParseError(`Illegal property element name: ${tagExpanded.local}`);\n        }\n        activeTag.predicateSubPredicates = [];\n        activeTag.predicateSubObjects = [];\n        let parseType = false;\n        let attributedProperty = false;\n        // Collect all attributes as triples\n        // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n        let activeSubSubjectValue = null;\n        let subSubjectValueBlank = true;\n        const predicates = [];\n        const objects = [];\n        for (const propertyAttributeKey in tag.attributes) {\n            const propertyAttributeValue = tag.attributes[propertyAttributeKey];\n            const propertyAttributeKeyExpanded = RdfXmlParser\n                .expandPrefixedTerm(propertyAttributeKey, activeTag.ns, this);\n            if (propertyAttributeKeyExpanded.uri === RdfXmlParser.RDF) {\n                switch (propertyAttributeKeyExpanded.local) {\n                    case 'resource':\n                        if (activeSubSubjectValue) {\n                            throw this.newParseError(`Found both rdf:resource (${propertyAttributeValue}) and rdf:nodeID (${activeSubSubjectValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:resource (${propertyAttributeValue})`);\n                        }\n                        activeTag.hadChildren = true;\n                        activeSubSubjectValue = propertyAttributeValue;\n                        subSubjectValueBlank = false;\n                        continue;\n                    case 'datatype':\n                        if (attributedProperty) {\n                            throw this.newParseError(`Found both non-rdf:* property attributes and rdf:datatype (${propertyAttributeValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${propertyAttributeValue})`);\n                        }\n                        activeTag.datatype = this.valueToUri(propertyAttributeValue, activeTag);\n                        continue;\n                    case 'nodeID':\n                        if (attributedProperty) {\n                            throw this.newParseError(`Found both non-rdf:* property attributes and rdf:nodeID (${propertyAttributeValue}).`);\n                        }\n                        if (activeTag.hadChildren) {\n                            throw this.newParseError(`Found both rdf:resource and rdf:nodeID (${propertyAttributeValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID (${propertyAttributeValue})`);\n                        }\n                        this.validateNcname(propertyAttributeValue);\n                        activeTag.hadChildren = true;\n                        activeSubSubjectValue = propertyAttributeValue;\n                        subSubjectValueBlank = true;\n                        continue;\n                    case 'bagID':\n                        throw this.newParseError(`rdf:bagID is not supported.`);\n                    case 'parseType':\n                        // Validation\n                        if (attributedProperty) {\n                            throw this.newParseError(`rdf:parseType is not allowed when non-rdf:* property attributes are present`);\n                        }\n                        if (activeTag.datatype) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${activeTag.datatype.value})`);\n                        }\n                        if (activeSubSubjectValue) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID or rdf:resource (${activeSubSubjectValue})`);\n                        }\n                        if (propertyAttributeValue === 'Resource') {\n                            parseType = true;\n                            activeTag.childrenParseType = ParseType.PROPERTY;\n                            // Turn this property element into a node element\n                            const nestedBNode = this.dataFactory.blankNode();\n                            this.emitTriple(activeTag.subject, activeTag.predicate, nestedBNode, activeTag.reifiedStatementId);\n                            activeTag.subject = nestedBNode;\n                            activeTag.predicate = null;\n                        }\n                        else if (propertyAttributeValue === 'Collection') {\n                            parseType = true;\n                            // Interpret children as being part of an rdf:List\n                            activeTag.hadChildren = true;\n                            activeTag.childrenCollectionSubject = activeTag.subject;\n                            activeTag.childrenCollectionPredicate = activeTag.predicate;\n                            subSubjectValueBlank = false;\n                        }\n                        else if (propertyAttributeValue === 'Literal') {\n                            parseType = true;\n                            // Interpret children as being part of a literal string\n                            activeTag.childrenTagsToString = true;\n                            activeTag.childrenStringTags = [];\n                        }\n                        continue;\n                    case 'ID':\n                        this.validateNcname(propertyAttributeValue);\n                        activeTag.reifiedStatementId = this.valueToUri('#' + propertyAttributeValue, activeTag);\n                        this.claimNodeId(activeTag.reifiedStatementId);\n                        continue;\n                }\n            }\n            else if (propertyAttributeKeyExpanded.uri === RdfXmlParser.XML\n                && propertyAttributeKeyExpanded.local === 'lang') {\n                activeTag.language = propertyAttributeValue === ''\n                    ? null : propertyAttributeValue.toLowerCase();\n                continue;\n            }\n            // Interpret attributes at this point as properties via implicit blank nodes on the property,\n            // but we ignore attributes that have no prefix or known expanded URI\n            if (propertyAttributeKeyExpanded.prefix !== 'xml' && propertyAttributeKeyExpanded.prefix !== 'xmlns'\n                && propertyAttributeKeyExpanded.uri) {\n                if (parseType || activeTag.datatype) {\n                    throw this.newParseError(`Found illegal rdf:* properties on property element with attribute: ${propertyAttributeValue}`);\n                }\n                activeTag.hadChildren = true;\n                attributedProperty = true;\n                predicates.push(this.uriToNamedNode(propertyAttributeKeyExpanded.uri + propertyAttributeKeyExpanded.local));\n                objects.push(this.dataFactory.literal(propertyAttributeValue, activeTag.datatype || activeTag.language));\n            }\n        }\n        // Create the subject value _after_ all attributes have been processed\n        if (activeSubSubjectValue !== null) {\n            const subjectParent = activeTag.subject;\n            activeTag.subject = subSubjectValueBlank\n                ? this.dataFactory.blankNode(activeSubSubjectValue) : this.valueToUri(activeSubSubjectValue, activeTag);\n            this.emitTriple(subjectParent, activeTag.predicate, activeTag.subject, activeTag.reifiedStatementId);\n            // Emit our buffered triples\n            for (let i = 0; i < predicates.length; i++) {\n                this.emitTriple(activeTag.subject, predicates[i], objects[i], null);\n            }\n            activeTag.predicateEmitted = true;\n        }\n        else if (subSubjectValueBlank) {\n            // The current property element has no defined subject\n            // Let's buffer the properties until the child node defines a subject,\n            // or if the tag closes.\n            activeTag.predicateSubPredicates = predicates;\n            activeTag.predicateSubObjects = objects;\n            activeTag.predicateEmitted = false;\n        }\n    }\n    /**\n     * Emit the given triple to the stream.\n     * @param {Term} subject A subject term.\n     * @param {Term} predicate A predicate term.\n     * @param {Term} object An object term.\n     * @param {Term} statementId An optional resource that identifies the triple.\n     *                           If truthy, then the given triple will also be emitted reified.\n     */\n    emitTriple(subject, predicate, object, statementId) {\n        this.push(this.dataFactory.quad(subject, predicate, object, this.defaultGraph));\n        // Reify triple\n        if (statementId) {\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.dataFactory.namedNode(RdfXmlParser.RDF + 'Statement'), this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'subject'), subject, this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'predicate'), predicate, this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'object'), object, this.defaultGraph));\n        }\n    }\n    /**\n     * Register the given term as a node ID.\n     * If one was already registered, this will emit an error.\n     *\n     * This is used to check duplicate occurrences of rdf:ID in scope of the baseIRI.\n     * @param {Term} term An RDF term.\n     */\n    claimNodeId(term) {\n        if (!this.allowDuplicateRdfIds) {\n            if (this.nodeIds[term.value]) {\n                throw this.newParseError(`Found multiple occurrences of rdf:ID='${term.value}'.`);\n            }\n            this.nodeIds[term.value] = true;\n        }\n    }\n    /**\n     * Handle the given text string.\n     * @param {string} text A parsed text string.\n     */\n    onText(text) {\n        const activeTag = this.activeTagStack.length\n            ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n        if (activeTag) {\n            if (activeTag.childrenStringTags) {\n                activeTag.childrenStringTags.push(text);\n            }\n            else if (activeTag.predicate) {\n                activeTag.text = text;\n            }\n        }\n    }\n    /**\n     * Handle the closing of the last tag.\n     */\n    onCloseTag() {\n        const poppedTag = this.activeTagStack.pop();\n        // If we were converting a tag to a string, and the tag was not self-closing, close it here.\n        if (poppedTag.childrenStringEmitClosingTag) {\n            poppedTag.childrenStringTags.push(poppedTag.childrenStringEmitClosingTag);\n        }\n        // Set the literal value if we were collecting XML tags to string\n        if (poppedTag.childrenTagsToString) {\n            poppedTag.datatype = this.dataFactory.namedNode(RdfXmlParser.RDF + 'XMLLiteral');\n            poppedTag.text = poppedTag.childrenStringTags.join('');\n            poppedTag.hadChildren = false; // Force a literal triple to be emitted hereafter\n        }\n        if (poppedTag.childrenCollectionSubject) {\n            // Terminate the rdf:List\n            this.emitTriple(poppedTag.childrenCollectionSubject, poppedTag.childrenCollectionPredicate, this.dataFactory.namedNode(RdfXmlParser.RDF + 'nil'), poppedTag.reifiedStatementId);\n        }\n        else if (poppedTag.predicate) {\n            if (!poppedTag.hadChildren && poppedTag.childrenParseType !== ParseType.PROPERTY) {\n                // Property element contains text\n                this.emitTriple(poppedTag.subject, poppedTag.predicate, this.dataFactory.literal(poppedTag.text || '', poppedTag.datatype || poppedTag.language), poppedTag.reifiedStatementId);\n            }\n            else if (!poppedTag.predicateEmitted) {\n                // Emit remaining properties on an anonymous property element\n                const subject = this.dataFactory.blankNode();\n                this.emitTriple(poppedTag.subject, poppedTag.predicate, subject, poppedTag.reifiedStatementId);\n                for (let i = 0; i < poppedTag.predicateSubPredicates.length; i++) {\n                    this.emitTriple(subject, poppedTag.predicateSubPredicates[i], poppedTag.predicateSubObjects[i], null);\n                }\n            }\n        }\n    }\n    /**\n     * Fetch local DOCTYPE ENTITY's and make the parser recognise them.\n     * @param {string} doctype The read doctype.\n     */\n    onDoctype(doctype) {\n        doctype.replace(/<!ENTITY\\s+([^\\s]+)\\s+[\"']([^\"']+)[\"']\\s*>/g, (match, prefix, uri) => {\n            this.saxStream._parser.ENTITIES[prefix] = uri;\n            return '';\n        });\n    }\n}\nexports.RdfXmlParser = RdfXmlParser;\n// Regex for valid IRIs\nRdfXmlParser.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*):[^ \"<>{}|\\\\\\[\\]`]*$/;\nRdfXmlParser.MIME_TYPE = 'application/rdf+xml';\nRdfXmlParser.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nRdfXmlParser.XML = 'http://www.w3.org/XML/1998/namespace';\nRdfXmlParser.XMLNS = 'http://www.w3.org/2000/xmlns/';\nRdfXmlParser.DEFAULT_NS = {\n    xml: RdfXmlParser.XML,\n};\nRdfXmlParser.FORBIDDEN_NODE_ELEMENTS = [\n    'RDF',\n    'ID',\n    'about',\n    'bagID',\n    'parseType',\n    'resource',\n    'nodeID',\n    'li',\n    'aboutEach',\n    'aboutEachPrefix',\n];\nRdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS = [\n    'Description',\n    'RDF',\n    'ID',\n    'about',\n    'bagID',\n    'parseType',\n    'resource',\n    'nodeID',\n    'aboutEach',\n    'aboutEachPrefix',\n];\n// tslint:disable-next-line:max-line-length\nRdfXmlParser.NCNAME_MATCHER = /^([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_])([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_\\-.0-9#xB7\\u{0300}-\\u{036F}\\u{203F}-\\u{2040}])*$/u;\nvar ParseType;\n(function (ParseType) {\n    ParseType[ParseType[\"RESOURCE\"] = 0] = \"RESOURCE\";\n    ParseType[ParseType[\"PROPERTY\"] = 1] = \"PROPERTY\";\n})(ParseType = exports.ParseType || (exports.ParseType = {}));\n//# sourceMappingURL=RdfXmlParser.js.map",";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c\n          if (c === ']') {\n            parser.state = S.DOCTYPE\n          } else if (isQuote(c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            strictFail(parser, 'Unquoted attribute value')\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            parser[buffer] += parseEntity(parser)\n            parser.entity = ''\n            parser.state = returnState\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  /* istanbul ignore next */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n"],"names":["__createBinding","this","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__exportStar","exports","p","prototype","hasOwnProperty","call","value","ParseError","Error","constructor","parser","message","saxParser","saxStream","_parser","super","trackPosition","line","column","ParseType","RdfXmlParser","relative_to_absolute_iri_1","sax_1","stream_1","ParseError_1","rdf_data_factory_1","Transform","args","readableObjectMode","activeTagStack","nodeIds","assign","options","dataFactory","DataFactory","baseIRI","defaultGraph","createStream","strict","xmlns","position","looseCase","attachSaxListeners","static","tag","parentTag","thisNs","hasNs","attributeKey","attributes","startsWith","length","charAt","substr","parentNs","ns","DEFAULT_NS","concat","term","colonIndex","indexOf","prefix","local","uri","defaultNamespace","i","nsElement","iri","IRI_REGEX","test","import","stream","output","PassThrough","on","error","parsed","emit","data","push","pipe","_transform","chunk","encoding","callback","write","e","newParseError","valueToUri","activeTag","uriToNamedNode","resolve","isValidIri","namedNode","validateNcname","NCNAME_MATCHER","onTag","bind","onText","onCloseTag","onDoctype","currentParseType","RESOURCE","hadChildren","childrenParseType","childrenStringTags","tagName","name","tagContents","tagString","stringActiveTag","childrenStringEmitClosingTag","language","parseNamespace","onTagResource","onTagProperty","rootTag","tagExpanded","expandPrefixedTerm","PROPERTY","typedNode","RDF","FORBIDDEN_NODE_ELEMENTS","predicates","objects","activeSubjectValue","claimSubjectNodeId","subjectValueBlank","explicitType","attributeValue","attributeKeyExpanded","XML","toLowerCase","subject","blankNode","claimNodeId","type","emitTriple","reifiedStatementId","predicate","childrenCollectionSubject","linkTerm","childrenCollectionPredicate","predicateSubPredicates","predicateSubObjects","predicateEmitted","object","literal","datatype","listItemCounter","FORBIDDEN_PROPERTY_ELEMENTS","parseType","attributedProperty","activeSubSubjectValue","subSubjectValueBlank","propertyAttributeKey","propertyAttributeValue","propertyAttributeKeyExpanded","nestedBNode","childrenTagsToString","subjectParent","statementId","quad","allowDuplicateRdfIds","text","poppedTag","pop","join","doctype","replace","match","ENTITIES","MIME_TYPE","XMLNS","xml","sax","opt","SAXParser","SAXStream","MAX_BUFFER_LENGTH","Stream","buffers","clearBuffers","q","c","bufferCheckPosition","lowercase","lowercasetags","tags","closed","closedRoot","sawRoot","noscript","state","S","BEGIN","strictEntities","XML_ENTITIES","attribList","rootNS","checkBufferLength","maxAllowed","Math","max","maxActual","l","len","closeText","emitNode","cdata","script","flushBuffers","EVENTS","F","newf","keys","a","end","resume","close","flush","ex","streamWraps","filter","ev","apply","writable","readable","me","onend","onerror","er","_decoder","forEach","set","h","removeAllListeners","configurable","Buffer","isBuffer","SD","toString","handler","arguments","Array","splice","CDATA","DOCTYPE","XML_NAMESPACE","XMLNS_NAMESPACE","nameStart","nameBody","entityStart","entityBody","isWhitespace","isQuote","isAttribEnd","isMatch","regex","notMatch","s","STATE","BEGIN_WHITESPACE","TEXT","TEXT_ENTITY","OPEN_WAKA","SGML_DECL","SGML_DECL_QUOTED","DOCTYPE_QUOTED","DOCTYPE_DTD","DOCTYPE_DTD_QUOTED","COMMENT_STARTING","COMMENT","COMMENT_ENDING","COMMENT_ENDED","CDATA_ENDING","CDATA_ENDING_2","PROC_INST","PROC_INST_BODY","PROC_INST_ENDING","OPEN_TAG","OPEN_TAG_SLASH","ATTRIB","ATTRIB_NAME","ATTRIB_NAME_SAW_WHITE","ATTRIB_VALUE","ATTRIB_VALUE_QUOTED","ATTRIB_VALUE_CLOSED","ATTRIB_VALUE_UNQUOTED","ATTRIB_VALUE_ENTITY_Q","ATTRIB_VALUE_ENTITY_U","CLOSE_TAG","CLOSE_TAG_SAW_WHITE","SCRIPT","SCRIPT_ENDING","key","String","fromCharCode","event","nodeType","textNode","textopts","trim","normalize","strictFail","newTag","parent","qname","attribute","qualName","split","attrib","attribName","attribValue","qn","openTag","selfClosing","JSON","stringify","nv","isSelfClosing","closeTag","t","closeTo","x","n","parseEntity","num","entity","entityLC","numStr","slice","parseInt","isNaN","fromCodePoint","beginWhiteSpace","startTagPosition","result","starti","substring","sgmlDecl","procInstName","procInstBody","pad","toUpperCase","comment","body","returnState","buffer","stringFromCharCode","floor","highSurrogate","lowSurrogate","MAX_SIZE","codeUnits","index","codePoint","Number","isFinite","RangeError"],"sourceRoot":""}