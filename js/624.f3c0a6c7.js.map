{"version":3,"file":"js/624.f3c0a6c7.js","mappings":"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","sources":["webpack://@zazuko/rdf-sketch/./node_modules/@rdfjs/parser-jsonld/index.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdfjs/parser-jsonld/lib/ParserStream.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdfjs/sink/index.js","webpack://@zazuko/rdf-sketch/./node_modules/canonicalize/lib/canonicalize.js","webpack://@zazuko/rdf-sketch/./node_modules/cross-fetch/dist/browser-polyfill.js","webpack://@zazuko/rdf-sketch/./node_modules/http-link-header/lib/link.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/index.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/lib/ContextParser.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/lib/ErrorCoded.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/lib/IDocumentLoader.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/lib/JsonLdContext.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/lib/Util.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/index.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/ContextTree.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/JsonLdParser.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/ParsingContext.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/Util.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIdentifier.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIndex.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerLanguage.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerType.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerArrayValue.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerContainer.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerInvalidFallback.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerPredicate.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeyword.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordContext.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordGraph.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordId.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordIncluded.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordNest.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordType.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordUnknownFallback.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordValue.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonparse/jsonparse.js"],"sourcesContent":["const Sink = require('@rdfjs/sink')\nconst ParserStream = require('./lib/ParserStream')\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nmodule.exports = Parser\n","const rdf = require('@rdfjs/data-model')\nconst { JsonLdParser } = require('jsonld-streaming-parser')\nconst { Transform } = require('readable-stream')\n\nconst relativeIriProtocol = 'null:'\n\nfunction termCleanup (factory) {\n  return term => {\n    if (term.termType !== 'NamedNode') {\n      return null\n    }\n\n    if (!term.value.startsWith(relativeIriProtocol)) {\n      return null\n    }\n\n    // remove dummy protocol workaround for relative IRIs\n    return factory.namedNode(term.value.slice(relativeIriProtocol.length))\n  }\n}\n\nfunction quadCleanup (factory) {\n  const cleanup = termCleanup(factory)\n\n  return quad => {\n    const subject = cleanup(quad.subject)\n    const predicate = cleanup(quad.predicate)\n    const object = cleanup(quad.object)\n    const graph = cleanup(quad.graph)\n\n    if (subject || predicate || object || graph) {\n      return factory.quad(\n        subject || quad.subject,\n        predicate || quad.predicate,\n        object || quad.object,\n        graph || quad.graph\n      )\n    }\n\n    return quad\n  }\n}\n\nclass ParserStream {\n  constructor (input, { baseIRI = relativeIriProtocol, context = null, factory = rdf } = {}) {\n    const parser = new JsonLdParser({\n      baseIRI,\n      context,\n      dataFactory: factory,\n      streamingProfile: false\n    })\n\n    input.pipe(parser)\n\n    const cleanup = quadCleanup(factory)\n\n    const transform = new Transform({\n      objectMode: true,\n      transform: (quad, encoding, callback) => {\n        callback(null, cleanup(quad))\n      }\n    })\n\n    parser.on('context', context => {\n      Object.entries(context).forEach(([prefix, iri]) => {\n        transform.emit('prefix', prefix, factory.namedNode(iri))\n      })\n    })\n    parser.on('error', err => transform.destroy(err))\n    parser.pipe(transform)\n\n    return transform\n  }\n}\n\nmodule.exports = ParserStream\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, Object.assign({}, this.options, options))\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', (err) => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nmodule.exports = Sink\n","/* jshint esversion: 6 */\n/* jslint node: true */\n'use strict';\n\nmodule.exports = function serialize (object) {\n  if (object === null || typeof object !== 'object' || object.toJSON != null) {\n    return JSON.stringify(object);\n  }\n\n  if (Array.isArray(object)) {\n    return '[' + object.reduce((t, cv, ci) => {\n      const comma = ci === 0 ? '' : ',';\n      const value = cv === undefined || typeof cv === 'symbol' ? null : cv;\n      return t + comma + serialize(value);\n    }, '') + ']';\n  }\n\n  return '{' + Object.keys(object).sort().reduce((t, cv, ci) => {\n    if (object[cv] === undefined ||\n        typeof object[cv] === 'symbol') {\n      return t;\n    }\n    const comma = t.length === 0 ? '' : ',';\n    return t + comma + serialize(cv) + ':' + serialize(object[cv]);\n  }, '') + '}';\n};\n","(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(typeof self !== 'undefined' ? self : this);\n","'use strict'\n\nvar COMPATIBLE_ENCODING_PATTERN = /^utf-?8|ascii|utf-?16-?le|ucs-?2|base-?64|latin-?1$/i\nvar WS_TRIM_PATTERN = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g\nvar WS_CHAR_PATTERN = /\\s|\\uFEFF|\\xA0/\nvar WS_FOLD_PATTERN = /\\r?\\n[\\x20\\x09]+/g\nvar DELIMITER_PATTERN = /[;,\"]/\nvar WS_DELIMITER_PATTERN = /[;,\"]|\\s/\n\n/**\n * Token character pattern\n * @type {RegExp}\n * @see https://tools.ietf.org/html/rfc7230#section-3.2.6\n */\nvar TOKEN_PATTERN = /^[!#$%&'*+\\-\\.^_`|~\\da-zA-Z]+$/\n\nvar STATE = {\n  IDLE: 1 << 0,\n  URI: 1 << 1,\n  ATTR: 1 << 2,\n}\n\nfunction trim( value ) {\n  return value.replace( WS_TRIM_PATTERN, '' )\n}\n\nfunction hasWhitespace( value ) {\n  return WS_CHAR_PATTERN.test( value )\n}\n\nfunction skipWhitespace( value, offset ) {\n  while( hasWhitespace( value[offset] ) ) {\n    offset++\n  }\n  return offset\n}\n\nfunction needsQuotes( value ) {\n  return WS_DELIMITER_PATTERN.test( value ) ||\n    !TOKEN_PATTERN.test( value )\n}\n\n/**\n * Shallow compares two objects to check if their properties match.\n * @param {object} object1 First object to compare.\n * @param {object} object2 Second object to compare.\n * @returns {boolean} Do the objects have matching properties.\n */\nfunction shallowCompareObjects( object1, object2 ) {\n  return (\n    Object.keys( object1 ).length === Object.keys( object2 ).length &&\n    Object.keys( object1 ).every(\n      ( key ) => key in object2 && object1[ key ] === object2[ key ]\n    )\n  );\n}\n\nclass Link {\n\n  /**\n   * Link\n   * @constructor\n   * @param {String} [value]\n   * @returns {Link}\n   */\n  constructor( value ) {\n\n    /** @type {Array} URI references */\n    this.refs = []\n\n    if( value ) {\n      this.parse( value )\n    }\n\n  }\n\n  /**\n   * Get refs with given relation type\n   * @param {String} value\n   * @returns {Array<Object>}\n   */\n  rel( value ) {\n\n    var links = []\n    var type = value.toLowerCase()\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ].rel.toLowerCase() === type ) {\n        links.push( this.refs[ i ] )\n      }\n    }\n\n    return links\n\n  }\n\n  /**\n   * Get refs where given attribute has a given value\n   * @param {String} attr\n   * @param {String} value\n   * @returns {Array<Object>}\n   */\n  get( attr, value ) {\n\n    attr = attr.toLowerCase()\n\n    var links = []\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ][ attr ] === value ) {\n        links.push( this.refs[ i ] )\n      }\n    }\n\n    return links\n\n  }\n\n  /** Sets a reference. */\n  set( link ) {\n    this.refs.push( link )\n    return this\n  }\n\n  /**\n   * Sets a reference if a reference with similar properties isn’t already set.\n   */\n  setUnique( link ) {\n\n    if( !this.refs.some(( ref ) => shallowCompareObjects( ref, link )) ) {\n      this.refs.push( link )\n    }\n\n    return this\n\n  }\n\n  has( attr, value ) {\n\n    attr = attr.toLowerCase()\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ][ attr ] === value ) {\n        return true\n      }\n    }\n\n    return false\n\n  }\n\n  parse( value, offset ) {\n\n    offset = offset || 0\n    value = offset ? value.slice( offset ) : value\n\n    // Trim & unfold folded lines\n    value = trim( value ).replace( WS_FOLD_PATTERN, '' )\n\n    var state = STATE.IDLE\n    var length = value.length\n    var offset = 0\n    var ref = null\n\n    while( offset < length ) {\n      if( state === STATE.IDLE ) {\n        if( hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        } else if( value[offset] === '<' ) {\n          if( ref != null ) {\n            ref.rel != null ?\n              this.refs.push( ...Link.expandRelations( ref ) ) :\n              this.refs.push( ref )\n          }\n          var end = value.indexOf( '>', offset )\n          if( end === -1 ) throw new Error( 'Expected end of URI delimiter at offset ' + offset )\n          ref = { uri: value.slice( offset + 1, end ) }\n          // this.refs.push( ref )\n          offset = end\n          state = STATE.URI\n        } else {\n          throw new Error( 'Unexpected character \"' + value[offset] + '\" at offset ' + offset )\n        }\n        offset++\n      } else if( state === STATE.URI ) {\n        if( hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        } else if( value[offset] === ';' ) {\n          state = STATE.ATTR\n          offset++\n        } else if( value[offset] === ',' ) {\n          state = STATE.IDLE\n          offset++\n        } else {\n          throw new Error( 'Unexpected character \"' + value[offset] + '\" at offset ' + offset )\n        }\n      } else if( state === STATE.ATTR ) {\n        if( value[offset] ===';' || hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        }\n        var end = value.indexOf( '=', offset )\n        if( end === -1 ) throw new Error( 'Expected attribute delimiter at offset ' + offset )\n        var attr = trim( value.slice( offset, end ) ).toLowerCase()\n        var attrValue = ''\n        offset = end + 1\n        offset = skipWhitespace( value, offset )\n        if( value[offset] === '\"' ) {\n          offset++\n          while( offset < length ) {\n            if( value[offset] === '\"' ) {\n              offset++; break\n            }\n            if( value[offset] === '\\\\' ) {\n              offset++\n            }\n            attrValue += value[offset]\n            offset++\n          }\n        } else {\n          var end = offset + 1\n          while( !DELIMITER_PATTERN.test( value[end] ) && end < length ) {\n            end++\n          }\n          attrValue = value.slice( offset, end )\n          offset = end\n        }\n        if( ref[ attr ] && Link.isSingleOccurenceAttr( attr ) ) {\n          // Ignore multiples of attributes which may only appear once\n        } else if( attr[ attr.length - 1 ] === '*' ) {\n          ref[ attr ] = Link.parseExtendedValue( attrValue )\n        } else {\n          attrValue = attr === 'type' ?\n            attrValue.toLowerCase() : attrValue\n          if( ref[ attr ] != null ) {\n            if( Array.isArray( ref[ attr ] ) ) {\n              ref[ attr ].push( attrValue )\n            } else {\n              ref[ attr ] = [ ref[ attr ], attrValue ]\n            }\n          } else {\n            ref[ attr ] = attrValue\n          }\n        }\n        switch( value[offset] ) {\n          case ',': state = STATE.IDLE; break\n          case ';': state = STATE.ATTR; break\n        }\n        offset++\n      } else {\n        throw new Error( 'Unknown parser state \"' + state + '\"' )\n      }\n    }\n\n    if( ref != null ) {\n      ref.rel != null ?\n        this.refs.push( ...Link.expandRelations( ref ) ) :\n        this.refs.push( ref )\n    }\n\n    ref = null\n\n    return this\n\n  }\n\n  toString() {\n\n    var refs = []\n    var link = ''\n    var ref = null\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      ref = this.refs[i]\n      link = Object.keys( this.refs[i] ).reduce( function( link, attr ) {\n        if( attr === 'uri' ) return link\n        return link + '; ' + Link.formatAttribute( attr, ref[ attr ] )\n      }, '<' + ref.uri + '>' )\n      refs.push( link )\n    }\n\n    return refs.join( ', ' )\n\n  }\n\n}\n\n/**\n * Determines whether an encoding can be\n * natively handled with a `Buffer`\n * @param {String} value\n * @returns {Boolean}\n */\nLink.isCompatibleEncoding = function( value ) {\n  return COMPATIBLE_ENCODING_PATTERN.test( value )\n}\n\nLink.parse = function( value, offset ) {\n  return new Link().parse( value, offset )\n}\n\nLink.isSingleOccurenceAttr = function( attr ) {\n  return attr === 'rel' || attr === 'type' || attr === 'media' ||\n    attr === 'title' || attr === 'title*'\n}\n\nLink.isTokenAttr = function( attr ) {\n  return attr === 'rel' || attr === 'type' || attr === 'anchor'\n}\n\nLink.escapeQuotes = function( value ) {\n  return value.replace( /\"/g, '\\\\\"' )\n}\n\nLink.expandRelations = function( ref ) {\n  var rels = ref.rel.split( ' ' )\n  return rels.map( function( rel ) {\n    var value = Object.assign( {}, ref )\n    value.rel = rel\n    return value\n  })\n}\n\n/**\n * Parses an extended value and attempts to decode it\n * @internal\n * @param {String} value\n * @return {Object}\n */\nLink.parseExtendedValue = function( value ) {\n  var parts = /([^']+)?(?:'([^']*)')?(.+)/.exec( value )\n  return {\n    language: parts[2].toLowerCase(),\n    encoding: Link.isCompatibleEncoding( parts[1] ) ?\n      null : parts[1].toLowerCase(),\n    value: Link.isCompatibleEncoding( parts[1] ) ?\n      decodeURIComponent( parts[3] ) : parts[3]\n  }\n}\n\n/**\n * Format a given extended attribute and it's value\n * @param {String} attr\n * @param {Object} data\n * @return {String}\n */\nLink.formatExtendedAttribute = function( attr, data ) {\n\n  var encoding = ( data.encoding || 'utf-8' ).toUpperCase()\n  var language = data.language || 'en'\n\n  var encodedValue = ''\n\n  if( Buffer.isBuffer( data.value ) && Link.isCompatibleEncoding( encoding ) ) {\n    encodedValue = data.value.toString( encoding )\n  } else if( Buffer.isBuffer( data.value ) ) {\n    encodedValue = data.value.toString( 'hex' )\n      .replace( /[0-9a-f]{2}/gi, '%$1' )\n  } else {\n    encodedValue = encodeURIComponent( data.value )\n  }\n\n  return attr + '=' + encoding + '\\'' +\n    language + '\\'' + encodedValue\n\n}\n\n/**\n * Format a given attribute and it's value\n * @param {String} attr\n * @param {String|Object} value\n * @return {String}\n */\nLink.formatAttribute = function( attr, value ) {\n\n  if( Array.isArray( value ) ) {\n    return value.map(( item ) => {\n      return Link.formatAttribute( attr, item )\n    }).join( '; ' )\n  }\n\n  if( attr[ attr.length - 1 ] === '*' || typeof value !== 'string' ) {\n    return Link.formatExtendedAttribute( attr, value )\n  }\n\n  if( Link.isTokenAttr( attr ) ) {\n    value = needsQuotes( value ) ?\n      '\"' + Link.escapeQuotes( value ) + '\"' :\n      Link.escapeQuotes( value )\n  } else if( needsQuotes( value ) ) {\n    value = encodeURIComponent( value )\n    // We don't need to escape <SP> <,> <;> within quotes\n    value = value\n      .replace( /%20/g, ' ' )\n      .replace( /%2C/g, ',' )\n      .replace( /%3B/g, ';' )\n\n    value = '\"' + value + '\"'\n  }\n\n  return attr + '=' + value\n\n}\n\nmodule.exports = Link\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/ContextParser\"), exports);\n__exportStar(require(\"./lib/ErrorCoded\"), exports);\n__exportStar(require(\"./lib/FetchDocumentLoader\"), exports);\n__exportStar(require(\"./lib/IDocumentLoader\"), exports);\n__exportStar(require(\"./lib/JsonLdContext\"), exports);\n__exportStar(require(\"./lib/JsonLdContextNormalized\"), exports);\n__exportStar(require(\"./lib/Util\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultExpandOptions = exports.ContextParser = void 0;\nrequire(\"cross-fetch/polyfill\");\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst FetchDocumentLoader_1 = require(\"./FetchDocumentLoader\");\nconst JsonLdContextNormalized_1 = require(\"./JsonLdContextNormalized\");\nconst Util_1 = require(\"./Util\");\n// tslint:disable-next-line:no-var-requires\nconst canonicalizeJson = require('canonicalize');\n/**\n * Parses JSON-LD contexts.\n */\nclass ContextParser {\n    constructor(options) {\n        options = options || {};\n        this.documentLoader = options.documentLoader || new FetchDocumentLoader_1.FetchDocumentLoader();\n        this.documentCache = {};\n        this.validateContext = !options.skipValidation;\n        this.expandContentTypeToBase = !!options.expandContentTypeToBase;\n        this.remoteContextsDepthLimit = options.remoteContextsDepthLimit || 32;\n        this.redirectSchemaOrgHttps = 'redirectSchemaOrgHttps' in options ? !!options.redirectSchemaOrgHttps : true;\n    }\n    /**\n     * Validate the given @language value.\n     * An error will be thrown if it is invalid.\n     * @param value An @language value.\n     * @param {boolean} strictRange If the string value should be strictly checked against a regex.\n     * @param {string} errorCode The error code to emit on errors.\n     * @return {boolean} If validation passed.\n     *                   Can only be false if strictRange is false and the string value did not pass the regex.\n     */\n    static validateLanguage(value, strictRange, errorCode) {\n        if (typeof value !== 'string') {\n            throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a string, got '${JSON.stringify(value)}'`, errorCode);\n        }\n        if (!Util_1.Util.REGEX_LANGUAGE_TAG.test(value)) {\n            if (strictRange) {\n                throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a valid language tag, got '${JSON.stringify(value)}'`, errorCode);\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Validate the given @direction value.\n     * An error will be thrown if it is invalid.\n     * @param value An @direction value.\n     * @param {boolean} strictValues If the string value should be strictly checked against a regex.\n     * @return {boolean} If validation passed.\n     *                   Can only be false if strictRange is false and the string value did not pass the regex.\n     */\n    static validateDirection(value, strictValues) {\n        if (typeof value !== 'string') {\n            throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be a string, got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);\n        }\n        if (!Util_1.Util.REGEX_DIRECTION_TAG.test(value)) {\n            if (strictValues) {\n                throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be 'ltr' or 'rtl', got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Add an @id term for all @reverse terms.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @return {IJsonLdContextNormalizedRaw} The mutated input context.\n     */\n    idifyReverseTerms(context) {\n        for (const key of Object.keys(context)) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if (value['@reverse'] && !value['@id']) {\n                    if (typeof value['@reverse'] !== 'string' || Util_1.Util.isValidKeyword(value['@reverse'])) {\n                        throw new ErrorCoded_1.ErrorCoded(`Invalid @reverse value, must be absolute IRI or blank node: '${value['@reverse']}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                    }\n                    value['@id'] = value['@reverse'];\n                    if (Util_1.Util.isPotentialKeyword(value['@reverse'])) {\n                        delete value['@reverse'];\n                    }\n                    else {\n                        value['@reverse'] = true;\n                    }\n                }\n            }\n        }\n        return context;\n    }\n    /**\n     * Expand all prefixed terms in the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {boolean} expandContentTypeToBase If @type inside the context may be expanded\n     *                                          via @base if @vocab is set to null.\n     */\n    expandPrefixedTerms(context, expandContentTypeToBase) {\n        const contextRaw = context.getContextRaw();\n        for (const key of Object.keys(contextRaw)) {\n            // Only expand allowed keys\n            if (Util_1.Util.EXPAND_KEYS_BLACKLIST.indexOf(key) < 0 && !Util_1.Util.isReservedInternalKeyword(key)) {\n                // Error if we try to alias a keyword to something else.\n                const keyValue = contextRaw[key];\n                if (Util_1.Util.isPotentialKeyword(key) && Util_1.Util.ALIAS_DOMAIN_BLACKLIST.indexOf(key) >= 0) {\n                    if (key !== '@type' || typeof contextRaw[key] === 'object'\n                        && !(contextRaw[key]['@protected'] || contextRaw[key]['@container'] === '@set')) {\n                        throw new ErrorCoded_1.ErrorCoded(`Keywords can not be aliased to something else.\nTried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);\n                    }\n                }\n                // Error if we try to alias to an illegal keyword\n                if (Util_1.Util.ALIAS_RANGE_BLACKLIST.indexOf(Util_1.Util.getContextValueId(keyValue)) >= 0) {\n                    throw new ErrorCoded_1.ErrorCoded(`Aliasing to certain keywords is not allowed.\nTried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.INVALID_KEYWORD_ALIAS);\n                }\n                // Error if this term was marked as prefix as well\n                if (keyValue && Util_1.Util.isPotentialKeyword(Util_1.Util.getContextValueId(keyValue))\n                    && keyValue['@prefix'] === true) {\n                    throw new ErrorCoded_1.ErrorCoded(`Tried to use keyword aliases as prefix: '${key}': '${JSON.stringify(keyValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                // Loop because prefixes might be nested\n                while (Util_1.Util.isPrefixValue(contextRaw[key])) {\n                    const value = contextRaw[key];\n                    let changed = false;\n                    if (typeof value === 'string') {\n                        contextRaw[key] = context.expandTerm(value, true);\n                        changed = changed || value !== contextRaw[key];\n                    }\n                    else {\n                        const id = value['@id'];\n                        const type = value['@type'];\n                        // If @id is missing, don't allow @id to be added if @prefix: true and key not being a valid IRI.\n                        const canAddIdEntry = !('@prefix' in value) || Util_1.Util.isValidIri(key);\n                        if ('@id' in value) {\n                            // Use @id value for expansion\n                            if (id !== undefined && id !== null && typeof id === 'string') {\n                                contextRaw[key]['@id'] = context.expandTerm(id, true);\n                                changed = changed || id !== contextRaw[key]['@id'];\n                            }\n                        }\n                        else if (!Util_1.Util.isPotentialKeyword(key) && canAddIdEntry) {\n                            // Add an explicit @id value based on the expanded key value\n                            const newId = context.expandTerm(key, true);\n                            if (newId !== key) {\n                                // Don't set @id if expansion failed\n                                contextRaw[key]['@id'] = newId;\n                                changed = true;\n                            }\n                        }\n                        if (type && typeof type === 'string' && type !== '@vocab'\n                            && (!value['@container'] || !value['@container']['@type'])\n                            && canAddIdEntry) {\n                            // First check @vocab, then fallback to @base\n                            contextRaw[key]['@type'] = context.expandTerm(type, true);\n                            if (expandContentTypeToBase && type === contextRaw[key]['@type']) {\n                                contextRaw[key]['@type'] = context.expandTerm(type, false);\n                            }\n                            changed = changed || type !== contextRaw[key]['@type'];\n                        }\n                    }\n                    if (!changed) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Normalize the @language entries in the given context to lowercase.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} parseOptions The parsing options.\n     */\n    normalize(context, { processingMode, normalizeLanguageTags }) {\n        // Lowercase language keys in 1.0\n        if (normalizeLanguageTags || processingMode === 1.0) {\n            for (const key of Object.keys(context)) {\n                if (key === '@language' && typeof context[key] === 'string') {\n                    context[key] = context[key].toLowerCase();\n                }\n                else {\n                    const value = context[key];\n                    if (value && typeof value === 'object') {\n                        if (typeof value['@language'] === 'string') {\n                            value['@language'] = value['@language'].toLowerCase();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Convert all @container strings and array values to hash-based values.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     */\n    containersToHash(context) {\n        for (const key of Object.keys(context)) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if (typeof value['@container'] === 'string') {\n                    value['@container'] = { [value['@container']]: true };\n                }\n                else if (Array.isArray(value['@container'])) {\n                    const newValue = {};\n                    for (const containerValue of value['@container']) {\n                        newValue[containerValue] = true;\n                    }\n                    value['@container'] = newValue;\n                }\n            }\n        }\n    }\n    /**\n     * Normalize and apply context-levevl @protected terms onto each term separately.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {number} processingMode The processing mode.\n     */\n    applyScopedProtected(context, { processingMode }) {\n        if (processingMode && processingMode >= 1.1) {\n            if (context['@protected']) {\n                for (const key of Object.keys(context)) {\n                    if (Util_1.Util.isReservedInternalKeyword(key)) {\n                        continue;\n                    }\n                    if (!Util_1.Util.isPotentialKeyword(key) && !Util_1.Util.isTermProtected(context, key)) {\n                        const value = context[key];\n                        if (value && typeof value === 'object') {\n                            if (!('@protected' in context[key])) {\n                                // Mark terms with object values as protected if they don't have an @protected: false annotation\n                                context[key]['@protected'] = true;\n                            }\n                        }\n                        else {\n                            // Convert string-based term values to object-based values with @protected: true\n                            context[key] = {\n                                '@id': value,\n                                '@protected': true,\n                            };\n                        }\n                    }\n                }\n                delete context['@protected'];\n            }\n        }\n    }\n    /**\n     * Check if the given context inheritance does not contain any overrides of protected terms.\n     * @param {IJsonLdContextNormalizedRaw} contextBefore The context that may contain some protected terms.\n     * @param {IJsonLdContextNormalizedRaw} contextAfter A new context that is being applied on the first one.\n     * @param {IExpandOptions} expandOptions Options that are needed for any expansions during this validation.\n     */\n    validateKeywordRedefinitions(contextBefore, contextAfter, expandOptions) {\n        for (const key of Object.keys(contextAfter)) {\n            if (Util_1.Util.isTermProtected(contextBefore, key)) {\n                // The entry in the context before will always be in object-mode\n                // If the new entry is in string-mode, convert it to object-mode\n                // before checking if it is identical.\n                if (typeof contextAfter[key] === 'string') {\n                    const isPrefix = Util_1.Util.isSimpleTermDefinitionPrefix(contextAfter[key], expandOptions);\n                    contextAfter[key] = { '@id': contextAfter[key] };\n                    // If the simple term def was a prefix, explicitly mark the term as a prefix in the expanded term definition,\n                    // because otherwise we loose this information due to JSON-LD interpreting prefixes differently\n                    // in simple vs expanded term definitions.\n                    if (isPrefix) {\n                        contextAfter[key]['@prefix'] = true;\n                        contextBefore[key]['@prefix'] = true; // Also on before, to make sure the next step still considers them ==\n                    }\n                }\n                // Convert term values to strings for each comparison\n                const valueBefore = canonicalizeJson(contextBefore[key]);\n                // We modify this deliberately,\n                // as we need it for the value comparison (they must be identical modulo '@protected')),\n                // and for the fact that this new value will override the first one.\n                contextAfter[key]['@protected'] = true;\n                const valueAfter = canonicalizeJson(contextAfter[key]);\n                // Error if they are not identical\n                if (valueBefore !== valueAfter) {\n                    throw new ErrorCoded_1.ErrorCoded(`Attempted to override the protected keyword ${key} from ${JSON.stringify(Util_1.Util.getContextValueId(contextBefore[key]))} to ${JSON.stringify(Util_1.Util.getContextValueId(contextAfter[key]))}`, ErrorCoded_1.ERROR_CODES.PROTECTED_TERM_REDEFINITION);\n                }\n            }\n        }\n    }\n    /**\n     * Validate the entries of the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} options The parse options.\n     */\n    validate(context, { processingMode }) {\n        for (const key of Object.keys(context)) {\n            // Ignore reserved internal keywords.\n            if (Util_1.Util.isReservedInternalKeyword(key)) {\n                continue;\n            }\n            // Do not allow empty term\n            if (key === '') {\n                throw new ErrorCoded_1.ErrorCoded(`The empty term is not allowed, got: '${key}': '${JSON.stringify(context[key])}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n            }\n            const value = context[key];\n            const valueType = typeof value;\n            // First check if the key is a keyword\n            if (Util_1.Util.isPotentialKeyword(key)) {\n                switch (key.substr(1)) {\n                    case 'vocab':\n                        if (value !== null && valueType !== 'string') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @vocab IRI: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);\n                        }\n                        break;\n                    case 'base':\n                        if (value !== null && valueType !== 'string') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @base IRI: ${context[key]}`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_IRI);\n                        }\n                        break;\n                    case 'language':\n                        if (value !== null) {\n                            ContextParser.validateLanguage(value, true, ErrorCoded_1.ERROR_CODES.INVALID_DEFAULT_LANGUAGE);\n                        }\n                        break;\n                    case 'version':\n                        if (value !== null && valueType !== 'number') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @version number: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);\n                        }\n                        break;\n                    case 'direction':\n                        if (value !== null) {\n                            ContextParser.validateDirection(value, true);\n                        }\n                        break;\n                    case 'propagate':\n                        if (processingMode === 1.0) {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an illegal @propagate keyword: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n                        }\n                        if (value !== null && valueType !== 'boolean') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @propagate value: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_PROPAGATE_VALUE);\n                        }\n                        break;\n                }\n                // Don't allow keywords to be overridden\n                if (Util_1.Util.isValidKeyword(key) && Util_1.Util.isValidKeyword(Util_1.Util.getContextValueId(value))) {\n                    throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${Util_1.Util\n                        .getContextValueId(value)}'`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);\n                }\n                continue;\n            }\n            // Otherwise, consider the key a term\n            if (value !== null) {\n                switch (valueType) {\n                    case 'string':\n                        if (Util_1.Util.getPrefix(value, context) === key) {\n                            throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON\n                                .stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);\n                        }\n                        if (Util_1.Util.isValidIriWeak(key)) {\n                            if (value === '@type') {\n                                throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                            }\n                            else if (Util_1.Util.isValidIri(value) && value !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {\n                                throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                            }\n                        }\n                        break;\n                    case 'object':\n                        if (!Util_1.Util.isCompactIri(key) && !('@id' in value)\n                            && (value['@type'] === '@id' ? !context['@base'] : !context['@vocab'])) {\n                            throw new ErrorCoded_1.ErrorCoded(`Missing @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                        }\n                        for (const objectKey of Object.keys(value)) {\n                            const objectValue = value[objectKey];\n                            if (!objectValue) {\n                                continue;\n                            }\n                            switch (objectKey) {\n                                case '@id':\n                                    if (Util_1.Util.isValidKeyword(objectValue)\n                                        && objectValue !== '@type' && objectValue !== '@id' && objectValue !== '@graph' && objectValue !== '@nest') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                    }\n                                    if (Util_1.Util.isValidIriWeak(key)) {\n                                        if (objectValue === '@type') {\n                                            throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                        }\n                                        else if (Util_1.Util.isValidIri(objectValue)\n                                            && objectValue !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {\n                                            throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                        }\n                                    }\n                                    if (typeof objectValue !== 'string') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Detected non-string @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                    }\n                                    if (Util_1.Util.getPrefix(objectValue, context) === key) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON\n                                            .stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);\n                                    }\n                                    break;\n                                case '@type':\n                                    if (value['@container'] === '@type' && objectValue !== '@id' && objectValue !== '@vocab') {\n                                        throw new ErrorCoded_1.ErrorCoded(`@container: @type only allows @type: @id or @vocab, but got: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    if (typeof objectValue !== 'string') {\n                                        throw new ErrorCoded_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    if (objectValue !== '@id' && objectValue !== '@vocab'\n                                        && (processingMode === 1.0 || objectValue !== '@json')\n                                        && (processingMode === 1.0 || objectValue !== '@none')\n                                        && (objectValue[0] === '_' || !Util_1.Util.isValidIri(objectValue))) {\n                                        throw new ErrorCoded_1.ErrorCoded(`A context @type must be an absolute IRI, found: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    break;\n                                case '@reverse':\n                                    if (typeof objectValue === 'string' && value['@id'] && value['@id'] !== objectValue) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found non-matching @id and @reverse term values in '${key}':\\\n'${objectValue}' and '${value['@id']}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                    }\n                                    if ('@nest' in value) {\n                                        throw new ErrorCoded_1.ErrorCoded(`@nest is not allowed in the reverse property '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                    }\n                                    break;\n                                case '@container':\n                                    if (processingMode === 1.0) {\n                                        if (Object.keys(objectValue).length > 1\n                                            || Util_1.Util.CONTAINERS_1_0.indexOf(Object.keys(objectValue)[0]) < 0) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${Object.keys(objectValue)}') in 1.0, \\\nmust be only one of ${Util_1.Util.CONTAINERS_1_0.join(', ')}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);\n                                        }\n                                    }\n                                    for (const containerValue of Object.keys(objectValue)) {\n                                        if (containerValue === '@list' && value['@reverse']) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Term value can not be @container: @list and @reverse at the same time on '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                        }\n                                        if (Util_1.Util.CONTAINERS.indexOf(containerValue) < 0) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${containerValue}'), \\\nmust be one of ${Util_1.Util.CONTAINERS.join(', ')}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);\n                                        }\n                                    }\n                                    break;\n                                case '@language':\n                                    ContextParser.validateLanguage(objectValue, true, ErrorCoded_1.ERROR_CODES.INVALID_LANGUAGE_MAPPING);\n                                    break;\n                                case '@direction':\n                                    ContextParser.validateDirection(objectValue, true);\n                                    break;\n                                case '@prefix':\n                                    if (objectValue !== null && typeof objectValue !== 'boolean') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @prefix boolean in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_PREFIX_VALUE);\n                                    }\n                                    if (!('@id' in value) && !Util_1.Util.isValidIri(key)) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Invalid @prefix definition for '${key}' ('${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                                    }\n                                    break;\n                                case '@index':\n                                    if (processingMode === 1.0 || !value['@container'] || !value['@container']['@index']) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Attempt to add illegal key to value object: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                                    }\n                                    break;\n                                case '@nest':\n                                    if (Util_1.Util.isPotentialKeyword(objectValue) && objectValue !== '@nest') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @nest value in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_NEST_VALUE);\n                                    }\n                            }\n                        }\n                        break;\n                    default:\n                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term value: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n            }\n        }\n    }\n    /**\n     * Apply the @base context entry to the given context under certain circumstances.\n     * @param context A context.\n     * @param options Parsing options.\n     * @param inheritFromParent If the @base value from the parent context can be inherited.\n     * @return The given context.\n     */\n    applyBaseEntry(context, options, inheritFromParent) {\n        // In some special cases, this can be a string, so ignore those.\n        if (typeof context === 'string') {\n            return context;\n        }\n        // Give priority to @base in the parent context\n        if (inheritFromParent && !('@base' in context) && options.parentContext\n            && typeof options.parentContext === 'object' && '@base' in options.parentContext) {\n            context['@base'] = options.parentContext['@base'];\n            if (options.parentContext['@__baseDocument']) {\n                context['@__baseDocument'] = true;\n            }\n        }\n        // Override the base IRI if provided.\n        if (options.baseIRI && !options.external) {\n            if (!('@base' in context)) {\n                // The context base is the document base\n                context['@base'] = options.baseIRI;\n                context['@__baseDocument'] = true;\n            }\n            else if (context['@base'] !== null && typeof context['@base'] === 'string'\n                && !Util_1.Util.isValidIri(context['@base'])) {\n                // The context base is relative to the document base\n                context['@base'] = (0, relative_to_absolute_iri_1.resolve)(context['@base'], options.parentContext && options.parentContext['@base'] || options.baseIRI);\n            }\n        }\n        return context;\n    }\n    /**\n     * Resolve relative context IRIs, or return full IRIs as-is.\n     * @param {string} contextIri A context IRI.\n     * @param {string} baseIRI A base IRI.\n     * @return {string} The normalized context IRI.\n     */\n    normalizeContextIri(contextIri, baseIRI) {\n        if (!Util_1.Util.isValidIri(contextIri)) {\n            try {\n                contextIri = (0, relative_to_absolute_iri_1.resolve)(contextIri, baseIRI);\n            }\n            catch (_a) {\n                throw new Error(`Invalid context IRI: ${contextIri}`);\n            }\n        }\n        // TODO: Temporary workaround for fixing schema.org CORS issues (https://github.com/schemaorg/schemaorg/issues/2578#issuecomment-652324465)\n        if (this.redirectSchemaOrgHttps && contextIri.startsWith('http://schema.org')) {\n            contextIri = 'https://schema.org/';\n        }\n        return contextIri;\n    }\n    /**\n     * Parse scoped contexts in the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} options Parsing options.\n     * @return {IJsonLdContextNormalizedRaw} The mutated input context.\n     */\n    async parseInnerContexts(context, options) {\n        for (const key of Object.keys(context)) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if ('@context' in value && value['@context'] !== null && !options.ignoreScopedContexts) {\n                    // Simulate a processing based on the parent context to check if there are any (potential errors).\n                    // Honestly, I find it a bit weird to do this here, as the context may be unused,\n                    // and the final effective context may differ based on any other embedded/scoped contexts.\n                    // But hey, it's part of the spec, so we have no choice...\n                    // https://w3c.github.io/json-ld-api/#h-note-10\n                    if (this.validateContext) {\n                        try {\n                            const parentContext = Object.assign({}, context);\n                            parentContext[key] = Object.assign({}, parentContext[key]);\n                            delete parentContext[key]['@context'];\n                            await this.parse(value['@context'], Object.assign(Object.assign({}, options), { external: false, parentContext, ignoreProtection: true, ignoreRemoteScopedContexts: true, ignoreScopedContexts: true }));\n                        }\n                        catch (e) {\n                            throw new ErrorCoded_1.ErrorCoded(e.message, ErrorCoded_1.ERROR_CODES.INVALID_SCOPED_CONTEXT);\n                        }\n                    }\n                    value['@context'] = (await this.parse(value['@context'], Object.assign(Object.assign({}, options), { external: false, minimalProcessing: true, ignoreRemoteScopedContexts: true, parentContext: context })))\n                        .getContextRaw();\n                }\n            }\n        }\n        return context;\n    }\n    /**\n     * Parse a JSON-LD context in any form.\n     * @param {JsonLdContext} context A context, URL to a context, or an array of contexts/URLs.\n     * @param {IParseOptions} options Optional parsing options.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to the context.\n     */\n    async parse(context, options = {}) {\n        const { baseIRI, parentContext: parentContextInitial, external, processingMode = ContextParser.DEFAULT_PROCESSING_MODE, normalizeLanguageTags, ignoreProtection, minimalProcessing, } = options;\n        let parentContext = parentContextInitial;\n        const remoteContexts = options.remoteContexts || {};\n        // Avoid remote context overflows\n        if (Object.keys(remoteContexts).length >= this.remoteContextsDepthLimit) {\n            throw new ErrorCoded_1.ErrorCoded('Detected an overflow in remote context inclusions: ' + Object.keys(remoteContexts), ErrorCoded_1.ERROR_CODES.CONTEXT_OVERFLOW);\n        }\n        if (context === null || context === undefined) {\n            // Don't allow context nullification and there are protected terms\n            if (!ignoreProtection && parentContext && Util_1.Util.hasProtectedTerms(parentContext)) {\n                throw new ErrorCoded_1.ErrorCoded('Illegal context nullification when terms are protected', ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_NULLIFICATION);\n            }\n            // Context that are explicitly set to null are empty.\n            return new JsonLdContextNormalized_1.JsonLdContextNormalized(this.applyBaseEntry({}, options, false));\n        }\n        else if (typeof context === 'string') {\n            const contextIri = this.normalizeContextIri(context, baseIRI);\n            const overriddenLoad = this.getOverriddenLoad(contextIri, options);\n            if (overriddenLoad) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(overriddenLoad);\n            }\n            const parsedStringContext = await this.parse(await this.load(contextIri), Object.assign(Object.assign({}, options), { baseIRI: contextIri, external: true, remoteContexts: Object.assign(Object.assign({}, remoteContexts), { [contextIri]: true }) }));\n            this.applyBaseEntry(parsedStringContext.getContextRaw(), options, true);\n            return parsedStringContext;\n        }\n        else if (Array.isArray(context)) {\n            // As a performance consideration, first load all external contexts in parallel.\n            const contextIris = [];\n            const contexts = await Promise.all(context.map((subContext, i) => {\n                if (typeof subContext === 'string') {\n                    const contextIri = this.normalizeContextIri(subContext, baseIRI);\n                    contextIris[i] = contextIri;\n                    const overriddenLoad = this.getOverriddenLoad(contextIri, options);\n                    if (overriddenLoad) {\n                        return overriddenLoad;\n                    }\n                    return this.load(contextIri);\n                }\n                else {\n                    return subContext;\n                }\n            }));\n            // Don't apply inheritance logic on minimal processing\n            if (minimalProcessing) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(contexts);\n            }\n            const reducedContexts = await contexts.reduce((accContextPromise, contextEntry, i) => accContextPromise\n                .then((accContext) => this.parse(contextEntry, Object.assign(Object.assign({}, options), { baseIRI: contextIris[i] || options.baseIRI, external: !!contextIris[i] || options.external, parentContext: accContext.getContextRaw(), remoteContexts: contextIris[i] ? Object.assign(Object.assign({}, remoteContexts), { [contextIris[i]]: true }) : remoteContexts }))), Promise.resolve(new JsonLdContextNormalized_1.JsonLdContextNormalized(parentContext || {})));\n            // Override the base IRI if provided.\n            this.applyBaseEntry(reducedContexts.getContextRaw(), options, true);\n            return reducedContexts;\n        }\n        else if (typeof context === 'object') {\n            if ('@context' in context) {\n                return await this.parse(context['@context'], options);\n            }\n            // Make a deep clone of the given context, to avoid modifying it.\n            context = JSON.parse(JSON.stringify(context)); // No better way in JS at the moment.\n            if (parentContext && !minimalProcessing) {\n                parentContext = JSON.parse(JSON.stringify(parentContext));\n            }\n            // We have an actual context object.\n            let newContext = {};\n            // According to the JSON-LD spec, @base must be ignored from external contexts.\n            if (external) {\n                delete context['@base'];\n            }\n            // Override the base IRI if provided.\n            this.applyBaseEntry(context, options, true);\n            // Hashify container entries\n            // Do this before protected term validation as that influences term format\n            this.containersToHash(context);\n            // Don't perform any other modifications if only minimal processing is needed.\n            if (minimalProcessing) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(context);\n            }\n            // In JSON-LD 1.1, load @import'ed context prior to processing.\n            let importContext = {};\n            if ('@import' in context) {\n                if (processingMode >= 1.1) {\n                    // Only accept string values\n                    if (typeof context['@import'] !== 'string') {\n                        throw new ErrorCoded_1.ErrorCoded('An @import value must be a string, but got ' + typeof context['@import'], ErrorCoded_1.ERROR_CODES.INVALID_IMPORT_VALUE);\n                    }\n                    // Load context\n                    importContext = await this.loadImportContext(this.normalizeContextIri(context['@import'], baseIRI));\n                    delete context['@import'];\n                }\n                else {\n                    throw new ErrorCoded_1.ErrorCoded('Context importing is not supported in JSON-LD 1.0', ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n                }\n            }\n            // Merge different parts of the final context in order\n            newContext = Object.assign(Object.assign(Object.assign(Object.assign({}, newContext), (typeof parentContext === 'object' ? parentContext : {})), importContext), context);\n            const newContextWrapped = new JsonLdContextNormalized_1.JsonLdContextNormalized(newContext);\n            // Parse inner contexts with minimal processing\n            await this.parseInnerContexts(newContext, options);\n            // In JSON-LD 1.1, @vocab can be relative to @vocab in the parent context, or a compact IRI.\n            if ((newContext && newContext['@version'] || ContextParser.DEFAULT_PROCESSING_MODE) >= 1.1\n                && ((context['@vocab'] && typeof context['@vocab'] === 'string') || context['@vocab'] === '')) {\n                if (parentContext && '@vocab' in parentContext && context['@vocab'].indexOf(':') < 0) {\n                    newContext['@vocab'] = parentContext['@vocab'] + context['@vocab'];\n                }\n                else {\n                    if (Util_1.Util.isCompactIri(context['@vocab']) || context['@vocab'] in newContextWrapped.getContextRaw()) {\n                        // @vocab is a compact IRI or refers exactly to a prefix\n                        newContext['@vocab'] = newContextWrapped.expandTerm(context['@vocab'], true);\n                    }\n                }\n            }\n            // Handle terms (before protection checks)\n            this.idifyReverseTerms(newContext);\n            this.expandPrefixedTerms(newContextWrapped, this.expandContentTypeToBase);\n            // In JSON-LD 1.1, check if we are not redefining any protected keywords\n            if (!ignoreProtection && parentContext && processingMode >= 1.1) {\n                this.validateKeywordRedefinitions(parentContext, newContext, exports.defaultExpandOptions);\n            }\n            this.normalize(newContext, { processingMode, normalizeLanguageTags });\n            this.applyScopedProtected(newContext, { processingMode });\n            if (this.validateContext) {\n                this.validate(newContext, { processingMode });\n            }\n            return newContextWrapped;\n        }\n        else {\n            throw new ErrorCoded_1.ErrorCoded(`Tried parsing a context that is not a string, array or object, but got ${context}`, ErrorCoded_1.ERROR_CODES.INVALID_LOCAL_CONTEXT);\n        }\n    }\n    /**\n     * Fetch the given URL as a raw JSON-LD context.\n     * @param url An URL.\n     * @return A promise resolving to a raw JSON-LD context.\n     */\n    async load(url) {\n        // First try to retrieve the context from cache\n        const cached = this.documentCache[url];\n        if (cached) {\n            return typeof cached === 'string' ? cached : Array.isArray(cached) ? cached.slice() : Object.assign({}, cached);\n        }\n        // If not in cache, load it\n        let document;\n        try {\n            document = await this.documentLoader.load(url);\n        }\n        catch (e) {\n            throw new ErrorCoded_1.ErrorCoded(`Failed to load remote context ${url}: ${e.message}`, ErrorCoded_1.ERROR_CODES.LOADING_REMOTE_CONTEXT_FAILED);\n        }\n        // Validate the context\n        if (!('@context' in document)) {\n            throw new ErrorCoded_1.ErrorCoded(`Missing @context in remote context at ${url}`, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);\n        }\n        return this.documentCache[url] = document['@context'];\n    }\n    /**\n     * Override the given context that may be loaded.\n     *\n     * This will check whether or not the url is recursively being loaded.\n     * @param url An URL.\n     * @param options Parsing options.\n     * @return An overridden context, or null.\n     *         Optionally an error can be thrown if a cyclic context is detected.\n     */\n    getOverriddenLoad(url, options) {\n        if (url in (options.remoteContexts || {})) {\n            if (options.ignoreRemoteScopedContexts) {\n                return url;\n            }\n            else {\n                throw new ErrorCoded_1.ErrorCoded('Detected a cyclic context inclusion of ' + url, ErrorCoded_1.ERROR_CODES.RECURSIVE_CONTEXT_INCLUSION);\n            }\n        }\n        return null;\n    }\n    /**\n     * Load an @import'ed context.\n     * @param importContextIri The full URI of an @import value.\n     */\n    async loadImportContext(importContextIri) {\n        // Load the context\n        const importContext = await this.load(importContextIri);\n        // Require the context to be a non-array object\n        if (typeof importContext !== 'object' || Array.isArray(importContext)) {\n            throw new ErrorCoded_1.ErrorCoded('An imported context must be a single object: ' + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);\n        }\n        // Error if the context contains another @import\n        if ('@import' in importContext) {\n            throw new ErrorCoded_1.ErrorCoded('An imported context can not import another context: ' + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n        }\n        // Containers have to be converted into hash values the same way as for the importing context\n        // Otherwise context validation will fail for container values\n        this.containersToHash(importContext);\n        return importContext;\n    }\n}\nexports.ContextParser = ContextParser;\nContextParser.DEFAULT_PROCESSING_MODE = 1.1;\nexports.defaultExpandOptions = {\n    allowPrefixForcing: true,\n    allowPrefixNonGenDelims: false,\n    allowVocabRelativeToBase: true,\n};\n//# sourceMappingURL=ContextParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERROR_CODES = exports.ErrorCoded = void 0;\n/**\n * An error that has a certain error code.\n *\n * The error code can be any string.\n * All standardized error codes are listed in {@link ERROR_CODES}.\n */\nclass ErrorCoded extends Error {\n    /* istanbul ignore next */\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nexports.ErrorCoded = ErrorCoded;\n/**\n * All standardized JSON-LD error codes.\n * @see https://w3c.github.io/json-ld-api/#dom-jsonlderrorcode\n */\n// tslint:disable:object-literal-sort-keys\nvar ERROR_CODES;\n(function (ERROR_CODES) {\n    ERROR_CODES[\"COLLIDING_KEYWORDS\"] = \"colliding keywords\";\n    ERROR_CODES[\"CONFLICTING_INDEXES\"] = \"conflicting indexes\";\n    ERROR_CODES[\"CYCLIC_IRI_MAPPING\"] = \"cyclic IRI mapping\";\n    ERROR_CODES[\"INVALID_ID_VALUE\"] = \"invalid @id value\";\n    ERROR_CODES[\"INVALID_INDEX_VALUE\"] = \"invalid @index value\";\n    ERROR_CODES[\"INVALID_NEST_VALUE\"] = \"invalid @nest value\";\n    ERROR_CODES[\"INVALID_PREFIX_VALUE\"] = \"invalid @prefix value\";\n    ERROR_CODES[\"INVALID_PROPAGATE_VALUE\"] = \"invalid @propagate value\";\n    ERROR_CODES[\"INVALID_REVERSE_VALUE\"] = \"invalid @reverse value\";\n    ERROR_CODES[\"INVALID_IMPORT_VALUE\"] = \"invalid @import value\";\n    ERROR_CODES[\"INVALID_VERSION_VALUE\"] = \"invalid @version value\";\n    ERROR_CODES[\"INVALID_BASE_IRI\"] = \"invalid base IRI\";\n    ERROR_CODES[\"INVALID_CONTAINER_MAPPING\"] = \"invalid container mapping\";\n    ERROR_CODES[\"INVALID_CONTEXT_ENTRY\"] = \"invalid context entry\";\n    ERROR_CODES[\"INVALID_CONTEXT_NULLIFICATION\"] = \"invalid context nullification\";\n    ERROR_CODES[\"INVALID_DEFAULT_LANGUAGE\"] = \"invalid default language\";\n    ERROR_CODES[\"INVALID_INCLUDED_VALUE\"] = \"invalid @included value\";\n    ERROR_CODES[\"INVALID_IRI_MAPPING\"] = \"invalid IRI mapping\";\n    ERROR_CODES[\"INVALID_JSON_LITERAL\"] = \"invalid JSON literal\";\n    ERROR_CODES[\"INVALID_KEYWORD_ALIAS\"] = \"invalid keyword alias\";\n    ERROR_CODES[\"INVALID_LANGUAGE_MAP_VALUE\"] = \"invalid language map value\";\n    ERROR_CODES[\"INVALID_LANGUAGE_MAPPING\"] = \"invalid language mapping\";\n    ERROR_CODES[\"INVALID_LANGUAGE_TAGGED_STRING\"] = \"invalid language-tagged string\";\n    ERROR_CODES[\"INVALID_LANGUAGE_TAGGED_VALUE\"] = \"invalid language-tagged value\";\n    ERROR_CODES[\"INVALID_LOCAL_CONTEXT\"] = \"invalid local context\";\n    ERROR_CODES[\"INVALID_REMOTE_CONTEXT\"] = \"invalid remote context\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY\"] = \"invalid reverse property\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY_MAP\"] = \"invalid reverse property map\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY_VALUE\"] = \"invalid reverse property value\";\n    ERROR_CODES[\"INVALID_SCOPED_CONTEXT\"] = \"invalid scoped context\";\n    ERROR_CODES[\"INVALID_SCRIPT_ELEMENT\"] = \"invalid script element\";\n    ERROR_CODES[\"INVALID_SET_OR_LIST_OBJECT\"] = \"invalid set or list object\";\n    ERROR_CODES[\"INVALID_TERM_DEFINITION\"] = \"invalid term definition\";\n    ERROR_CODES[\"INVALID_TYPE_MAPPING\"] = \"invalid type mapping\";\n    ERROR_CODES[\"INVALID_TYPE_VALUE\"] = \"invalid type value\";\n    ERROR_CODES[\"INVALID_TYPED_VALUE\"] = \"invalid typed value\";\n    ERROR_CODES[\"INVALID_VALUE_OBJECT\"] = \"invalid value object\";\n    ERROR_CODES[\"INVALID_VALUE_OBJECT_VALUE\"] = \"invalid value object value\";\n    ERROR_CODES[\"INVALID_VOCAB_MAPPING\"] = \"invalid vocab mapping\";\n    ERROR_CODES[\"IRI_CONFUSED_WITH_PREFIX\"] = \"IRI confused with prefix\";\n    ERROR_CODES[\"KEYWORD_REDEFINITION\"] = \"keyword redefinition\";\n    ERROR_CODES[\"LOADING_DOCUMENT_FAILED\"] = \"loading document failed\";\n    ERROR_CODES[\"LOADING_REMOTE_CONTEXT_FAILED\"] = \"loading remote context failed\";\n    ERROR_CODES[\"MULTIPLE_CONTEXT_LINK_HEADERS\"] = \"multiple context link headers\";\n    ERROR_CODES[\"PROCESSING_MODE_CONFLICT\"] = \"processing mode conflict\";\n    ERROR_CODES[\"PROTECTED_TERM_REDEFINITION\"] = \"protected term redefinition\";\n    ERROR_CODES[\"CONTEXT_OVERFLOW\"] = \"context overflow\";\n    ERROR_CODES[\"INVALID_BASE_DIRECTION\"] = \"invalid base direction\";\n    ERROR_CODES[\"RECURSIVE_CONTEXT_INCLUSION\"] = \"recursive context inclusion\";\n    ERROR_CODES[\"INVALID_STREAMING_KEY_ORDER\"] = \"invalid streaming key order\";\n    /**\n     * JSON-LD-star\n     */\n    ERROR_CODES[\"INVALID_EMBEDDED_NODE\"] = \"invalid embedded node\";\n    ERROR_CODES[\"INVALID_ANNOTATION\"] = \"invalid annotation\";\n})(ERROR_CODES = exports.ERROR_CODES || (exports.ERROR_CODES = {}));\n//# sourceMappingURL=ErrorCoded.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FetchDocumentLoader = void 0;\nrequire(\"cross-fetch/polyfill\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst http_link_header_1 = require(\"http-link-header\");\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\n/**\n * Loads documents via the fetch API.\n */\nclass FetchDocumentLoader {\n    constructor(fetcher) {\n        this.fetcher = fetcher;\n    }\n    async load(url) {\n        const response = await (this.fetcher || fetch)(url, { headers: new Headers({ accept: 'application/ld+json' }) });\n        if (response.ok && response.headers) {\n            let mediaType = response.headers.get('Content-Type');\n            if (mediaType) {\n                const colonPos = mediaType.indexOf(';');\n                if (colonPos > 0) {\n                    mediaType = mediaType.substr(0, colonPos);\n                }\n            }\n            if (mediaType === 'application/ld+json') {\n                // Return JSON-LD if proper content type was returned\n                return (await response.json());\n            }\n            else {\n                // Check for alternate link for a non-JSON-LD response\n                if (response.headers.has('Link')) {\n                    let alternateUrl;\n                    response.headers.forEach((value, key) => {\n                        if (key === 'link') {\n                            const linkHeader = (0, http_link_header_1.parse)(value);\n                            for (const link of linkHeader.get('type', 'application/ld+json')) {\n                                if (link.rel === 'alternate') {\n                                    if (alternateUrl) {\n                                        throw new Error('Multiple JSON-LD alternate links were found on ' + url);\n                                    }\n                                    alternateUrl = (0, relative_to_absolute_iri_1.resolve)(link.uri, url);\n                                }\n                            }\n                        }\n                    });\n                    if (alternateUrl) {\n                        return this.load(alternateUrl);\n                    }\n                }\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, ErrorCoded_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        else {\n            throw new Error(response.statusText || `Status code: ${response.status}`);\n        }\n    }\n}\nexports.FetchDocumentLoader = FetchDocumentLoader;\n//# sourceMappingURL=FetchDocumentLoader.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=IDocumentLoader.js.map","\"use strict\";\n// tslint:disable:max-line-length\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=JsonLdContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonLdContextNormalized = void 0;\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst ContextParser_1 = require(\"./ContextParser\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst Util_1 = require(\"./Util\");\n/**\n * A class exposing operations over a normalized JSON-LD context.\n */\nclass JsonLdContextNormalized {\n    constructor(contextRaw) {\n        this.contextRaw = contextRaw;\n    }\n    /**\n     * @return The raw inner context.\n     */\n    getContextRaw() {\n        return this.contextRaw;\n    }\n    /**\n     * Expand the term or prefix of the given term if it has one,\n     * otherwise return the term as-is.\n     *\n     * This will try to expand the IRI as much as possible.\n     *\n     * Iff in vocab-mode, then other references to other terms in the context can be used,\n     * such as to `myTerm`:\n     * ```\n     * {\n     *   \"myTerm\": \"http://example.org/myLongTerm\"\n     * }\n     * ```\n     *\n     * @param {string} term A term that is an URL or a prefixed URL.\n     * @param {boolean} expandVocab If the term is a predicate or type and should be expanded based on @vocab,\n     *                              otherwise it is considered a regular term that is expanded based on @base.\n     * @param {IExpandOptions} options Options that define the way how expansion must be done.\n     * @return {string} The expanded term, the term as-is, or null if it was explicitly disabled in the context.\n     * @throws If the term is aliased to an invalid value (not a string, IRI or keyword).\n     */\n    expandTerm(term, expandVocab, options = ContextParser_1.defaultExpandOptions) {\n        const contextValue = this.contextRaw[term];\n        // Immediately return if the term was disabled in the context\n        if (contextValue === null || (contextValue && contextValue['@id'] === null)) {\n            return null;\n        }\n        // Check the @id\n        let validIriMapping = true;\n        if (contextValue && expandVocab) {\n            const value = Util_1.Util.getContextValueId(contextValue);\n            if (value && value !== term) {\n                if (typeof value !== 'string' || (!Util_1.Util.isValidIri(value) && !Util_1.Util.isValidKeyword(value))) {\n                    // Don't mark this mapping as invalid if we have an unknown keyword, but of the correct form.\n                    if (!Util_1.Util.isPotentialKeyword(value)) {\n                        validIriMapping = false;\n                    }\n                }\n                else {\n                    return value;\n                }\n            }\n        }\n        // Check if the term is prefixed\n        const prefix = Util_1.Util.getPrefix(term, this.contextRaw);\n        const vocab = this.contextRaw['@vocab'];\n        const vocabRelative = (!!vocab || vocab === '') && vocab.indexOf(':') < 0;\n        const base = this.contextRaw['@base'];\n        const potentialKeyword = Util_1.Util.isPotentialKeyword(term);\n        if (prefix) {\n            const contextPrefixValue = this.contextRaw[prefix];\n            const value = Util_1.Util.getContextValueId(contextPrefixValue);\n            if (value) {\n                if (typeof contextPrefixValue === 'string' || !options.allowPrefixForcing) {\n                    // If we have a simple term definition,\n                    // check the last character of the prefix to determine whether or not it is a prefix.\n                    // Validate that prefix ends with gen-delim character, unless @prefix is true\n                    if (!Util_1.Util.isSimpleTermDefinitionPrefix(value, options)) {\n                        // Treat the term as an absolute IRI\n                        return term;\n                    }\n                }\n                else {\n                    // If we have an expanded term definition, default to @prefix: false\n                    if (value[0] !== '_' && !potentialKeyword && !contextPrefixValue['@prefix'] && !(term in this.contextRaw)) {\n                        // Treat the term as an absolute IRI\n                        return term;\n                    }\n                }\n                return value + term.substr(prefix.length + 1);\n            }\n        }\n        else if (expandVocab && ((vocab || vocab === '') || (options.allowVocabRelativeToBase && (base && vocabRelative)))\n            && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {\n            if (vocabRelative) {\n                if (options.allowVocabRelativeToBase) {\n                    return ((vocab || base) ? (0, relative_to_absolute_iri_1.resolve)(vocab, base) : '') + term;\n                }\n                else {\n                    throw new ErrorCoded_1.ErrorCoded(`Relative vocab expansion for term '${term}' with vocab '${vocab}' is not allowed.`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);\n                }\n            }\n            else {\n                return vocab + term;\n            }\n        }\n        else if (!expandVocab && base && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {\n            return (0, relative_to_absolute_iri_1.resolve)(term, base);\n        }\n        // Return the term as-is, unless we discovered an invalid IRI mapping for this term in the context earlier.\n        if (validIriMapping) {\n            return term;\n        }\n        else {\n            throw new ErrorCoded_1.ErrorCoded(`Invalid IRI mapping found for context entry '${term}': '${JSON.stringify(contextValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n        }\n    }\n    /**\n     * Compact the given term using @base, @vocab, an aliased term, or a prefixed term.\n     *\n     * This will try to compact the IRI as much as possible.\n     *\n     * @param {string} iri An IRI to compact.\n     * @param {boolean} vocab If the term is a predicate or type and should be compacted based on @vocab,\n     *                        otherwise it is considered a regular term that is compacted based on @base.\n     * @return {string} The compacted term or the IRI as-is.\n     */\n    compactIri(iri, vocab) {\n        // Try @vocab compacting\n        if (vocab && this.contextRaw['@vocab'] && iri.startsWith(this.contextRaw['@vocab'])) {\n            return iri.substr(this.contextRaw['@vocab'].length);\n        }\n        // Try @base compacting\n        if (!vocab && this.contextRaw['@base'] && iri.startsWith(this.contextRaw['@base'])) {\n            return iri.substr(this.contextRaw['@base'].length);\n        }\n        // Loop over all terms in the context\n        // This will try to prefix as short as possible.\n        // Once a fully compacted alias is found, return immediately, as we can not go any shorter.\n        const shortestPrefixing = { prefix: '', suffix: iri };\n        for (const key in this.contextRaw) {\n            const value = this.contextRaw[key];\n            if (value && !Util_1.Util.isPotentialKeyword(key)) {\n                const contextIri = Util_1.Util.getContextValueId(value);\n                if (iri.startsWith(contextIri)) {\n                    const suffix = iri.substr(contextIri.length);\n                    if (!suffix) {\n                        if (vocab) {\n                            // Immediately return on compacted alias\n                            return key;\n                        }\n                    }\n                    else if (suffix.length < shortestPrefixing.suffix.length) {\n                        // Overwrite the shortest prefix\n                        shortestPrefixing.prefix = key;\n                        shortestPrefixing.suffix = suffix;\n                    }\n                }\n            }\n        }\n        // Return the shortest prefix\n        if (shortestPrefixing.prefix) {\n            return shortestPrefixing.prefix + ':' + shortestPrefixing.suffix;\n        }\n        return iri;\n    }\n}\nexports.JsonLdContextNormalized = JsonLdContextNormalized;\n//# sourceMappingURL=JsonLdContextNormalized.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nclass Util {\n    /**\n     * Check if the given term is a valid compact IRI.\n     * Otherwise, it may be an IRI.\n     * @param {string} term A term.\n     * @return {boolean} If it is a compact IRI.\n     */\n    static isCompactIri(term) {\n        return term.indexOf(':') > 0 && !(term && term[0] === '#');\n    }\n    /**\n     * Get the prefix from the given term.\n     * @see https://json-ld.org/spec/latest/json-ld/#compact-iris\n     * @param {string} term A term that is an URL or a prefixed URL.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @return {string} The prefix or null.\n     */\n    static getPrefix(term, context) {\n        // Do not consider relative IRIs starting with a hash as compact IRIs\n        if (term && term[0] === '#') {\n            return null;\n        }\n        const separatorPos = term.indexOf(':');\n        if (separatorPos >= 0) {\n            // Suffix can not begin with two slashes\n            if (term.length > separatorPos + 1\n                && term.charAt(separatorPos + 1) === '/'\n                && term.charAt(separatorPos + 2) === '/') {\n                return null;\n            }\n            const prefix = term.substr(0, separatorPos);\n            // Prefix can not be an underscore (this is a blank node)\n            if (prefix === '_') {\n                return null;\n            }\n            // Prefix must match a term in the active context\n            if (context[prefix]) {\n                return prefix;\n            }\n        }\n        return null;\n    }\n    /**\n     * From a given context entry value, get the string value, or the @id field.\n     * @param contextValue A value for a term in a context.\n     * @return {string} The id value, or null.\n     */\n    static getContextValueId(contextValue) {\n        if (contextValue === null || typeof contextValue === 'string') {\n            return contextValue;\n        }\n        const id = contextValue['@id'];\n        return id ? id : null;\n    }\n    /**\n     * Check if the given simple term definition (string-based value of a context term)\n     * should be considered a prefix.\n     * @param value A simple term definition value.\n     * @param options Options that define the way how expansion must be done.\n     */\n    static isSimpleTermDefinitionPrefix(value, options) {\n        return !Util.isPotentialKeyword(value)\n            && (value[0] === '_' || options.allowPrefixNonGenDelims || Util.isPrefixIriEndingWithGenDelim(value));\n    }\n    /**\n     * Check if the given keyword is of the keyword format \"@\"1*ALPHA.\n     * @param {string} keyword A potential keyword.\n     * @return {boolean} If the given keyword is of the keyword format.\n     */\n    static isPotentialKeyword(keyword) {\n        return typeof keyword === 'string' && Util.KEYWORD_REGEX.test(keyword);\n    }\n    /**\n     * Check if the given prefix ends with a gen-delim character.\n     * @param {string} prefixIri A prefix IRI.\n     * @return {boolean} If the given prefix IRI is valid.\n     */\n    static isPrefixIriEndingWithGenDelim(prefixIri) {\n        return Util.ENDS_WITH_GEN_DELIM.test(prefixIri);\n    }\n    /**\n     * Check if the given context value can be a prefix value.\n     * @param value A context value.\n     * @return {boolean} If it can be a prefix value.\n     */\n    static isPrefixValue(value) {\n        return value && (typeof value === 'string' || (value && typeof value === 'object'));\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return Boolean(iri && Util.IRI_REGEX.test(iri));\n    }\n    /**\n     * Check if the given IRI is valid, this includes the possibility of being a relative IRI.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIriWeak(iri) {\n        return !!iri && iri[0] !== ':' && Util.IRI_REGEX_WEAK.test(iri);\n    }\n    /**\n     * Check if the given keyword is a defined according to the JSON-LD specification.\n     * @param {string} keyword A potential keyword.\n     * @return {boolean} If the given keyword is valid.\n     */\n    static isValidKeyword(keyword) {\n        return Util.VALID_KEYWORDS[keyword];\n    }\n    /**\n     * Check if the given term is protected in the context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {string} key A context term.\n     * @return {boolean} If the given term has an @protected flag.\n     */\n    static isTermProtected(context, key) {\n        const value = context[key];\n        return !(typeof value === 'string') && value && value['@protected'];\n    }\n    /**\n     * Check if the given context has at least one protected term.\n     * @param context A context.\n     * @return If the context has a protected term.\n     */\n    static hasProtectedTerms(context) {\n        for (const key of Object.keys(context)) {\n            if (Util.isTermProtected(context, key)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Check if the given key is an internal reserved keyword.\n     * @param key A context key.\n     */\n    static isReservedInternalKeyword(key) {\n        return key.startsWith('@__');\n    }\n}\nexports.Util = Util;\n// Regex for valid IRIs\nUtil.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^ \"<>{}|\\\\\\[\\]`#]*(#[^#]*)?$/;\n// Weaker regex for valid IRIs, this includes relative IRIs\nUtil.IRI_REGEX_WEAK = /(?::[^:])|\\//;\n// Regex for keyword form\nUtil.KEYWORD_REGEX = /^@[a-z]+$/i;\n// Regex to see if an IRI ends with a gen-delim character (see RFC 3986)\nUtil.ENDS_WITH_GEN_DELIM = /[:/?#\\[\\]@]$/;\n// Regex for language tags\nUtil.REGEX_LANGUAGE_TAG = /^[a-zA-Z]+(-[a-zA-Z0-9]+)*$/;\n// Regex for base directions\nUtil.REGEX_DIRECTION_TAG = /^(ltr)|(rtl)$/;\n// All known valid JSON-LD keywords\n// @see https://www.w3.org/TR/json-ld11/#keywords\nUtil.VALID_KEYWORDS = {\n    '@annotation': true,\n    '@base': true,\n    '@container': true,\n    '@context': true,\n    '@direction': true,\n    '@graph': true,\n    '@id': true,\n    '@import': true,\n    '@included': true,\n    '@index': true,\n    '@json': true,\n    '@language': true,\n    '@list': true,\n    '@nest': true,\n    '@none': true,\n    '@prefix': true,\n    '@propagate': true,\n    '@protected': true,\n    '@reverse': true,\n    '@set': true,\n    '@type': true,\n    '@value': true,\n    '@version': true,\n    '@vocab': true,\n};\n// Keys in the contexts that will not be expanded based on the base IRI\nUtil.EXPAND_KEYS_BLACKLIST = [\n    '@base',\n    '@vocab',\n    '@language',\n    '@version',\n    '@direction',\n];\n// Keys in the contexts that may not be aliased from\nUtil.ALIAS_DOMAIN_BLACKLIST = [\n    '@container',\n    '@graph',\n    '@id',\n    '@index',\n    '@list',\n    '@nest',\n    '@none',\n    '@prefix',\n    '@reverse',\n    '@set',\n    '@type',\n    '@value',\n    '@version',\n];\n// Keys in the contexts that may not be aliased to\nUtil.ALIAS_RANGE_BLACKLIST = [\n    '@context',\n    '@preserve',\n];\n// All valid @container values\nUtil.CONTAINERS = [\n    '@list',\n    '@set',\n    '@index',\n    '@language',\n    '@graph',\n    '@id',\n    '@type',\n];\n// All valid @container values under processing mode 1.0\nUtil.CONTAINERS_1_0 = [\n    '@list',\n    '@set',\n    '@index',\n];\n//# sourceMappingURL=Util.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/JsonLdParser\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextTree = void 0;\n/**\n * A tree structure that holds all contexts,\n * based on their position in the JSON object.\n *\n * Positions are identified by a path of keys.\n */\nclass ContextTree {\n    constructor() {\n        this.subTrees = {};\n    }\n    getContext(keys) {\n        if (keys.length > 0) {\n            const [head, ...tail] = keys;\n            const subTree = this.subTrees[head];\n            if (subTree) {\n                const subContext = subTree.getContext(tail);\n                if (subContext) {\n                    return subContext.then(({ context, depth }) => ({ context, depth: depth + 1 }));\n                }\n            }\n        }\n        return this.context ? this.context.then((context) => ({ context, depth: 0 })) : null;\n    }\n    setContext(keys, context) {\n        if (keys.length === 0) {\n            this.context = context;\n        }\n        else {\n            const [head, ...tail] = keys;\n            let subTree = this.subTrees[head];\n            if (!subTree) {\n                subTree = this.subTrees[head] = new ContextTree();\n            }\n            subTree.setContext(tail, context);\n        }\n    }\n    removeContext(path) {\n        this.setContext(path, null);\n    }\n}\nexports.ContextTree = ContextTree;\n//# sourceMappingURL=ContextTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonLdParser = void 0;\n// tslint:disable-next-line:no-var-requires\nconst Parser = require('jsonparse');\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst stream_1 = require(\"stream\");\nconst EntryHandlerArrayValue_1 = require(\"./entryhandler/EntryHandlerArrayValue\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\nconst EntryHandlerInvalidFallback_1 = require(\"./entryhandler/EntryHandlerInvalidFallback\");\nconst EntryHandlerPredicate_1 = require(\"./entryhandler/EntryHandlerPredicate\");\nconst EntryHandlerKeywordContext_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordContext\");\nconst EntryHandlerKeywordGraph_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordGraph\");\nconst EntryHandlerKeywordId_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordId\");\nconst EntryHandlerKeywordIncluded_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordIncluded\");\nconst EntryHandlerKeywordNest_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordNest\");\nconst EntryHandlerKeywordType_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordType\");\nconst EntryHandlerKeywordUnknownFallback_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordUnknownFallback\");\nconst EntryHandlerKeywordValue_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordValue\");\nconst ParsingContext_1 = require(\"./ParsingContext\");\nconst Util_1 = require(\"./Util\");\nconst http_link_header_1 = require(\"http-link-header\");\n/**\n * A stream transformer that parses JSON-LD (text) streams to an {@link RDF.Stream}.\n */\nclass JsonLdParser extends stream_1.Transform {\n    constructor(options) {\n        super({ readableObjectMode: true });\n        options = options || {};\n        this.options = options;\n        this.parsingContext = new ParsingContext_1.ParsingContext(Object.assign({ parser: this }, options));\n        this.util = new Util_1.Util({ dataFactory: options.dataFactory, parsingContext: this.parsingContext });\n        this.jsonParser = new Parser();\n        this.contextJobs = [];\n        this.typeJobs = [];\n        this.contextAwaitingJobs = [];\n        this.lastDepth = 0;\n        this.lastKeys = [];\n        this.lastOnValueJob = Promise.resolve();\n        this.attachJsonParserListeners();\n        this.on('end', () => {\n            if (typeof this.jsonParser.mode !== 'undefined') {\n                this.emit('error', new Error('Unclosed document'));\n            }\n        });\n    }\n    /**\n     * Construct a JsonLdParser from the given HTTP response.\n     *\n     * This will throw an error if no valid JSON response is received\n     * (application/ld+json, application/json, or something+json).\n     *\n     * For raw JSON responses, exactly one link header pointing to a JSON-LD context is required.\n     *\n     * This method is not responsible for handling redirects.\n     *\n     * @param baseIRI The URI of the received response.\n     * @param mediaType The received content type.\n     * @param headers Optional HTTP headers.\n     * @param options Optional parser options.\n     */\n    static fromHttpResponse(baseIRI, mediaType, headers, options) {\n        let context;\n        // Special cases when receiving something else than the JSON-LD media type\n        if (mediaType !== 'application/ld+json') {\n            // Only accept JSON or JSON extension types\n            if (mediaType !== 'application/json' && !mediaType.endsWith('+json')) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n            // We need exactly one JSON-LD context in the link header\n            if (headers && headers.has('Link')) {\n                headers.forEach((value, key) => {\n                    if (key === 'link') {\n                        const linkHeader = http_link_header_1.parse(value);\n                        for (const link of linkHeader.get('rel', 'http://www.w3.org/ns/json-ld#context')) {\n                            if (context) {\n                                throw new jsonld_context_parser_1.ErrorCoded('Multiple JSON-LD context link headers were found on ' + baseIRI, jsonld_context_parser_1.ERROR_CODES.MULTIPLE_CONTEXT_LINK_HEADERS);\n                            }\n                            context = link.uri;\n                        }\n                    }\n                });\n            }\n            if (!context && !(options === null || options === void 0 ? void 0 : options.ignoreMissingContextLinkHeader)) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Missing context link header for media type ${mediaType} on ${baseIRI}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        // Check if the streaming profile is present\n        let streamingProfile;\n        if (headers && headers.has('Content-Type')) {\n            const contentType = headers.get('Content-Type');\n            const match = /; *profile=([^\"]*)/.exec(contentType);\n            if (match && match[1] === 'http://www.w3.org/ns/json-ld#streaming') {\n                streamingProfile = true;\n            }\n        }\n        return new JsonLdParser(Object.assign({ baseIRI,\n            context,\n            streamingProfile }, options ? options : {}));\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        const output = new stream_1.PassThrough({ readableObjectMode: true });\n        stream.on('error', (error) => parsed.emit('error', error));\n        stream.on('data', (data) => output.push(data));\n        stream.on('end', () => output.push(null));\n        const parsed = output.pipe(new JsonLdParser(this.options));\n        return parsed;\n    }\n    _transform(chunk, encoding, callback) {\n        this.jsonParser.write(chunk);\n        this.lastOnValueJob\n            .then(() => callback(), (error) => callback(error));\n    }\n    /**\n     * Start a new job for parsing the given value.\n     *\n     * This will let the first valid {@link IEntryHandler} handle the entry.\n     *\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        let flushStacks = true;\n        // When we go up the stack, emit all unidentified values\n        // We need to do this before the new job, because the new job may require determined values from the flushed jobs.\n        if (lastDepthCheck && depth < this.lastDepth) {\n            // Check if we had any RDF lists that need to be terminated with an rdf:nil\n            const listPointer = this.parsingContext.listPointerStack[this.lastDepth];\n            if (listPointer) {\n                // Terminate the list if the had at least one value\n                if (listPointer.value) {\n                    this.emit('data', this.util.dataFactory.quad(listPointer.value, this.util.rdfRest, this.util.rdfNil, this.util.getDefaultGraph()));\n                }\n                // Add the list id to the id stack, so it can be used higher up in the stack\n                listPointer.listId.listHead = true;\n                this.parsingContext.idStack[listPointer.listRootDepth + 1] = [listPointer.listId];\n                this.parsingContext.listPointerStack.splice(this.lastDepth, 1);\n            }\n            // Flush the buffer for lastDepth\n            // If the parent key is a special type of container, postpone flushing until that parent is handled.\n            if (await EntryHandlerContainer_1.EntryHandlerContainer.isBufferableContainerHandler(this.parsingContext, this.lastKeys, this.lastDepth)) {\n                this.parsingContext.pendingContainerFlushBuffers\n                    .push({ depth: this.lastDepth, keys: this.lastKeys.slice(0, this.lastKeys.length) });\n                flushStacks = false;\n            }\n            else {\n                await this.flushBuffer(this.lastDepth, this.lastKeys);\n            }\n        }\n        const key = await this.util.unaliasKeyword(keys[depth], keys, depth);\n        const parentKey = await this.util.unaliasKeywordParent(keys, depth);\n        this.parsingContext.emittedStack[depth] = true;\n        let handleKey = true;\n        // Keywords inside @reverse is not allowed apart from @context\n        if (jsonld_context_parser_1.Util.isValidKeyword(key) && parentKey === '@reverse' && key !== '@context') {\n            this.emit('error', new jsonld_context_parser_1.ErrorCoded(`Found the @id '${value}' inside an @reverse property`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_MAP));\n        }\n        // Skip further processing if one of the parent nodes are invalid.\n        // We use the validationStack to reuse validation results that were produced before with common key stacks.\n        let inProperty = false;\n        if (this.parsingContext.validationStack.length > 1) {\n            inProperty = this.parsingContext.validationStack[this.parsingContext.validationStack.length - 1].property;\n        }\n        for (let i = Math.max(1, this.parsingContext.validationStack.length - 1); i < keys.length - 1; i++) {\n            const validationResult = this.parsingContext.validationStack[i]\n                || (this.parsingContext.validationStack[i] = await this.validateKey(keys.slice(0, i + 1), i, inProperty));\n            if (!validationResult.valid) {\n                this.parsingContext.emittedStack[depth] = false;\n                handleKey = false;\n                break;\n            }\n            else if (!inProperty && validationResult.property) {\n                inProperty = true;\n            }\n        }\n        // Skip further processing if this node is part of a literal\n        if (this.util.isLiteral(depth)) {\n            handleKey = false;\n        }\n        // Get handler\n        if (handleKey) {\n            for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n                const testResult = await entryHandler.test(this.parsingContext, this.util, key, keys, depth);\n                if (testResult) {\n                    // Pass processing over to the handler\n                    await entryHandler.handle(this.parsingContext, this.util, key, keys, value, depth, testResult);\n                    // Flag that this depth is processed\n                    if (entryHandler.isStackProcessor()) {\n                        this.parsingContext.processingStack[depth] = true;\n                    }\n                    break;\n                }\n            }\n        }\n        // Validate value indexes on the root.\n        if (depth === 0 && Array.isArray(value)) {\n            await this.util.validateValueIndexes(value);\n        }\n        // When we go up the stack, flush the old stack\n        if (flushStacks && depth < this.lastDepth) {\n            // Reset our stacks\n            this.flushStacks(this.lastDepth);\n        }\n        this.lastDepth = depth;\n        this.lastKeys = keys;\n        // Clear the keyword cache at this depth, and everything underneath.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(depth - 1);\n    }\n    /**\n     * Flush the processing stacks at the given depth.\n     * @param {number} depth A depth.\n     */\n    flushStacks(depth) {\n        this.parsingContext.processingStack.splice(depth, 1);\n        this.parsingContext.processingType.splice(depth, 1);\n        this.parsingContext.emittedStack.splice(depth, 1);\n        this.parsingContext.idStack.splice(depth, 1);\n        this.parsingContext.graphStack.splice(depth + 1, 1);\n        this.parsingContext.graphContainerTermStack.splice(depth, 1);\n        this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        this.parsingContext.validationStack.splice(depth - 1, 2);\n        this.parsingContext.literalStack.splice(depth, this.parsingContext.literalStack.length - depth);\n        // TODO: just like the literal stack, splice all other stack until the end as well?\n    }\n    /**\n     * Flush buffers for the given depth.\n     *\n     * This should be called after the last entry at a given depth was processed.\n     *\n     * @param {number} depth A depth.\n     * @param {any[]} keys A stack of keys.\n     * @return {Promise<void>} A promise resolving if flushing is done.\n     */\n    async flushBuffer(depth, keys) {\n        let subjects = this.parsingContext.idStack[depth];\n        if (!subjects) {\n            subjects = this.parsingContext.idStack[depth] = [this.util.dataFactory.blankNode()];\n        }\n        // Flush values at this level\n        const valueBuffer = this.parsingContext.unidentifiedValuesBuffer[depth];\n        if (valueBuffer) {\n            for (const subject of subjects) {\n                const depthOffsetGraph = await this.util.getDepthOffsetGraph(depth, keys);\n                const graphs = (this.parsingContext.graphStack[depth] || depthOffsetGraph >= 0)\n                    ? this.parsingContext.idStack[depth - depthOffsetGraph - 1]\n                    : [await this.util.getGraphContainerValue(keys, depth)];\n                if (graphs) {\n                    for (const graph of graphs) {\n                        // Flush values to stream if the graph @id is known\n                        this.parsingContext.emittedStack[depth] = true;\n                        for (const bufferedValue of valueBuffer) {\n                            if (bufferedValue.reverse) {\n                                this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.object, bufferedValue.predicate, subject, graph));\n                            }\n                            else {\n                                this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(subject, bufferedValue.predicate, bufferedValue.object, graph));\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Place the values in the graphs buffer if the graph @id is not yet known\n                    const subGraphBuffer = this.parsingContext.getUnidentifiedGraphBufferSafe(depth - await this.util.getDepthOffsetGraph(depth, keys) - 1);\n                    for (const bufferedValue of valueBuffer) {\n                        if (bufferedValue.reverse) {\n                            subGraphBuffer.push({\n                                object: subject,\n                                predicate: bufferedValue.predicate,\n                                subject: bufferedValue.object,\n                            });\n                        }\n                        else {\n                            subGraphBuffer.push({\n                                object: bufferedValue.object,\n                                predicate: bufferedValue.predicate,\n                                subject,\n                            });\n                        }\n                    }\n                }\n            }\n            this.parsingContext.unidentifiedValuesBuffer.splice(depth, 1);\n            this.parsingContext.literalStack.splice(depth, 1);\n            this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        }\n        // Flush graphs at this level\n        const graphBuffer = this.parsingContext.unidentifiedGraphsBuffer[depth];\n        if (graphBuffer) {\n            for (const subject of subjects) {\n                // A @graph statement at the root without @id relates to the default graph,\n                // unless there are top-level properties,\n                // others relate to blank nodes.\n                const graph = depth === 1 && subject.termType === 'BlankNode'\n                    && !this.parsingContext.topLevelProperties ? this.util.getDefaultGraph() : subject;\n                this.parsingContext.emittedStack[depth] = true;\n                for (const bufferedValue of graphBuffer) {\n                    this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.subject, bufferedValue.predicate, bufferedValue.object, graph));\n                }\n            }\n            this.parsingContext.unidentifiedGraphsBuffer.splice(depth, 1);\n        }\n    }\n    /**\n     * Check if at least one {@link IEntryHandler} validates the entry to true.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth A depth.\n     * @param {boolean} inProperty If the current depth is part of a valid property node.\n     * @return {Promise<{ valid: boolean, property: boolean }>} A promise resolving to true or false.\n     */\n    async validateKey(keys, depth, inProperty) {\n        for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n            if (await entryHandler.validate(this.parsingContext, this.util, keys, depth, inProperty)) {\n                return { valid: true, property: inProperty || entryHandler.isPropertyHandler() };\n            }\n        }\n        return { valid: false, property: false };\n    }\n    /**\n     * Attach all required listeners to the JSON parser.\n     *\n     * This should only be called once.\n     */\n    attachJsonParserListeners() {\n        // Listen to json parser events\n        this.jsonParser.onValue = (value) => {\n            const depth = this.jsonParser.stack.length;\n            const keys = (new Array(depth + 1).fill(0)).map((v, i) => {\n                return i === depth ? this.jsonParser.key : this.jsonParser.stack[i].key;\n            });\n            if (!this.isParsingContextInner(depth)) { // Don't parse inner nodes inside @context\n                const valueJobCb = () => this.newOnValueJob(keys, value, depth, true);\n                if (!this.parsingContext.streamingProfile\n                    && !this.parsingContext.contextTree.getContext(keys.slice(0, -1))) {\n                    // If an out-of-order context is allowed,\n                    // we have to buffer everything.\n                    // We store jobs for @context's and @type's separately,\n                    // because at the end, we have to process them first.\n                    // We also handle @type because these *could* introduce a type-scoped context.\n                    if (keys[depth] === '@context') {\n                        let jobs = this.contextJobs[depth];\n                        if (!jobs) {\n                            jobs = this.contextJobs[depth] = [];\n                        }\n                        jobs.push(valueJobCb);\n                    }\n                    else if (keys[depth] === '@type'\n                        || typeof keys[depth] === 'number' && keys[depth - 1] === '@type') { // Also capture @type with array values\n                        // Remove @type from keys, because we want it to apply to parent later on\n                        this.typeJobs.push({ job: valueJobCb, keys: keys.slice(0, keys.length - 1) });\n                    }\n                    else {\n                        this.contextAwaitingJobs.push({ job: valueJobCb, keys });\n                    }\n                }\n                else {\n                    // Make sure that our value jobs are chained synchronously\n                    this.lastOnValueJob = this.lastOnValueJob.then(valueJobCb);\n                }\n                // Execute all buffered jobs on deeper levels\n                if (!this.parsingContext.streamingProfile && depth === 0) {\n                    this.lastOnValueJob = this.lastOnValueJob\n                        .then(() => this.executeBufferedJobs());\n                }\n            }\n        };\n        this.jsonParser.onError = (error) => {\n            this.emit('error', error);\n        };\n    }\n    /**\n     * Check if the parser is currently parsing an element that is part of an @context entry.\n     * @param {number} depth A depth.\n     * @return {boolean} A boolean.\n     */\n    isParsingContextInner(depth) {\n        for (let i = depth; i > 0; i--) {\n            if (this.jsonParser.stack[i - 1].key === '@context') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Execute all buffered jobs.\n     * @return {Promise<void>} A promise resolving if all jobs are finished.\n     */\n    async executeBufferedJobs() {\n        // Handle context jobs\n        for (const jobs of this.contextJobs) {\n            if (jobs) {\n                for (const job of jobs) {\n                    await job();\n                }\n            }\n        }\n        // Clear the keyword cache.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(0);\n        // Handle non-context jobs\n        for (const job of this.contextAwaitingJobs) {\n            // Check if we have a type (with possible type-scoped context) that should be handled before.\n            // We check all possible parent nodes for the current job, from root to leaves.\n            if (this.typeJobs.length > 0) {\n                // First collect all applicable type jobs\n                const applicableTypeJobs = [];\n                const applicableTypeJobIds = [];\n                for (let i = 0; i < this.typeJobs.length; i++) {\n                    const typeJob = this.typeJobs[i];\n                    if (Util_1.Util.isPrefixArray(typeJob.keys, job.keys)) {\n                        applicableTypeJobs.push(typeJob);\n                        applicableTypeJobIds.push(i);\n                    }\n                }\n                // Next, sort the jobs from short to long key length (to ensure types higher up in the tree to be handled first)\n                const sortedTypeJobs = applicableTypeJobs.sort((job1, job2) => job1.keys.length - job2.keys.length);\n                // Finally, execute the jobs in order\n                for (const typeJob of sortedTypeJobs) {\n                    await typeJob.job();\n                }\n                // Remove the executed type jobs\n                // Sort first, so we can efficiently splice\n                const sortedApplicableTypeJobIds = applicableTypeJobIds.sort().reverse();\n                for (const jobId of sortedApplicableTypeJobIds) {\n                    this.typeJobs.splice(jobId, 1);\n                }\n            }\n            await job.job();\n        }\n    }\n}\nexports.JsonLdParser = JsonLdParser;\nJsonLdParser.DEFAULT_PROCESSING_MODE = '1.1';\nJsonLdParser.ENTRY_HANDLERS = [\n    new EntryHandlerArrayValue_1.EntryHandlerArrayValue(),\n    new EntryHandlerKeywordContext_1.EntryHandlerKeywordContext(),\n    new EntryHandlerKeywordId_1.EntryHandlerKeywordId(),\n    new EntryHandlerKeywordIncluded_1.EntryHandlerKeywordIncluded(),\n    new EntryHandlerKeywordGraph_1.EntryHandlerKeywordGraph(),\n    new EntryHandlerKeywordNest_1.EntryHandlerKeywordNest(),\n    new EntryHandlerKeywordType_1.EntryHandlerKeywordType(),\n    new EntryHandlerKeywordValue_1.EntryHandlerKeywordValue(),\n    new EntryHandlerContainer_1.EntryHandlerContainer(),\n    new EntryHandlerKeywordUnknownFallback_1.EntryHandlerKeywordUnknownFallback(),\n    new EntryHandlerPredicate_1.EntryHandlerPredicate(),\n    new EntryHandlerInvalidFallback_1.EntryHandlerInvalidFallback(),\n];\n//# sourceMappingURL=JsonLdParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParsingContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst ErrorCoded_1 = require(\"jsonld-context-parser/lib/ErrorCoded\");\nconst ContextTree_1 = require(\"./ContextTree\");\nconst JsonLdParser_1 = require(\"./JsonLdParser\");\n/**\n * Data holder for parsing information.\n */\nclass ParsingContext {\n    constructor(options) {\n        // Initialize settings\n        this.contextParser = new jsonld_context_parser_1.ContextParser({ documentLoader: options.documentLoader, skipValidation: options.skipContextValidation });\n        this.streamingProfile = !!options.streamingProfile;\n        this.baseIRI = options.baseIRI;\n        this.produceGeneralizedRdf = !!options.produceGeneralizedRdf;\n        this.allowSubjectList = !!options.allowSubjectList;\n        this.processingMode = options.processingMode || JsonLdParser_1.JsonLdParser.DEFAULT_PROCESSING_MODE;\n        this.strictValues = !!options.strictValues;\n        this.validateValueIndexes = !!options.validateValueIndexes;\n        this.defaultGraph = options.defaultGraph;\n        this.rdfDirection = options.rdfDirection;\n        this.normalizeLanguageTags = options.normalizeLanguageTags;\n        this.streamingProfileAllowOutOfOrderPlainType = options.streamingProfileAllowOutOfOrderPlainType;\n        this.topLevelProperties = false;\n        this.activeProcessingMode = parseFloat(this.processingMode);\n        // Initialize stacks\n        this.processingStack = [];\n        this.processingType = [];\n        this.emittedStack = [];\n        this.idStack = [];\n        this.graphStack = [];\n        this.graphContainerTermStack = [];\n        this.listPointerStack = [];\n        this.contextTree = new ContextTree_1.ContextTree();\n        this.literalStack = [];\n        this.validationStack = [];\n        this.unaliasedKeywordCacheStack = [];\n        this.jsonLiteralStack = [];\n        this.unidentifiedValuesBuffer = [];\n        this.unidentifiedGraphsBuffer = [];\n        this.pendingContainerFlushBuffers = [];\n        this.parser = options.parser;\n        if (options.context) {\n            this.rootContext = this.parseContext(options.context);\n            this.rootContext.then((context) => this.validateContext(context));\n        }\n        else {\n            this.rootContext = Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(this.baseIRI ? { '@base': this.baseIRI, '@__baseDocument': true } : {}));\n        }\n    }\n    /**\n     * Parse the given context with the configured options.\n     * @param {JsonLdContext} context A context to parse.\n     * @param {JsonLdContextNormalized} parentContext An optional parent context.\n     * @param {boolean} ignoreProtection If @protected term checks should be ignored.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to the parsed context.\n     */\n    async parseContext(context, parentContext, ignoreProtection) {\n        return this.contextParser.parse(context, {\n            baseIRI: this.baseIRI,\n            ignoreProtection,\n            normalizeLanguageTags: this.normalizeLanguageTags,\n            parentContext,\n            processingMode: this.activeProcessingMode,\n        });\n    }\n    /**\n     * Check if the given context is valid.\n     * If not, an error will be thrown.\n     * @param {JsonLdContextNormalized} context A context.\n     */\n    validateContext(context) {\n        const activeVersion = context.getContextRaw()['@version'];\n        if (activeVersion) {\n            if (this.activeProcessingMode && activeVersion > this.activeProcessingMode) {\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD version '${activeVersion}' under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.PROCESSING_MODE_CONFLICT);\n            }\n            else {\n                if (this.activeProcessingMode && activeVersion < this.activeProcessingMode) {\n                    throw new ErrorCoded_1.ErrorCoded(`Invalid JSON-LD version ${activeVersion} under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);\n                }\n                this.activeProcessingMode = activeVersion;\n            }\n        }\n    }\n    /**\n     * Get the context at the given path.\n     * @param {keys} keys The path of keys to get the context at.\n     * @param {number} offset The path offset, defaults to 1.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to a context.\n     */\n    async getContext(keys, offset = 1) {\n        const keysOriginal = keys;\n        // Ignore array keys at the end\n        while (typeof keys[keys.length - 1] === 'number') {\n            keys = keys.slice(0, keys.length - 1);\n        }\n        // Handle offset on keys\n        if (offset) {\n            keys = keys.slice(0, -offset);\n        }\n        // Determine the closest context\n        const contextData = await this.getContextPropagationAware(keys);\n        const context = contextData.context;\n        // Process property-scoped contexts (high-to-low)\n        let contextRaw = context.getContextRaw();\n        for (let i = contextData.depth; i < keysOriginal.length - offset; i++) {\n            const key = keysOriginal[i];\n            const contextKeyEntry = contextRaw[key];\n            if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n                const scopedContext = (await this.parseContext(contextKeyEntry, contextRaw, true)).getContextRaw();\n                const propagate = !(key in scopedContext)\n                    || scopedContext[key]['@context']['@propagate']; // Propagation is true by default\n                if (propagate !== false || i === keysOriginal.length - 1 - offset) {\n                    contextRaw = scopedContext;\n                    // Clean up final context\n                    delete contextRaw['@propagate'];\n                    contextRaw[key] = Object.assign({}, contextRaw[key]);\n                    if ('@id' in contextKeyEntry) {\n                        contextRaw[key]['@id'] = contextKeyEntry['@id'];\n                    }\n                    delete contextRaw[key]['@context'];\n                    if (propagate !== false) {\n                        this.contextTree.setContext(keysOriginal.slice(0, i + offset), Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw)));\n                    }\n                }\n            }\n        }\n        return new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw);\n    }\n    /**\n     * Get the context at the given path.\n     * Non-propagating contexts will be skipped,\n     * unless the context at that exact depth is retrieved.\n     *\n     * This ONLY takes into account context propagation logic,\n     * so this should usually not be called directly,\n     * call {@link #getContext} instead.\n     *\n     * @param keys The path of keys to get the context at.\n     * @return {Promise<{ context: JsonLdContextNormalized, depth: number }>} A context and its depth.\n     */\n    async getContextPropagationAware(keys) {\n        const originalDepth = keys.length;\n        let contextData = null;\n        let hasApplicablePropertyScopedContext;\n        do {\n            hasApplicablePropertyScopedContext = false;\n            if (contextData && '@__propagateFallback' in contextData.context.getContextRaw()) {\n                // If a propagation fallback context has been set,\n                // fallback to that context and retry for the same depth.\n                contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized(contextData.context.getContextRaw()['@__propagateFallback']);\n            }\n            else {\n                if (contextData) {\n                    // If we had a previous iteration, jump to the parent of context depth.\n                    // We must do this because once we get here, last context had propagation disabled,\n                    // so we check its first parent instead.\n                    keys = keys.slice(0, contextData.depth - 1);\n                }\n                contextData = await this.contextTree.getContext(keys) || { context: await this.rootContext, depth: 0 };\n            }\n            // Allow non-propagating contexts to propagate one level deeper\n            // if it defines a property-scoped context that is applicable for the current key.\n            // @see https://w3c.github.io/json-ld-api/tests/toRdf-manifest#tc012\n            const lastKey = keys[keys.length - 1];\n            if (lastKey in contextData.context.getContextRaw()) {\n                const lastKeyValue = contextData.context.getContextRaw()[lastKey];\n                if (lastKeyValue && typeof lastKeyValue === 'object' && '@context' in lastKeyValue) {\n                    hasApplicablePropertyScopedContext = true;\n                }\n            }\n        } while (contextData.depth > 0 // Root context has a special case\n            && contextData.context.getContextRaw()['@propagate'] === false // Stop loop if propagation is true\n            && contextData.depth !== originalDepth // Stop loop if requesting exact depth of non-propagating\n            && !hasApplicablePropertyScopedContext);\n        // Special case for root context that does not allow propagation.\n        // Fallback to empty context in that case.\n        if (contextData.depth === 0\n            && contextData.context.getContextRaw()['@propagate'] === false\n            && contextData.depth !== originalDepth) {\n            contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized({});\n        }\n        return contextData;\n    }\n    /**\n     * Start a new job for parsing the given value.\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        await this.parser.newOnValueJob(keys, value, depth, lastDepthCheck);\n    }\n    /**\n     * Flush the pending container flush buffers\n     * @return {boolean} If any pending buffers were flushed.\n     */\n    async handlePendingContainerFlushBuffers() {\n        if (this.pendingContainerFlushBuffers.length > 0) {\n            for (const pendingFlushBuffer of this.pendingContainerFlushBuffers) {\n                await this.parser.flushBuffer(pendingFlushBuffer.depth, pendingFlushBuffer.keys);\n                this.parser.flushStacks(pendingFlushBuffer.depth);\n            }\n            this.pendingContainerFlushBuffers.splice(0, this.pendingContainerFlushBuffers.length);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Emit the given quad into the output stream.\n     * @param {number} depth The depth the quad was generated at.\n     * @param {Quad} quad A quad to emit.\n     */\n    emitQuad(depth, quad) {\n        if (depth === 1) {\n            this.topLevelProperties = true;\n        }\n        this.parser.push(quad);\n    }\n    /**\n     * Emit the given error into the output stream.\n     * @param {Error} error An error to emit.\n     */\n    emitError(error) {\n        this.parser.emit('error', error);\n    }\n    /**\n     * Emit the given context into the output stream under the 'context' event.\n     * @param {JsonLdContext} context A context to emit.\n     */\n    emitContext(context) {\n        this.parser.emit('context', context);\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedValuesBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedValuesBuffer}.\n     */\n    getUnidentifiedValueBufferSafe(depth) {\n        let buffer = this.unidentifiedValuesBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedValuesBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedGraphsBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedGraphsBuffer}.\n     */\n    getUnidentifiedGraphBufferSafe(depth) {\n        let buffer = this.unidentifiedGraphsBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedGraphsBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * @return IExpandOptions The expand options for the active processing mode.\n     */\n    getExpandOptions() {\n        return ParsingContext.EXPAND_OPTIONS[this.activeProcessingMode];\n    }\n    /**\n     * Shift the stack at the given offset to the given depth.\n     *\n     * This will override anything in the stack at `depth`,\n     * and this will remove anything at `depth + depthOffset`\n     *\n     * @param depth The target depth.\n     * @param depthOffset The origin depth, relative to `depth`.\n     */\n    shiftStack(depth, depthOffset) {\n        // Copy the id stack value up one level so that the next job can access the id.\n        const deeperIdStack = this.idStack[depth + depthOffset];\n        if (deeperIdStack) {\n            this.idStack[depth] = deeperIdStack;\n            this.emittedStack[depth] = true;\n            delete this.idStack[depth + depthOffset];\n        }\n        // Shorten key stack\n        if (this.pendingContainerFlushBuffers.length) {\n            for (const buffer of this.pendingContainerFlushBuffers) {\n                if (buffer.depth >= depth + depthOffset) {\n                    buffer.depth -= depthOffset;\n                    buffer.keys.splice(depth, depthOffset);\n                }\n            }\n        }\n        // Splice stacks\n        if (this.unidentifiedValuesBuffer[depth + depthOffset]) {\n            this.unidentifiedValuesBuffer[depth] = this.unidentifiedValuesBuffer[depth + depthOffset];\n            delete this.unidentifiedValuesBuffer[depth + depthOffset];\n        }\n        // TODO: also do the same for other stacks\n    }\n}\nexports.ParsingContext = ParsingContext;\nParsingContext.EXPAND_OPTIONS = {\n    1.0: {\n        allowPrefixForcing: false,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: false,\n    },\n    1.1: {\n        allowPrefixForcing: true,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: true,\n    },\n};\n//# sourceMappingURL=ParsingContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\n// tslint:disable-next-line:no-var-requires\nconst canonicalizeJson = require('canonicalize');\n/**\n * Utility functions and methods.\n */\nclass Util {\n    constructor(options) {\n        this.parsingContext = options.parsingContext;\n        this.dataFactory = options.dataFactory || new rdf_data_factory_1.DataFactory();\n        this.rdfFirst = this.dataFactory.namedNode(Util.RDF + 'first');\n        this.rdfRest = this.dataFactory.namedNode(Util.RDF + 'rest');\n        this.rdfNil = this.dataFactory.namedNode(Util.RDF + 'nil');\n        this.rdfType = this.dataFactory.namedNode(Util.RDF + 'type');\n        this.rdfJson = this.dataFactory.namedNode(Util.RDF + 'JSON');\n    }\n    /**\n     * Helper function to get the value of a context entry,\n     * or fallback to a certain value.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} contextKey A pre-defined JSON-LD key in context entries.\n     * @param {string} key A context entry key.\n     * @param {string} fallback A fallback value for when the given contextKey\n     *                          could not be found in the value with the given key.\n     * @return {string} The value of the given contextKey in the entry behind key in the given context,\n     *                  or the given fallback value.\n     */\n    static getContextValue(context, contextKey, key, fallback) {\n        const entry = context.getContextRaw()[key];\n        if (!entry) {\n            return fallback;\n        }\n        const type = entry[contextKey];\n        return type === undefined ? fallback : type;\n    }\n    /**\n     * Get the container type of the given key in the context.\n     *\n     * Should any context-scoping bugs should occur related to this in the future,\n     * it may be required to increase the offset from the depth at which the context is retrieved by one (to 2).\n     * This is because containers act 2 levels deep.\n     *\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The container type.\n     */\n    static getContextValueContainer(context, key) {\n        return Util.getContextValue(context, '@container', key, { '@set': true });\n    }\n    /**\n     * Get the value type of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueType(context, key) {\n        const valueType = Util.getContextValue(context, '@type', key, null);\n        if (valueType === '@none') {\n            return null;\n        }\n        return valueType;\n    }\n    /**\n     * Get the language of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueLanguage(context, key) {\n        return Util.getContextValue(context, '@language', key, context.getContextRaw()['@language'] || null);\n    }\n    /**\n     * Get the direction of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueDirection(context, key) {\n        return Util.getContextValue(context, '@direction', key, context.getContextRaw()['@direction'] || null);\n    }\n    /**\n     * Check if the given key in the context is a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {boolean} If the context value has a @reverse key.\n     */\n    static isContextValueReverse(context, key) {\n        return !!Util.getContextValue(context, '@reverse', key, null);\n    }\n    /**\n     * Get the @index of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The index.\n     */\n    static getContextValueIndex(context, key) {\n        return Util.getContextValue(context, '@index', key, context.getContextRaw()['@index'] || null);\n    }\n    /**\n     * Check if the given key refers to a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The property key.\n     * @param {string} parentKey The parent key.\n     * @return {boolean} If the property must be reversed.\n     */\n    static isPropertyReverse(context, key, parentKey) {\n        // '!==' is needed because reversed properties in a @reverse container should cancel each other out.\n        return parentKey === '@reverse' !== Util.isContextValueReverse(context, key);\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return iri !== null && jsonld_context_parser_1.Util.isValidIri(iri);\n    }\n    /**\n     * Check if the given first array (needle) is a prefix of the given second array (haystack).\n     * @param needle An array to check if it is a prefix.\n     * @param haystack An array to look in.\n     */\n    static isPrefixArray(needle, haystack) {\n        if (needle.length > haystack.length) {\n            return false;\n        }\n        for (let i = 0; i < needle.length; i++) {\n            if (needle[i] !== haystack[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Make sure that @id-@index pairs are equal over all array values.\n     * Reject otherwise.\n     * @param {any[]} value An array value.\n     * @return {Promise<void>} A promise rejecting if conflicts are present.\n     */\n    async validateValueIndexes(value) {\n        if (this.parsingContext.validateValueIndexes) {\n            const indexHashes = {};\n            for (const entry of value) {\n                if (entry && typeof entry === 'object') {\n                    const id = entry['@id'];\n                    const index = entry['@index'];\n                    if (id && index) {\n                        const existingIndexValue = indexHashes[id];\n                        if (existingIndexValue && existingIndexValue !== index) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Conflicting @index value for ${id}`, jsonld_context_parser_1.ERROR_CODES.CONFLICTING_INDEXES);\n                        }\n                        indexHashes[id] = index;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Convert a given JSON value to an RDF term.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param value A JSON value.\n     * @param {number} depth The depth the value is at.\n     * @param {string[]} keys The path of keys.\n     * @return {Promise<RDF.Term[]>} An RDF term array.\n     */\n    async valueToTerm(context, key, value, depth, keys) {\n        // Skip further processing if we have an @type: @json\n        if (Util.getContextValueType(context, key) === '@json') {\n            return [this.dataFactory.literal(this.valueToJsonString(value), this.rdfJson)];\n        }\n        const type = typeof value;\n        switch (type) {\n            case 'object':\n                // Skip if we have a null or undefined object\n                if (value === null || value === undefined) {\n                    return [];\n                }\n                // Special case for arrays\n                if (Array.isArray(value)) {\n                    // We handle arrays at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty context-based lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if ('@list' in Util.getContextValueContainer(context, key)) {\n                        if (value.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    await this.validateValueIndexes(value);\n                    return [];\n                }\n                // Handle property-scoped contexts\n                context = await this.getContextSelfOrPropertyScoped(context, key);\n                // Handle local context in the value\n                if ('@context' in value) {\n                    context = await this.parsingContext.parseContext(value['@context'], (await this.parsingContext.getContext(keys, 0)).getContextRaw());\n                }\n                // In all other cases, we have a hash\n                value = await this.unaliasKeywords(value, keys, depth, context); // Un-alias potential keywords in this hash\n                if ('@value' in value) {\n                    let val;\n                    let valueLanguage;\n                    let valueDirection;\n                    let valueType;\n                    let valueIndex; // We don't use the index, but we need to check its type for spec-compliance\n                    for (key in value) {\n                        const subValue = value[key];\n                        switch (key) {\n                            case '@value':\n                                val = subValue;\n                                break;\n                            case '@language':\n                                valueLanguage = subValue;\n                                break;\n                            case '@direction':\n                                valueDirection = subValue;\n                                break;\n                            case '@type':\n                                valueType = subValue;\n                                break;\n                            case '@index':\n                                valueIndex = subValue;\n                                break;\n                            default:\n                                throw new jsonld_context_parser_1.ErrorCoded(`Unknown value entry '${key}' in @value: ${JSON.stringify(value)}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                    }\n                    // Skip further processing if we have an @type: @json\n                    if (await this.unaliasKeyword(valueType, keys, depth, true, context) === '@json') {\n                        return [this.dataFactory.literal(this.valueToJsonString(val), this.rdfJson)];\n                    }\n                    // Validate @value\n                    if (val === null) {\n                        return [];\n                    }\n                    if (typeof val === 'object') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@value' can not be an object, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT_VALUE);\n                    }\n                    // Validate @index\n                    if (this.parsingContext.validateValueIndexes && valueIndex && typeof valueIndex !== 'string') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@index' must be a string, got '${JSON.stringify(valueIndex)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE);\n                    }\n                    // Validate @language and @direction\n                    if (valueLanguage) {\n                        if (typeof val !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`When an '@language' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_VALUE);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateLanguage(valueLanguage, this.parsingContext.strictValues, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_STRING)) {\n                            return [];\n                        }\n                        // Language tags are always normalized to lowercase in 1.0.\n                        if (this.parsingContext.normalizeLanguageTags || this.parsingContext.activeProcessingMode === 1.0) {\n                            valueLanguage = valueLanguage.toLowerCase();\n                        }\n                    }\n                    if (valueDirection) {\n                        if (typeof val !== 'string') {\n                            throw new Error(`When an '@direction' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateDirection(valueDirection, this.parsingContext.strictValues)) {\n                            return [];\n                        }\n                    }\n                    // Check @language and @direction\n                    if (valueLanguage && valueDirection && this.parsingContext.rdfDirection) {\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have '@language', '@direction' and '@type' in a value: '${JSON\n                                .stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueLanguage) { // Check @language\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@language' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return [this.dataFactory.literal(val, valueLanguage)];\n                    }\n                    else if (valueDirection && this.parsingContext.rdfDirection) { // Check @direction\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@direction' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueType) { // Validate @type\n                        if (typeof valueType !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        const typeTerm = this.createVocabOrBaseTerm(context, valueType);\n                        if (!typeTerm) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Invalid '@type' value, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        if (typeTerm.termType !== 'NamedNode') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Illegal value type (${typeTerm.termType}): ${valueType}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        return [this.dataFactory.literal(val, typeTerm)];\n                    }\n                    // We don't pass the context, because context-based things like @language should be ignored\n                    return await this.valueToTerm(new jsonld_context_parser_1.JsonLdContextNormalized({}), key, val, depth, keys);\n                }\n                else if ('@set' in value) {\n                    // No other entries are allow in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @set for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    // No need to do anything here, this is handled at the deeper level.\n                    return [];\n                }\n                else if ('@list' in value) {\n                    // No other entries are allowed in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    const listValue = value[\"@list\"];\n                    // We handle lists at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty anonymous lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if (Array.isArray(listValue)) {\n                        if (listValue.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    else {\n                        // We only have a single list element here, so emit this directly as single element\n                        return await this.valueToTerm(await this.parsingContext.getContext(keys), key, listValue, depth - 1, keys.slice(0, -1));\n                    }\n                }\n                else if ('@reverse' in value && typeof value['@reverse'] === 'boolean') {\n                    // We handle reverse properties at value level so we can emit earlier,\n                    // so this is handled already when we get here.\n                    return [];\n                }\n                else if ('@graph' in Util.getContextValueContainer(await this.parsingContext.getContext(keys), key)) {\n                    // We are processing a graph container\n                    const graphContainerEntries = this.parsingContext.graphContainerTermStack[depth + 1];\n                    return graphContainerEntries ? Object.values(graphContainerEntries) : [this.dataFactory.blankNode()];\n                }\n                else if (\"@id\" in value) {\n                    // Use deeper context if the value node contains other properties next to @id.\n                    if (Object.keys(value).length > 1) {\n                        context = await this.parsingContext.getContext(keys, 0);\n                    }\n                    // Handle local context in the value\n                    if ('@context' in value) {\n                        context = await this.parsingContext.parseContext(value['@context'], context.getContextRaw());\n                    }\n                    if (value[\"@type\"] === '@vocab') {\n                        return this.nullableTermToArray(this.createVocabOrBaseTerm(context, value[\"@id\"]));\n                    }\n                    else {\n                        return this.nullableTermToArray(this.resourceToTerm(context, value[\"@id\"]));\n                    }\n                }\n                else {\n                    // Only make a blank node if at least one triple was emitted at the value's level.\n                    if (this.parsingContext.emittedStack[depth + 1]\n                        || (value && typeof value === 'object' && Object.keys(value).length === 0)) {\n                        return (this.parsingContext.idStack[depth + 1]\n                            || (this.parsingContext.idStack[depth + 1] = [this.dataFactory.blankNode()]));\n                    }\n                    else {\n                        return [];\n                    }\n                }\n            case 'string':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, null));\n            case 'boolean':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, Boolean(value).toString(), this.dataFactory.namedNode(Util.XSD_BOOLEAN)));\n            case 'number':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, this.dataFactory.namedNode(value % 1 === 0 && value < 1e21 ? Util.XSD_INTEGER : Util.XSD_DOUBLE)));\n            default:\n                this.parsingContext.emitError(new Error(`Could not determine the RDF type of a ${type}`));\n                return [];\n        }\n    }\n    /**\n     * If the context defines a property-scoped context for the given key,\n     * that context will be returned.\n     * Otherwise, the given context will be returned as-is.\n     *\n     * This should be used for valueToTerm cases that are not objects.\n     * @param context A context.\n     * @param key A JSON key.\n     */\n    async getContextSelfOrPropertyScoped(context, key) {\n        const contextKeyEntry = context.getContextRaw()[key];\n        if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n            context = await this.parsingContext.parseContext(contextKeyEntry, context.getContextRaw(), true);\n        }\n        return context;\n    }\n    /**\n     * If the given term is null, return an empty array, otherwise return an array with the single given term.\n     * @param term A term.\n     */\n    nullableTermToArray(term) {\n        return term ? [term] : [];\n    }\n    /**\n     * Convert a given JSON key to an RDF predicate term,\n     * based on @vocab.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node.\n     */\n    predicateToTerm(context, key) {\n        const expanded = context.expandTerm(key, true, this.parsingContext.getExpandOptions());\n        // Immediately return if the predicate was disabled in the context\n        if (!expanded) {\n            return null;\n        }\n        // Check if the predicate is a blank node\n        if (expanded[0] === '_' && expanded[1] === ':') {\n            if (this.parsingContext.produceGeneralizedRdf) {\n                return this.dataFactory.blankNode(expanded.substr(2));\n            }\n            else {\n                return null;\n            }\n        }\n        // Check if the predicate is a valid IRI\n        if (Util.isValidIri(expanded)) {\n            return this.dataFactory.namedNode(expanded);\n        }\n        else {\n            if (expanded && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid predicate IRI: ${expanded}`, jsonld_context_parser_1.ERROR_CODES.INVALID_IRI_MAPPING));\n            }\n            else {\n                return null;\n            }\n        }\n        return null;\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term or blank node,\n     * based on @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    resourceToTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const iri = context.expandTerm(key, false, this.parsingContext.getExpandOptions());\n        if (!Util.isValidIri(iri)) {\n            if (iri && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new Error(`Invalid resource IRI: ${iri}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(iri);\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term.\n     * It will do this based on the @vocab,\n     * and fallback to @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    createVocabOrBaseTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const expandOptions = this.parsingContext.getExpandOptions();\n        let expanded = context.expandTerm(key, true, expandOptions);\n        if (expanded === key) {\n            expanded = context.expandTerm(key, false, expandOptions);\n        }\n        if (!Util.isValidIri(expanded)) {\n            if (expanded && this.parsingContext.strictValues && !expanded.startsWith('@')) {\n                this.parsingContext.emitError(new Error(`Invalid term IRI: ${expanded}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(expanded);\n    }\n    /**\n     * Ensure that the given value becomes a string.\n     * @param {string | number} value A string or number.\n     * @param {NamedNode} datatype The intended datatype.\n     * @return {string} The returned string.\n     */\n    intToString(value, datatype) {\n        if (typeof value === 'number') {\n            if (Number.isFinite(value)) {\n                const isInteger = value % 1 === 0;\n                if (isInteger && (!datatype || datatype.value !== Util.XSD_DOUBLE)) {\n                    return Number(value).toString();\n                }\n                else {\n                    return value.toExponential(15).replace(/(\\d)0*e\\+?/, '$1E');\n                }\n            }\n            else {\n                return value > 0 ? 'INF' : '-INF';\n            }\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * Convert a given JSON string value to an RDF term.\n     * @param {number} depth The current stack depth.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param {string} value A JSON value.\n     * @param {NamedNode} defaultDatatype The default datatype for the given value.\n     * @return {RDF.Term} An RDF term or null.\n     */\n    stringValueToTerm(depth, context, key, value, defaultDatatype) {\n        // Check the datatype from the context\n        const contextType = Util.getContextValueType(context, key);\n        if (contextType) {\n            if (contextType === '@id') {\n                if (!defaultDatatype) {\n                    return this.resourceToTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else if (contextType === '@vocab') {\n                if (!defaultDatatype) {\n                    return this.createVocabOrBaseTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else {\n                defaultDatatype = this.dataFactory.namedNode(contextType);\n            }\n        }\n        // If we don't find such a datatype, check the language from the context\n        if (!defaultDatatype) {\n            const contextLanguage = Util.getContextValueLanguage(context, key);\n            const contextDirection = Util.getContextValueDirection(context, key);\n            if (contextDirection && this.parsingContext.rdfDirection) {\n                return this.createLanguageDirectionLiteral(depth, this.intToString(value, defaultDatatype), contextLanguage, contextDirection);\n            }\n            else {\n                return this.dataFactory.literal(this.intToString(value, defaultDatatype), contextLanguage);\n            }\n        }\n        // If all else fails, make a literal based on the default content type\n        return this.dataFactory.literal(this.intToString(value, defaultDatatype), defaultDatatype);\n    }\n    /**\n     * Create a literal for the given value with the given language and direction.\n     * Auxiliary quads may be emitted.\n     * @param {number} depth The current stack depth.\n     * @param {string} value A string value.\n     * @param {string} language A language tag.\n     * @param {string} direction A direction.\n     * @return {Term} An RDF term.\n     */\n    createLanguageDirectionLiteral(depth, value, language, direction) {\n        if (this.parsingContext.rdfDirection === 'i18n-datatype') {\n            // Create a datatyped literal, by encoding the language and direction into https://www.w3.org/ns/i18n#.\n            if (!language) {\n                language = '';\n            }\n            return this.dataFactory.literal(value, this.dataFactory.namedNode(`https://www.w3.org/ns/i18n#${language}_${direction}`));\n        }\n        else {\n            // Reify the literal.\n            const valueNode = this.dataFactory.blankNode();\n            const graph = this.getDefaultGraph();\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'value'), this.dataFactory.literal(value), graph));\n            if (language) {\n                this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'language'), this.dataFactory.literal(language), graph));\n            }\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'direction'), this.dataFactory.literal(direction), graph));\n            return valueNode;\n        }\n    }\n    /**\n     * Stringify the given JSON object to a canonical JSON string.\n     * @param value Any valid JSON value.\n     * @return {string} A canonical JSON string.\n     */\n    valueToJsonString(value) {\n        return canonicalizeJson(value);\n    }\n    /**\n     * If the key is not a keyword, try to check if it is an alias for a keyword,\n     * and if so, un-alias it.\n     * @param {string} key A key, can be falsy.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth to\n     * @param {boolean} disableCache If the cache should be disabled\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<string>} A promise resolving to the key itself, or another key.\n     */\n    async unaliasKeyword(key, keys, depth, disableCache, context) {\n        // Numbers can not be an alias\n        if (Number.isInteger(key)) {\n            return key;\n        }\n        // Try to grab from cache if it was already un-aliased before.\n        if (!disableCache) {\n            const cachedUnaliasedKeyword = this.parsingContext.unaliasedKeywordCacheStack[depth];\n            if (cachedUnaliasedKeyword) {\n                return cachedUnaliasedKeyword;\n            }\n        }\n        if (!jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            context = context || await this.parsingContext.getContext(keys);\n            let unliased = context.getContextRaw()[key];\n            if (unliased && typeof unliased === 'object') {\n                unliased = unliased['@id'];\n            }\n            if (jsonld_context_parser_1.Util.isValidKeyword(unliased)) {\n                key = unliased;\n            }\n        }\n        return disableCache ? key : (this.parsingContext.unaliasedKeywordCacheStack[depth] = key);\n    }\n    /**\n     * Unalias the keyword of the parent.\n     * This adds a safety check if no parent exist.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<any>} A promise resolving to the parent key, or another key.\n     */\n    async unaliasKeywordParent(keys, depth) {\n        return await this.unaliasKeyword(depth > 0 && keys[depth - 1], keys, depth - 1);\n    }\n    /**\n     * Un-alias all keywords in the given hash.\n     * @param {{[p: string]: any}} hash A hash object.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth.\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<{[p: string]: any}>} A promise resolving to the new hash.\n     */\n    async unaliasKeywords(hash, keys, depth, context) {\n        const newHash = {};\n        for (const key in hash) {\n            newHash[await this.unaliasKeyword(key, keys, depth + 1, true, context)] = hash[key];\n        }\n        return newHash;\n    }\n    /**\n     * Check if we are processing a literal (including JSON literals) at the given depth.\n     * This will also check higher levels,\n     * because if a parent is a literal,\n     * then the deeper levels are definitely a literal as well.\n     * @param {number} depth The depth.\n     * @return {boolean} If we are processing a literal.\n     */\n    isLiteral(depth) {\n        for (let i = depth; i >= 0; i--) {\n            if (this.parsingContext.literalStack[i] || this.parsingContext.jsonLiteralStack[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Check how many parents should be skipped for checking the @graph for the given node.\n     *\n     * @param {number} depth The depth of the node.\n     * @param {any[]} keys An array of keys.\n     * @return {number} The graph depth offset.\n     */\n    async getDepthOffsetGraph(depth, keys) {\n        for (let i = depth - 1; i > 0; i--) {\n            if (await this.unaliasKeyword(keys[i], keys, i) === '@graph') {\n                // Skip further processing if we are already in an @graph-@id or @graph-@index container\n                const containers = (await EntryHandlerContainer_1.EntryHandlerContainer.getContainerHandler(this.parsingContext, keys, i)).containers;\n                if (EntryHandlerContainer_1.EntryHandlerContainer.isComplexGraphContainer(containers)) {\n                    return -1;\n                }\n                return depth - i - 1;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Check if the given subject is of a valid type.\n     * This should be called when applying @reverse'd properties.\n     * @param {Term} subject A subject.\n     */\n    validateReverseSubject(subject) {\n        if (subject.termType === 'Literal') {\n            throw new jsonld_context_parser_1.ErrorCoded(`Found illegal literal in subject position: ${subject.value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n        }\n    }\n    /**\n     * Get the default graph.\n     * @return {Term} An RDF term.\n     */\n    getDefaultGraph() {\n        return this.parsingContext.defaultGraph || this.dataFactory.defaultGraph();\n    }\n    /**\n     * Get the current graph, while taking into account a graph that can be defined via @container: @graph.\n     * If not within a graph container, the default graph will be returned.\n     * @param keys The current keys.\n     * @param depth The current depth.\n     */\n    async getGraphContainerValue(keys, depth) {\n        // Default to default graph\n        let graph = this.getDefaultGraph();\n        // Check if we are in an @container: @graph.\n        const { containers, depth: depthContainer } = await EntryHandlerContainer_1.EntryHandlerContainer\n            .getContainerHandler(this.parsingContext, keys, depth);\n        if ('@graph' in containers) {\n            // Get the graph from the stack.\n            const graphContainerIndex = EntryHandlerContainer_1.EntryHandlerContainer.getContainerGraphIndex(containers, depthContainer, keys);\n            const entry = this.parsingContext.graphContainerTermStack[depthContainer];\n            graph = entry ? entry[graphContainerIndex] : null;\n            // Set the graph in the stack if none has been set yet.\n            if (!graph) {\n                let graphId = null;\n                if ('@id' in containers) {\n                    const keyUnaliased = await this.getContainerKey(keys[depthContainer], keys, depthContainer);\n                    if (keyUnaliased !== null) {\n                        graphId = await this.resourceToTerm(await this.parsingContext.getContext(keys), keyUnaliased);\n                    }\n                }\n                if (!graphId) {\n                    graphId = this.dataFactory.blankNode();\n                }\n                if (!this.parsingContext.graphContainerTermStack[depthContainer]) {\n                    this.parsingContext.graphContainerTermStack[depthContainer] = {};\n                }\n                graph = this.parsingContext.graphContainerTermStack[depthContainer][graphContainerIndex] = graphId;\n            }\n        }\n        return graph;\n    }\n    /**\n     * Get the properties depth for retrieving properties.\n     *\n     * Typically, the properties depth will be identical to the given depth.\n     *\n     * The following exceptions apply:\n     * * When the parent is @reverse, the depth is decremented by one.\n     * * When @nest parents are found, the depth is decremented by the number of @nest parents.\n     * If in combination with the exceptions above an intermediary array is discovered,\n     * the depth is also decremented by this number of arrays.\n     *\n     * @param keys The current key chain.\n     * @param depth The current depth.\n     */\n    async getPropertiesDepth(keys, depth) {\n        let lastValidDepth = depth;\n        for (let i = depth - 1; i > 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                const parentKey = await this.unaliasKeyword(keys[i], keys, i);\n                if (parentKey === '@reverse') {\n                    return i;\n                }\n                else if (parentKey === '@nest') {\n                    lastValidDepth = i;\n                }\n                else {\n                    return lastValidDepth;\n                }\n            }\n        }\n        return lastValidDepth;\n    }\n    /**\n     * Get the key for the current container entry.\n     * @param key A key, can be falsy.\n     * @param keys The key chain.\n     * @param depth The current depth to get the key from.\n     * @return Promise resolving to the key.\n     *         Null will be returned for @none entries, with aliasing taken into account.\n     */\n    async getContainerKey(key, keys, depth) {\n        const keyUnaliased = await this.unaliasKeyword(key, keys, depth);\n        return keyUnaliased === '@none' ? null : keyUnaliased;\n    }\n}\nexports.Util = Util;\nUtil.XSD = 'http://www.w3.org/2001/XMLSchema#';\nUtil.XSD_BOOLEAN = Util.XSD + 'boolean';\nUtil.XSD_INTEGER = Util.XSD + 'integer';\nUtil.XSD_DOUBLE = Util.XSD + 'double';\nUtil.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\n//# sourceMappingURL=Util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIdentifier = void 0;\n/**\n * Container handler for @id.\n *\n * It assumes that the current key is the identifier of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerIdentifier {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        let id;\n        // First check if the child node already has a defined id.\n        if (parsingContext.emittedStack[depth + 1] && parsingContext.idStack[depth + 1]) {\n            // Use the existing identifier\n            id = parsingContext.idStack[depth + 1][0];\n        }\n        else {\n            // Create the identifier\n            const keyUnaliased = await util.getContainerKey(keys[depth], keys, depth);\n            const maybeId = keyUnaliased !== null\n                ? await util.resourceToTerm(await parsingContext.getContext(keys), keys[depth])\n                : util.dataFactory.blankNode();\n            // Do nothing if the id is invalid\n            if (!maybeId) {\n                parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n                return;\n            }\n            id = maybeId;\n            // Insert the id into the stack so that buffered children can make us of it.\n            parsingContext.idStack[depth + 1] = [id];\n        }\n        // Insert the id into the stack so that parents can make use of it.\n        // Insert it as an array because multiple id container entries may exist\n        let ids = parsingContext.idStack[depth];\n        if (!ids) {\n            ids = parsingContext.idStack[depth] = [];\n        }\n        // Only insert the term if it does not exist yet in the array.\n        if (!ids.some((term) => term.equals(id))) {\n            ids.push(id);\n        }\n        // Flush any pending flush buffers\n        if (!await parsingContext.handlePendingContainerFlushBuffers()) {\n            parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n        }\n    }\n}\nexports.ContainerHandlerIdentifier = ContainerHandlerIdentifier;\n//# sourceMappingURL=ContainerHandlerIdentifier.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIndex = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @index.\n *\n * This will ignore the current key and add this entry to the parent node.\n */\nclass ContainerHandlerIndex {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            const graphContainer = '@graph' in containers;\n            // Check if the container is a property-based container by checking if there is a valid @index.\n            const context = await parsingContext.getContext(keys);\n            const indexKey = keys[depth - 1];\n            const indexPropertyRaw = Util_1.Util.getContextValueIndex(context, indexKey);\n            if (indexPropertyRaw) {\n                // Validate the @index value\n                if (jsonld_context_parser_1.Util.isPotentialKeyword(indexPropertyRaw)) {\n                    throw new jsonld_context_parser_1.ErrorCoded(`Keywords can not be used as @index value, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                if (typeof indexPropertyRaw !== 'string') {\n                    throw new jsonld_context_parser_1.ErrorCoded(`@index values must be strings, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                // When @index is used, values must be node values, unless @type: @id is defined in the context\n                if (typeof value !== 'object') {\n                    // Error if we don't have @type: @id\n                    if (Util_1.Util.getContextValueType(context, indexKey) !== '@id') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Property-based index containers require nodes as values or strings with @type: @id, but got: ${value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                    }\n                    // Add an @id to the stack, so our expanded @index value can make use of it\n                    const id = util.resourceToTerm(context, value);\n                    if (id) {\n                        parsingContext.idStack[depth + 1] = [id];\n                    }\n                }\n                // Expand the @index value\n                const indexProperty = util.createVocabOrBaseTerm(context, indexPropertyRaw);\n                if (indexProperty) {\n                    const indexValues = await util.valueToTerm(context, indexPropertyRaw, await util.getContainerKey(keys[depth], keys, depth), depth, keys);\n                    if (graphContainer) {\n                        // When we're in a graph container, attach the index to the graph identifier\n                        const graphId = await util.getGraphContainerValue(keys, depth + 1);\n                        for (const indexValue of indexValues) {\n                            parsingContext.emitQuad(depth, util.dataFactory.quad(graphId, indexProperty, indexValue, util.getDefaultGraph()));\n                        }\n                    }\n                    else {\n                        // Otherwise, attach the index to the node identifier\n                        for (const indexValue of indexValues) {\n                            await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, indexProperty, indexValue, false);\n                        }\n                    }\n                }\n            }\n            const depthOffset = graphContainer ? 2 : 1;\n            await parsingContext.newOnValueJob(keys.slice(0, keys.length - depthOffset), value, depth - depthOffset, true);\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerIndex = ContainerHandlerIndex;\n//# sourceMappingURL=ContainerHandlerIndex.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerLanguage = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * Container handler for @language.\n *\n * It assumes that the current key is the language of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerLanguage {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        const language = await util.getContainerKey(keys[depth], keys, depth);\n        if (Array.isArray(value)) {\n            // No type-checking needed, will be handled on each value when this handler is called recursively.\n            value = value.map((subValue) => ({ '@value': subValue, '@language': language }));\n        }\n        else {\n            if (typeof value !== 'string') {\n                throw new jsonld_context_parser_1.ErrorCoded(`Got invalid language map value, got '${JSON.stringify(value)}', but expected string`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_MAP_VALUE);\n            }\n            value = { '@value': value, '@language': language };\n        }\n        await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerLanguage = ContainerHandlerLanguage;\n//# sourceMappingURL=ContainerHandlerLanguage.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerType = void 0;\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @type.\n *\n * This will add this entry to the parent node, and use the current key as an rdf:type value.\n */\nclass ContainerHandlerType {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            if (typeof value === 'string') {\n                // Determine the @type of the container\n                const context = await parsingContext.getContext(keys);\n                const containerTypeType = Util_1.Util.getContextValueType(context, keys[depth - 1]);\n                // String values refer to node references\n                const id = containerTypeType === '@vocab'\n                    ? await util.createVocabOrBaseTerm(context, value)\n                    : await util.resourceToTerm(context, value);\n                if (id) {\n                    // Handle the value of this node as @id, which will also cause the predicate from above to be emitted.\n                    const subValue = { '@id': id.termType === 'NamedNode' ? id.value : value };\n                    await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), subValue, depth - 1, true);\n                    // Set the id in the stack so it can be used for the rdf:type handling later on\n                    parsingContext.idStack[depth + 1] = [id];\n                }\n            }\n            else {\n                // Other values are handled by handling them as a proper job\n                // Check needed for cases where entries don't have an explicit @id\n                const entryHasIdentifier = !!parsingContext.idStack[depth + 1];\n                // Handle the value of this node, which will also cause the predicate from above to be emitted.\n                if (!entryHasIdentifier) {\n                    delete parsingContext.idStack[depth]; // Force new (blank node) identifier\n                }\n                await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n                if (!entryHasIdentifier) {\n                    parsingContext.idStack[depth + 1] = parsingContext.idStack[depth]; // Copy the id to the child node, for @type\n                }\n            }\n            // Identify the type to emit.\n            const keyOriginal = await util.getContainerKey(keys[depth], keys, depth);\n            const type = keyOriginal !== null\n                ? util.createVocabOrBaseTerm(await parsingContext.getContext(keys), keyOriginal)\n                : null;\n            if (type) {\n                // Push the type to the stack using the rdf:type predicate\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, util.rdfType, type, false);\n            }\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n    }\n}\nexports.ContainerHandlerType = ContainerHandlerType;\n//# sourceMappingURL=ContainerHandlerType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerArrayValue = void 0;\nconst Util_1 = require(\"../Util\");\n/**\n * Handles values that are part of an array.\n */\nclass EntryHandlerArrayValue {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return typeof keys[depth] === 'number';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        let parentKey = await util.unaliasKeywordParent(keys, depth);\n        // Check if we have an anonymous list\n        if (parentKey === '@list') {\n            // Our value is part of an array\n            // Determine the list root key\n            let listRootKey = null;\n            let listRootDepth = 0;\n            for (let i = depth - 2; i > 0; i--) {\n                const keyOption = keys[i];\n                if (typeof keyOption === 'string' || typeof keyOption === 'number') {\n                    listRootDepth = i;\n                    listRootKey = keyOption;\n                    break;\n                }\n            }\n            if (listRootKey !== null) {\n                // Emit the given objects as list elements\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), listRootKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n            }\n        }\n        else if (parentKey === '@set') {\n            // Our value is part of a set, so we just add it to the parent-parent\n            await parsingContext.newOnValueJob(keys.slice(0, -2), value, depth - 2, false);\n        }\n        else if (parentKey !== undefined && parentKey !== '@type') {\n            // Buffer our value using the parent key as predicate\n            // Determine the first parent key that is *not* an array key\n            // This is needed in case we have an @list container with nested arrays,\n            // where each of them should produce nested RDF lists.\n            for (let i = depth - 1; i > 0; i--) {\n                if (typeof keys[i] !== 'number') {\n                    parentKey = await util.unaliasKeyword(keys[i], keys, i);\n                    break;\n                }\n            }\n            // Check if the predicate is marked as an @list in the context\n            const parentContext = await parsingContext.getContext(keys.slice(0, -1));\n            if ('@list' in Util_1.Util.getContextValueContainer(parentContext, parentKey)) {\n                // Our value is part of an array\n                // Emit the given objects as list elements\n                parsingContext.emittedStack[depth + 1] = true; // Ensure the creation of bnodes for empty nodes\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), parentKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, -1), depth - 1);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, -1), depth - 1);\n                }\n            }\n            else {\n                // Copy the stack values up one level so that the next job can access them.\n                parsingContext.shiftStack(depth, 1);\n                // Execute the job one level higher\n                await parsingContext.newOnValueJob(keys.slice(0, -1), value, depth - 1, false);\n                // Remove any defined contexts at this level to avoid it to propagate to the next array element.\n                parsingContext.contextTree.removeContext(keys.slice(0, -1));\n            }\n        }\n    }\n    async handleListElement(parsingContext, util, value, valueOriginal, depth, listRootKeys, listRootDepth) {\n        // Buffer our value as an RDF list using the listRootKey as predicate\n        let listPointer = parsingContext.listPointerStack[depth];\n        if (valueOriginal !== null && (await util.unaliasKeywords(valueOriginal, listRootKeys, depth))['@value'] !== null) {\n            if (!listPointer || !listPointer.value) {\n                const linkTerm = util.dataFactory.blankNode();\n                listPointer = { value: linkTerm, listRootDepth, listId: linkTerm };\n            }\n            else {\n                // rdf:rest links are always emitted before the next element,\n                // as the blank node identifier is only created at that point.\n                // Because of this reason, the final rdf:nil is emitted when the stack depth is decreased.\n                const newLinkTerm = util.dataFactory.blankNode();\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfRest, newLinkTerm, util.getDefaultGraph()));\n                // Update the list pointer for the next element\n                listPointer.value = newLinkTerm;\n            }\n            // Emit a list element for the current value\n            // Omit rdf:first if the value is invalid\n            if (value) {\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfFirst, value, util.getDefaultGraph()));\n            }\n        }\n        else {\n            // A falsy list element if found.\n            // Mark it as an rdf:nil list until another valid list element comes in\n            if (!listPointer) {\n                listPointer = { listRootDepth, listId: util.rdfNil };\n            }\n        }\n        parsingContext.listPointerStack[depth] = listPointer;\n    }\n}\nexports.EntryHandlerArrayValue = EntryHandlerArrayValue;\n//# sourceMappingURL=EntryHandlerArrayValue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerContainer = void 0;\nconst ContainerHandlerIdentifier_1 = require(\"../containerhandler/ContainerHandlerIdentifier\");\nconst ContainerHandlerIndex_1 = require(\"../containerhandler/ContainerHandlerIndex\");\nconst ContainerHandlerLanguage_1 = require(\"../containerhandler/ContainerHandlerLanguage\");\nconst ContainerHandlerType_1 = require(\"../containerhandler/ContainerHandlerType\");\nconst Util_1 = require(\"../Util\");\n/**\n * Handles values that are part of a container type (like @index),\n * as specified by {@link IContainerHandler}.\n */\nclass EntryHandlerContainer {\n    /**\n     * Check fit the given container is a simple @graph container.\n     * Concretely, it will check if no @index or @id is active as well.\n     * @param containers A container hash.\n     */\n    static isSimpleGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length === 2) || Object.keys(containers).length === 1);\n    }\n    /**\n     * Check fit the given container is a complex @graph container.\n     * Concretely, it will check if @index or @id is active as well next to @graph.\n     * @param containers A container hash.\n     */\n    static isComplexGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length > 2)\n                || (!('@set' in containers) && Object.keys(containers).length > 1));\n    }\n    /**\n     * Create an graph container index that can be used for identifying a graph term inside the graphContainerTermStack.\n     * @param containers The applicable containers.\n     * @param depth The container depth.\n     * @param keys The array of keys.\n     * @return The graph index.\n     */\n    static getContainerGraphIndex(containers, depth, keys) {\n        let isSimpleGraphContainer = EntryHandlerContainer.isSimpleGraphContainer(containers);\n        let index = '';\n        for (let i = depth; i < keys.length; i++) {\n            if (!isSimpleGraphContainer || typeof keys[i] === 'number') {\n                index += ':' + keys[i];\n            }\n            // Only allow a second 'real' key if in a non-simple graph container.\n            if (!isSimpleGraphContainer && typeof keys[i] !== 'number') {\n                isSimpleGraphContainer = true;\n            }\n        }\n        return index;\n    }\n    /**\n     * Return the applicable container type at the given depth.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<{ containers: {[typeName: string]: boolean}, depth: number, fallback: boolean }>}\n     *          All applicable containers for the given depth,\n     *          the `depth` of the container root (can change when arrays are in the key chain),\n     *          and the `fallback` flag that indicates if the default container type was returned\n     *            (i.e., no dedicated container type is defined).\n     */\n    static async getContainerHandler(parsingContext, keys, depth) {\n        const fallback = {\n            containers: { '@set': true },\n            depth,\n            fallback: true,\n        };\n        // A flag that is enabled when @graph container should be tested in next iteration\n        let checkGraphContainer = false;\n        // Iterate from deeper to higher\n        const context = await parsingContext.getContext(keys, 2);\n        for (let i = depth - 1; i >= 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                // @graph containers without any other types are one level less deep, and require special handling\n                const containersSelf = Util_1.Util.getContextValue(context, '@container', keys[i], false);\n                if (containersSelf && EntryHandlerContainer.isSimpleGraphContainer(containersSelf)) {\n                    return {\n                        containers: containersSelf,\n                        depth: i + 1,\n                        fallback: false,\n                    };\n                }\n                const containersParent = Util_1.Util.getContextValue(context, '@container', keys[i - 1], false);\n                if (!containersParent) { // If we have the fallback container value\n                    if (checkGraphContainer) {\n                        // Return false if we were already expecting a @graph-@id of @graph-@index container\n                        return fallback;\n                    }\n                    // Check parent-parent, we may be in a @graph-@id of @graph-@index container, which have two levels\n                    checkGraphContainer = true;\n                }\n                else {\n                    // We had an invalid container next iteration, so we now have to check if we were in an @graph container\n                    const graphContainer = '@graph' in containersParent;\n                    // We're in a regular container\n                    for (const containerHandleName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n                        if (containersParent[containerHandleName]) {\n                            if (graphContainer) {\n                                // Only accept graph containers if their combined handlers can handle them.\n                                if (EntryHandlerContainer.CONTAINER_HANDLERS[containerHandleName].canCombineWithGraph()) {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                                else {\n                                    return fallback;\n                                }\n                            }\n                            else {\n                                // Only accept if we were not expecting a @graph-@id of @graph-@index container\n                                if (checkGraphContainer) {\n                                    return fallback;\n                                }\n                                else {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                            }\n                        }\n                    }\n                    // Fail if no valid container handlers were found\n                    return fallback;\n                }\n            }\n        }\n        return fallback;\n    }\n    /**\n     * Check if we are handling a value at the given depth\n     * that is part of something that should be handled as a container,\n     * AND if this container should be buffered, so that it can be handled by a dedicated container handler.\n     *\n     * For instance, any container with @graph will NOT be buffered.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<boolean>} If we are in the scope of a container handler.\n     */\n    static async isBufferableContainerHandler(parsingContext, keys, depth) {\n        const handler = await EntryHandlerContainer.getContainerHandler(parsingContext, keys, depth);\n        return !handler.fallback && !('@graph' in handler.containers);\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return !!await this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        const containers = Util_1.Util.getContextValueContainer(await parsingContext.getContext(keys, 2), keys[depth - 1]);\n        for (const containerName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n            if (containers[containerName]) {\n                return {\n                    containers,\n                    handler: EntryHandlerContainer.CONTAINER_HANDLERS[containerName],\n                };\n            }\n        }\n        return null;\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        return testResult.handler.handle(testResult.containers, parsingContext, util, keys, value, depth);\n    }\n}\nexports.EntryHandlerContainer = EntryHandlerContainer;\nEntryHandlerContainer.CONTAINER_HANDLERS = {\n    '@id': new ContainerHandlerIdentifier_1.ContainerHandlerIdentifier(),\n    '@index': new ContainerHandlerIndex_1.ContainerHandlerIndex(),\n    '@language': new ContainerHandlerLanguage_1.ContainerHandlerLanguage(),\n    '@type': new ContainerHandlerType_1.ContainerHandlerType(),\n};\n//# sourceMappingURL=EntryHandlerContainer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerInvalidFallback = void 0;\n/**\n * A catch-all for properties, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerInvalidFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return true;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerInvalidFallback = EntryHandlerInvalidFallback;\n//# sourceMappingURL=EntryHandlerInvalidFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerPredicate = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../Util\");\n/**\n * Interprets keys as predicates.\n * The most common case in JSON-LD processing.\n */\nclass EntryHandlerPredicate {\n    /**\n     * Handle the given predicate-object by either emitting it,\n     * or by placing it in the appropriate stack for later emission when no @graph and/or @id has been defined.\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {Util} util A utility instance.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @param {Term} predicate The predicate.\n     * @param {Term} object The object.\n     * @param {boolean} reverse If the property is reversed.\n     * @return {Promise<void>} A promise resolving when handling is done.\n     */\n    static async handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse) {\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        const depthOffsetGraph = await util.getDepthOffsetGraph(depth, keys);\n        const depthPropertiesGraph = depth - depthOffsetGraph;\n        const subjects = parsingContext.idStack[depthProperties];\n        if (subjects) {\n            // Emit directly if the @id was already defined\n            for (const subject of subjects) {\n                // Check if we're in a @graph context\n                const atGraph = depthOffsetGraph >= 0;\n                if (atGraph) {\n                    const graphs = parsingContext.idStack[depthPropertiesGraph - 1];\n                    if (graphs) {\n                        for (const graph of graphs) {\n                            // Emit our quad if graph @id is known\n                            if (reverse) {\n                                util.validateReverseSubject(object);\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(object, predicate, subject, graph));\n                            }\n                            else {\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(subject, predicate, object, graph));\n                            }\n                        }\n                    }\n                    else {\n                        // Buffer our triple if graph @id is not known yet.\n                        if (reverse) {\n                            util.validateReverseSubject(object);\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1).push({ subject: object, predicate, object: subject });\n                        }\n                        else {\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1)\n                                .push({ subject, predicate, object });\n                        }\n                    }\n                }\n                else {\n                    // Emit if no @graph was applicable\n                    const graph = await util.getGraphContainerValue(keys, depthProperties);\n                    if (reverse) {\n                        util.validateReverseSubject(object);\n                        parsingContext.emitQuad(depth, util.dataFactory.quad(object, predicate, subject, graph));\n                    }\n                    else {\n                        parsingContext.emitQuad(depth, util.dataFactory.quad(subject, predicate, object, graph));\n                    }\n                }\n            }\n        }\n        else {\n            // Buffer until our @id becomes known, or we go up the stack\n            if (reverse) {\n                util.validateReverseSubject(object);\n            }\n            parsingContext.getUnidentifiedValueBufferSafe(depthProperties).push({ predicate, object, reverse });\n        }\n    }\n    isPropertyHandler() {\n        return true;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = keys[depth];\n        if (key) {\n            const context = await parsingContext.getContext(keys);\n            if (!parsingContext.jsonLiteralStack[depth] && await util.predicateToTerm(context, keys[depth])) {\n                // If this valid predicate is of type @json, mark it so in the stack so that no deeper handling of nodes occurs.\n                if (Util_1.Util.getContextValueType(context, key) === '@json') {\n                    parsingContext.jsonLiteralStack[depth + 1] = true;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return keys[depth];\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        const keyOriginal = keys[depth];\n        const context = await parsingContext.getContext(keys);\n        const predicate = await util.predicateToTerm(context, key);\n        if (predicate) {\n            const objects = await util.valueToTerm(context, key, value, depth, keys);\n            if (objects.length) {\n                for (let object of objects) {\n                    const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, await util.unaliasKeywordParent(keys, depth));\n                    if (value) {\n                        // Special case if our term was defined as an @list, but does not occur in an array,\n                        // In that case we just emit it as an RDF list with a single element.\n                        const listValueContainer = '@list' in Util_1.Util.getContextValueContainer(context, key);\n                        if (listValueContainer || value['@list']) {\n                            if (((listValueContainer && !Array.isArray(value) && !value['@list'])\n                                || (value['@list'] && !Array.isArray(value['@list'])))\n                                && object !== util.rdfNil) {\n                                const listPointer = util.dataFactory.blankNode();\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfRest, util.rdfNil, util.getDefaultGraph()));\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfFirst, object, util.getDefaultGraph()));\n                                object = listPointer;\n                            }\n                            // Lists are not allowed in @reverse'd properties\n                            if (reverse && !parsingContext.allowSubjectList) {\n                                throw new jsonld_context_parser_1.ErrorCoded(`Found illegal list value in subject position at ${key}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n                            }\n                        }\n                    }\n                    await EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse);\n                }\n            }\n        }\n    }\n}\nexports.EntryHandlerPredicate = EntryHandlerPredicate;\n//# sourceMappingURL=EntryHandlerPredicate.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeyword = void 0;\n/**\n * An abstract keyword entry handler.\n */\nclass EntryHandlerKeyword {\n    constructor(keyword) {\n        this.keyword = keyword;\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return key === this.keyword;\n    }\n}\nexports.EntryHandlerKeyword = EntryHandlerKeyword;\n//# sourceMappingURL=EntryHandlerKeyword.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @context entries.\n */\nclass EntryHandlerKeywordContext extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@context');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // Error if an out-of-order context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (parsingContext.processingStack[depth]\n                || parsingContext.processingType[depth]\n                || parsingContext.idStack[depth] !== undefined)) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // Find the parent context to inherit from.\n        // We actually request a context for the current depth (with fallback to parent)\n        // because we want to take into account any property-scoped contexts that are defined for this depth.\n        const parentContext = parsingContext.getContext(keys);\n        // Set the context for this scope\n        const context = parsingContext.parseContext(value, (await parentContext).getContextRaw());\n        parsingContext.contextTree.setContext(keys.slice(0, -1), context);\n        parsingContext.emitContext(value);\n        await parsingContext.validateContext(await context);\n    }\n}\nexports.EntryHandlerKeywordContext = EntryHandlerKeywordContext;\n//# sourceMappingURL=EntryHandlerKeywordContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordGraph = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordGraph extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@graph');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // The current identifier identifies a graph for the deeper level.\n        parsingContext.graphStack[depth + 1] = true;\n    }\n}\nexports.EntryHandlerKeywordGraph = EntryHandlerKeywordGraph;\n//# sourceMappingURL=EntryHandlerKeywordGraph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordId = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @id entries.\n */\nclass EntryHandlerKeywordId extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@id');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'string') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE));\n        }\n        // Determine the canonical place for this id.\n        // For example, @nest parents should be ignored.\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        // Error if an @id for this node already existed.\n        if (parsingContext.idStack[depthProperties] !== undefined) {\n            if (parsingContext.idStack[depthProperties][0].listHead) {\n                // Error if an @list was already defined for this node\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${keys[depth - 1]}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT));\n            }\n            else {\n                // Otherwise, the previous id was just because of an @id entry.\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found duplicate @ids '${parsingContext\n                    .idStack[depthProperties][0].value}' and '${value}'`, jsonld_context_parser_1.ERROR_CODES.COLLIDING_KEYWORDS));\n            }\n        }\n        // Save our @id on the stack\n        parsingContext.idStack[depthProperties] = util.nullableTermToArray(await util.resourceToTerm(await parsingContext.getContext(keys), value));\n    }\n}\nexports.EntryHandlerKeywordId = EntryHandlerKeywordId;\n//# sourceMappingURL=EntryHandlerKeywordId.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordIncluded = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @included entries.\n */\nclass EntryHandlerKeywordIncluded extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@included');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @included '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        const valueUnliased = await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys));\n        if ('@value' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @value node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        if ('@list' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @list node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordIncluded = EntryHandlerKeywordIncluded;\n//# sourceMappingURL=EntryHandlerKeywordIncluded.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordNest = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @nest entries.\n */\nclass EntryHandlerKeywordNest extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@nest');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found invalid @nest entry for '${key}': '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        if ('@value' in await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys))) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an invalid @value node for '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordNest = EntryHandlerKeywordNest;\n//# sourceMappingURL=EntryHandlerKeywordNest.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordType = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../../Util\");\nconst EntryHandlerPredicate_1 = require(\"../EntryHandlerPredicate\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordType extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@type');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keyOriginal = keys[depth];\n        // The current identifier identifies an rdf:type predicate.\n        // But we only emit it once the node closes,\n        // as it's possible that the @type is used to identify the datatype of a literal, which we ignore here.\n        const context = await parsingContext.getContext(keys);\n        const predicate = util.rdfType;\n        const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, await util.unaliasKeywordParent(keys, depth));\n        // Handle multiple values if the value is an array\n        const elements = Array.isArray(value) ? value : [value];\n        for (const element of elements) {\n            if (typeof element !== 'string') {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @type '${element}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPE_VALUE));\n            }\n            const type = util.createVocabOrBaseTerm(context, element);\n            if (type) {\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, type, reverse);\n            }\n        }\n        // Collect type-scoped contexts if they exist\n        let scopedContext = Promise.resolve(context);\n        let hasTypedScopedContext = false;\n        for (const element of elements.sort()) { // Spec requires lexicographical ordering\n            const typeContext = Util_1.Util.getContextValue(context, '@context', element, null);\n            if (typeContext) {\n                hasTypedScopedContext = true;\n                scopedContext = scopedContext.then((c) => parsingContext.parseContext(typeContext, c.getContextRaw()));\n            }\n        }\n        // Error if an out-of-order type-scoped context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (hasTypedScopedContext || !parsingContext.streamingProfileAllowOutOfOrderPlainType)\n            && (parsingContext.processingStack[depth] || parsingContext.idStack[depth])) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order type-scoped context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // If at least least one type-scoped context applies, set them in the tree.\n        if (hasTypedScopedContext) {\n            // Do not propagate by default\n            scopedContext = scopedContext.then((c) => {\n                if (!('@propagate' in c.getContextRaw())) {\n                    c.getContextRaw()['@propagate'] = false;\n                }\n                // Set the original context at this depth as a fallback\n                // This is needed when a context was already defined at the given depth,\n                // and this context needs to remain accessible from child nodes when propagation is disabled.\n                if (c.getContextRaw()['@propagate'] === false) {\n                    c.getContextRaw()['@__propagateFallback'] = context.getContextRaw();\n                }\n                return c;\n            });\n            // Set the new context in the context tree\n            parsingContext.contextTree.setContext(keys.slice(0, keys.length - 1), scopedContext);\n        }\n        // Flag that type has been processed at this depth\n        parsingContext.processingType[depth] = true;\n    }\n}\nexports.EntryHandlerKeywordType = EntryHandlerKeywordType;\n//# sourceMappingURL=EntryHandlerKeywordType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordUnknownFallback = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * A catch-all for keywords, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerKeywordUnknownFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = await util.unaliasKeyword(keys[depth], keys, depth);\n        if (jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            // Don't emit anything inside free-floating lists\n            if (!inProperty) {\n                if (key === '@list') {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return jsonld_context_parser_1.Util.isPotentialKeyword(key);\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keywordType = EntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES[key];\n        if (keywordType !== undefined) {\n            if (keywordType && typeof value !== keywordType.type) {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid value type for '${key}' with value '${value}'`, keywordType.errorCode));\n            }\n        }\n        else if (parsingContext.strictValues) {\n            parsingContext.emitError(new Error(`Unknown keyword '${key}' with value '${value}'`));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordUnknownFallback = EntryHandlerKeywordUnknownFallback;\nEntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES = {\n    '@index': { type: 'string', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE },\n    '@list': null,\n    '@reverse': { type: 'object', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_VALUE },\n    '@set': null,\n    '@value': null,\n};\n//# sourceMappingURL=EntryHandlerKeywordUnknownFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordValue = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @value entries.\n */\nclass EntryHandlerKeywordValue extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@value');\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        // If this is @value, mark it so in the stack so that no deeper handling of nodes occurs.\n        const key = keys[depth];\n        if (key && !parsingContext.literalStack[depth] && await this.test(parsingContext, util, key, keys, depth)) {\n            parsingContext.literalStack[depth] = true;\n        }\n        return super.validate(parsingContext, util, keys, depth, inProperty);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return await util.unaliasKeyword(keys[depth], keys.slice(0, keys.length - 1), depth - 1, true) === '@value';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // If the value is valid, indicate that we are processing a literal.\n        // The actual value will be determined at the parent level when the @value is part of an object,\n        // because we may want to take into account additional entries such as @language.\n        // See {@link Util.valueToTerm}\n        // Indicate that we are processing a literal, and that no later predicates should be parsed at this depth.\n        parsingContext.literalStack[depth] = true;\n        // Void any buffers that we may have accumulated up until now\n        delete parsingContext.unidentifiedValuesBuffer[depth];\n        delete parsingContext.unidentifiedGraphsBuffer[depth];\n        // Indicate that we have not emitted at this depth\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordValue = EntryHandlerKeywordValue;\n//# sourceMappingURL=EntryHandlerKeywordValue.js.map","/*global Buffer*/\n// Named constants with unique integer values\nvar C = {};\n// Tokens\nvar LEFT_BRACE    = C.LEFT_BRACE    = 0x1;\nvar RIGHT_BRACE   = C.RIGHT_BRACE   = 0x2;\nvar LEFT_BRACKET  = C.LEFT_BRACKET  = 0x3;\nvar RIGHT_BRACKET = C.RIGHT_BRACKET = 0x4;\nvar COLON         = C.COLON         = 0x5;\nvar COMMA         = C.COMMA         = 0x6;\nvar TRUE          = C.TRUE          = 0x7;\nvar FALSE         = C.FALSE         = 0x8;\nvar NULL          = C.NULL          = 0x9;\nvar STRING        = C.STRING        = 0xa;\nvar NUMBER        = C.NUMBER        = 0xb;\n// Tokenizer States\nvar START   = C.START   = 0x11;\nvar STOP    = C.STOP    = 0x12;\nvar TRUE1   = C.TRUE1   = 0x21;\nvar TRUE2   = C.TRUE2   = 0x22;\nvar TRUE3   = C.TRUE3   = 0x23;\nvar FALSE1  = C.FALSE1  = 0x31;\nvar FALSE2  = C.FALSE2  = 0x32;\nvar FALSE3  = C.FALSE3  = 0x33;\nvar FALSE4  = C.FALSE4  = 0x34;\nvar NULL1   = C.NULL1   = 0x41;\nvar NULL2   = C.NULL2   = 0x42;\nvar NULL3   = C.NULL3   = 0x43;\nvar NUMBER1 = C.NUMBER1 = 0x51;\nvar NUMBER3 = C.NUMBER3 = 0x53;\nvar STRING1 = C.STRING1 = 0x61;\nvar STRING2 = C.STRING2 = 0x62;\nvar STRING3 = C.STRING3 = 0x63;\nvar STRING4 = C.STRING4 = 0x64;\nvar STRING5 = C.STRING5 = 0x65;\nvar STRING6 = C.STRING6 = 0x66;\n// Parser States\nvar VALUE   = C.VALUE   = 0x71;\nvar KEY     = C.KEY     = 0x72;\n// Parser Modes\nvar OBJECT  = C.OBJECT  = 0x81;\nvar ARRAY   = C.ARRAY   = 0x82;\n// Character constants\nvar BACK_SLASH =      \"\\\\\".charCodeAt(0);\nvar FORWARD_SLASH =   \"\\/\".charCodeAt(0);\nvar BACKSPACE =       \"\\b\".charCodeAt(0);\nvar FORM_FEED =       \"\\f\".charCodeAt(0);\nvar NEWLINE =         \"\\n\".charCodeAt(0);\nvar CARRIAGE_RETURN = \"\\r\".charCodeAt(0);\nvar TAB =             \"\\t\".charCodeAt(0);\n\nvar STRING_BUFFER_SIZE = 64 * 1024;\n\nfunction Parser() {\n  this.tState = START;\n  this.value = undefined;\n\n  this.string = undefined; // string data\n  this.stringBuffer = Buffer.alloc ? Buffer.alloc(STRING_BUFFER_SIZE) : new Buffer(STRING_BUFFER_SIZE);\n  this.stringBufferOffset = 0;\n  this.unicode = undefined; // unicode escapes\n  this.highSurrogate = undefined;\n\n  this.key = undefined;\n  this.mode = undefined;\n  this.stack = [];\n  this.state = VALUE;\n  this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary\n  this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read\n  this.temp_buffs = { \"2\": new Buffer(2), \"3\": new Buffer(3), \"4\": new Buffer(4) }; // for rebuilding chars split before boundary is reached\n\n  // Stream offset\n  this.offset = -1;\n}\n\n// Slow code to string converter (only used when throwing syntax errors)\nParser.toknam = function (code) {\n  var keys = Object.keys(C);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    if (C[key] === code) { return key; }\n  }\n  return code && (\"0x\" + code.toString(16));\n};\n\nvar proto = Parser.prototype;\nproto.onError = function (err) { throw err; };\nproto.charError = function (buffer, i) {\n  this.tState = STOP;\n  this.onError(new Error(\"Unexpected \" + JSON.stringify(String.fromCharCode(buffer[i])) + \" at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n};\nproto.appendStringChar = function (char) {\n  if (this.stringBufferOffset >= STRING_BUFFER_SIZE) {\n    this.string += this.stringBuffer.toString('utf8');\n    this.stringBufferOffset = 0;\n  }\n\n  this.stringBuffer[this.stringBufferOffset++] = char;\n};\nproto.appendStringBuf = function (buf, start, end) {\n  var size = buf.length;\n  if (typeof start === 'number') {\n    if (typeof end === 'number') {\n      if (end < 0) {\n        // adding a negative end decreeses the size\n        size = buf.length - start + end;\n      } else {\n        size = end - start;\n      }\n    } else {\n      size = buf.length - start;\n    }\n  }\n\n  if (size < 0) {\n    size = 0;\n  }\n\n  if (this.stringBufferOffset + size > STRING_BUFFER_SIZE) {\n    this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);\n    this.stringBufferOffset = 0;\n  }\n\n  buf.copy(this.stringBuffer, this.stringBufferOffset, start, end);\n  this.stringBufferOffset += size;\n};\nproto.write = function (buffer) {\n  if (typeof buffer === \"string\") buffer = new Buffer(buffer);\n  var n;\n  for (var i = 0, l = buffer.length; i < l; i++) {\n    if (this.tState === START){\n      n = buffer[i];\n      this.offset++;\n      if(n === 0x7b){ this.onToken(LEFT_BRACE, \"{\"); // {\n      }else if(n === 0x7d){ this.onToken(RIGHT_BRACE, \"}\"); // }\n      }else if(n === 0x5b){ this.onToken(LEFT_BRACKET, \"[\"); // [\n      }else if(n === 0x5d){ this.onToken(RIGHT_BRACKET, \"]\"); // ]\n      }else if(n === 0x3a){ this.onToken(COLON, \":\");  // :\n      }else if(n === 0x2c){ this.onToken(COMMA, \",\"); // ,\n      }else if(n === 0x74){ this.tState = TRUE1;  // t\n      }else if(n === 0x66){ this.tState = FALSE1;  // f\n      }else if(n === 0x6e){ this.tState = NULL1; // n\n      }else if(n === 0x22){ // \"\n        this.string = \"\";\n        this.stringBufferOffset = 0;\n        this.tState = STRING1;\n      }else if(n === 0x2d){ this.string = \"-\"; this.tState = NUMBER1; // -\n      }else{\n        if (n >= 0x30 && n < 0x40) { // 1-9\n          this.string = String.fromCharCode(n); this.tState = NUMBER3;\n        } else if (n === 0x20 || n === 0x09 || n === 0x0a || n === 0x0d) {\n          // whitespace\n        } else {\n          return this.charError(buffer, i);\n        }\n      }\n    }else if (this.tState === STRING1){ // After open quote\n      n = buffer[i]; // get current byte from buffer\n      // check for carry over of a multi byte char split between data chunks\n      // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration\n      if (this.bytes_remaining > 0) {\n        for (var j = 0; j < this.bytes_remaining; j++) {\n          this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = buffer[j];\n        }\n\n        this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]);\n        this.bytes_in_sequence = this.bytes_remaining = 0;\n        i = i + j - 1;\n      } else if (this.bytes_remaining === 0 && n >= 128) { // else if no remainder bytes carried over, parse multi byte (>=128) chars one at a time\n        if (n <= 193 || n > 244) {\n          return this.onError(new Error(\"Invalid UTF-8 character at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n        }\n        if ((n >= 194) && (n <= 223)) this.bytes_in_sequence = 2;\n        if ((n >= 224) && (n <= 239)) this.bytes_in_sequence = 3;\n        if ((n >= 240) && (n <= 244)) this.bytes_in_sequence = 4;\n        if ((this.bytes_in_sequence + i) > buffer.length) { // if bytes needed to complete char fall outside buffer length, we have a boundary split\n          for (var k = 0; k <= (buffer.length - 1 - i); k++) {\n            this.temp_buffs[this.bytes_in_sequence][k] = buffer[i + k]; // fill temp buffer of correct size with bytes available in this chunk\n          }\n          this.bytes_remaining = (i + this.bytes_in_sequence) - buffer.length;\n          i = buffer.length - 1;\n        } else {\n          this.appendStringBuf(buffer, i, i + this.bytes_in_sequence);\n          i = i + this.bytes_in_sequence - 1;\n        }\n      } else if (n === 0x22) {\n        this.tState = START;\n        this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);\n        this.stringBufferOffset = 0;\n        this.onToken(STRING, this.string);\n        this.offset += Buffer.byteLength(this.string, 'utf8') + 1;\n        this.string = undefined;\n      }\n      else if (n === 0x5c) {\n        this.tState = STRING2;\n      }\n      else if (n >= 0x20) { this.appendStringChar(n); }\n      else {\n          return this.charError(buffer, i);\n      }\n    }else if (this.tState === STRING2){ // After backslash\n      n = buffer[i];\n      if(n === 0x22){ this.appendStringChar(n); this.tState = STRING1;\n      }else if(n === 0x5c){ this.appendStringChar(BACK_SLASH); this.tState = STRING1;\n      }else if(n === 0x2f){ this.appendStringChar(FORWARD_SLASH); this.tState = STRING1;\n      }else if(n === 0x62){ this.appendStringChar(BACKSPACE); this.tState = STRING1;\n      }else if(n === 0x66){ this.appendStringChar(FORM_FEED); this.tState = STRING1;\n      }else if(n === 0x6e){ this.appendStringChar(NEWLINE); this.tState = STRING1;\n      }else if(n === 0x72){ this.appendStringChar(CARRIAGE_RETURN); this.tState = STRING1;\n      }else if(n === 0x74){ this.appendStringChar(TAB); this.tState = STRING1;\n      }else if(n === 0x75){ this.unicode = \"\"; this.tState = STRING3;\n      }else{\n        return this.charError(buffer, i);\n      }\n    }else if (this.tState === STRING3 || this.tState === STRING4 || this.tState === STRING5 || this.tState === STRING6){ // unicode hex codes\n      n = buffer[i];\n      // 0-9 A-F a-f\n      if ((n >= 0x30 && n < 0x40) || (n > 0x40 && n <= 0x46) || (n > 0x60 && n <= 0x66)) {\n        this.unicode += String.fromCharCode(n);\n        if (this.tState++ === STRING6) {\n          var intVal = parseInt(this.unicode, 16);\n          this.unicode = undefined;\n          if (this.highSurrogate !== undefined && intVal >= 0xDC00 && intVal < (0xDFFF + 1)) { //<56320,57343> - lowSurrogate\n            this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate, intVal)));\n            this.highSurrogate = undefined;\n          } else if (this.highSurrogate === undefined && intVal >= 0xD800 && intVal < (0xDBFF + 1)) { //<55296,56319> - highSurrogate\n            this.highSurrogate = intVal;\n          } else {\n            if (this.highSurrogate !== undefined) {\n              this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate)));\n              this.highSurrogate = undefined;\n            }\n            this.appendStringBuf(new Buffer(String.fromCharCode(intVal)));\n          }\n          this.tState = STRING1;\n        }\n      } else {\n        return this.charError(buffer, i);\n      }\n    } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {\n        n = buffer[i];\n\n        switch (n) {\n          case 0x30: // 0\n          case 0x31: // 1\n          case 0x32: // 2\n          case 0x33: // 3\n          case 0x34: // 4\n          case 0x35: // 5\n          case 0x36: // 6\n          case 0x37: // 7\n          case 0x38: // 8\n          case 0x39: // 9\n          case 0x2e: // .\n          case 0x65: // e\n          case 0x45: // E\n          case 0x2b: // +\n          case 0x2d: // -\n            this.string += String.fromCharCode(n);\n            this.tState = NUMBER3;\n            break;\n          default:\n            this.tState = START;\n            var result = Number(this.string);\n\n            if (isNaN(result)){\n              return this.charError(buffer, i);\n            }\n\n            if ((this.string.match(/[0-9]+/) == this.string) && (result.toString() != this.string)) {\n              // Long string of digits which is an ID string and not valid and/or safe JavaScript integer Number\n              this.onToken(STRING, this.string);\n            } else {\n              this.onToken(NUMBER, result);\n            }\n\n            this.offset += this.string.length - 1;\n            this.string = undefined;\n            i--;\n            break;\n        }\n    }else if (this.tState === TRUE1){ // r\n      if (buffer[i] === 0x72) { this.tState = TRUE2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === TRUE2){ // u\n      if (buffer[i] === 0x75) { this.tState = TRUE3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === TRUE3){ // e\n      if (buffer[i] === 0x65) { this.tState = START; this.onToken(TRUE, true); this.offset+= 3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE1){ // a\n      if (buffer[i] === 0x61) { this.tState = FALSE2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE2){ // l\n      if (buffer[i] === 0x6c) { this.tState = FALSE3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE3){ // s\n      if (buffer[i] === 0x73) { this.tState = FALSE4; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE4){ // e\n      if (buffer[i] === 0x65) { this.tState = START; this.onToken(FALSE, false); this.offset+= 4; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL1){ // u\n      if (buffer[i] === 0x75) { this.tState = NULL2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL2){ // l\n      if (buffer[i] === 0x6c) { this.tState = NULL3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL3){ // l\n      if (buffer[i] === 0x6c) { this.tState = START; this.onToken(NULL, null); this.offset += 3; }\n      else { return this.charError(buffer, i); }\n    }\n  }\n};\nproto.onToken = function (token, value) {\n  // Override this to get events\n};\n\nproto.parseError = function (token, value) {\n  this.tState = STOP;\n  this.onError(new Error(\"Unexpected \" + Parser.toknam(token) + (value ? (\"(\" + JSON.stringify(value) + \")\") : \"\") + \" in state \" + Parser.toknam(this.state)));\n};\nproto.push = function () {\n  this.stack.push({value: this.value, key: this.key, mode: this.mode});\n};\nproto.pop = function () {\n  var value = this.value;\n  var parent = this.stack.pop();\n  this.value = parent.value;\n  this.key = parent.key;\n  this.mode = parent.mode;\n  this.emit(value);\n  if (!this.mode) { this.state = VALUE; }\n};\nproto.emit = function (value) {\n  if (this.mode) { this.state = COMMA; }\n  this.onValue(value);\n};\nproto.onValue = function (value) {\n  // Override me\n};\nproto.onToken = function (token, value) {\n  if(this.state === VALUE){\n    if(token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL){\n      if (this.value) {\n        this.value[this.key] = value;\n      }\n      this.emit(value);\n    }else if(token === LEFT_BRACE){\n      this.push();\n      if (this.value) {\n        this.value = this.value[this.key] = {};\n      } else {\n        this.value = {};\n      }\n      this.key = undefined;\n      this.state = KEY;\n      this.mode = OBJECT;\n    }else if(token === LEFT_BRACKET){\n      this.push();\n      if (this.value) {\n        this.value = this.value[this.key] = [];\n      } else {\n        this.value = [];\n      }\n      this.key = 0;\n      this.mode = ARRAY;\n      this.state = VALUE;\n    }else if(token === RIGHT_BRACE){\n      if (this.mode === OBJECT) {\n        this.pop();\n      } else {\n        return this.parseError(token, value);\n      }\n    }else if(token === RIGHT_BRACKET){\n      if (this.mode === ARRAY) {\n        this.pop();\n      } else {\n        return this.parseError(token, value);\n      }\n    }else{\n      return this.parseError(token, value);\n    }\n  }else if(this.state === KEY){\n    if (token === STRING) {\n      this.key = value;\n      this.state = COLON;\n    } else if (token === RIGHT_BRACE) {\n      this.pop();\n    } else {\n      return this.parseError(token, value);\n    }\n  }else if(this.state === COLON){\n    if (token === COLON) { this.state = VALUE; }\n    else { return this.parseError(token, value); }\n  }else if(this.state === COMMA){\n    if (token === COMMA) {\n      if (this.mode === ARRAY) { this.key++; this.state = VALUE; }\n      else if (this.mode === OBJECT) { this.state = KEY; }\n\n    } else if (token === RIGHT_BRACKET && this.mode === ARRAY || token === RIGHT_BRACE && this.mode === OBJECT) {\n      this.pop();\n    } else {\n      return this.parseError(token, value);\n    }\n  }else{\n    return this.parseError(token, value);\n  }\n};\n\nParser.C = C;\n\nmodule.exports = Parser;\n"],"names":["Sink","ParserStream","Parser","constructor","options","super","module","exports","rdf","JsonLdParser","Transform","relativeIriProtocol","termCleanup","factory","term","termType","value","startsWith","namedNode","slice","length","quadCleanup","cleanup","quad","subject","predicate","object","graph","input","baseIRI","context","parser","dataFactory","streamingProfile","pipe","transform","objectMode","encoding","callback","on","Object","entries","forEach","prefix","iri","emit","err","destroy","Impl","this","import","output","assign","readable","serialize","toJSON","JSON","stringify","Array","isArray","reduce","t","cv","ci","comma","undefined","keys","sort","self","support","searchParams","iterable","Symbol","blob","Blob","e","formData","arrayBuffer","isDataView","obj","DataView","prototype","isPrototypeOf","viewClasses","isArrayBufferView","ArrayBuffer","isView","indexOf","toString","call","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","iteratorFor","items","iterator","next","shift","done","Headers","headers","map","append","header","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","result","onerror","error","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","buf","view","Uint8Array","chars","i","fromCharCode","join","bufferClone","byteLength","set","buffer","Body","_initBody","_bodyInit","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","get","type","rejected","Error","then","text","decode","json","parse","oldValue","has","hasOwnProperty","thisArg","push","values","methods","normalizeMethod","method","upcased","toUpperCase","Request","url","credentials","mode","signal","referrer","form","trim","split","bytes","replace","decodeURIComponent","parseHeaders","rawHeaders","preProcessedHeaders","line","parts","key","Response","bodyInit","status","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","DOMException","message","stack","create","fetch","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","defineProperty","COMPATIBLE_ENCODING_PATTERN","WS_TRIM_PATTERN","WS_CHAR_PATTERN","WS_FOLD_PATTERN","DELIMITER_PATTERN","WS_DELIMITER_PATTERN","TOKEN_PATTERN","STATE","IDLE","URI","ATTR","hasWhitespace","skipWhitespace","offset","needsQuotes","shallowCompareObjects","object1","object2","every","Link","refs","rel","links","attr","link","setUnique","some","ref","state","expandRelations","end","uri","attrValue","isSingleOccurenceAttr","parseExtendedValue","formatAttribute","isCompatibleEncoding","isTokenAttr","escapeQuotes","rels","exec","language","formatExtendedAttribute","data","encodedValue","Buffer","isBuffer","encodeURIComponent","item","__createBinding","o","m","k","k2","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","__exportStar","p","defaultExpandOptions","ContextParser","relative_to_absolute_iri_1","ErrorCoded_1","FetchDocumentLoader_1","JsonLdContextNormalized_1","Util_1","canonicalizeJson","documentLoader","FetchDocumentLoader","documentCache","validateContext","skipValidation","expandContentTypeToBase","remoteContextsDepthLimit","redirectSchemaOrgHttps","static","strictRange","errorCode","ErrorCoded","Util","REGEX_LANGUAGE_TAG","strictValues","ERROR_CODES","INVALID_BASE_DIRECTION","REGEX_DIRECTION_TAG","idifyReverseTerms","isValidKeyword","INVALID_IRI_MAPPING","isPotentialKeyword","expandPrefixedTerms","contextRaw","getContextRaw","EXPAND_KEYS_BLACKLIST","isReservedInternalKeyword","keyValue","ALIAS_DOMAIN_BLACKLIST","KEYWORD_REDEFINITION","ALIAS_RANGE_BLACKLIST","getContextValueId","INVALID_KEYWORD_ALIAS","INVALID_TERM_DEFINITION","isPrefixValue","changed","expandTerm","id","canAddIdEntry","isValidIri","newId","normalize","processingMode","normalizeLanguageTags","containersToHash","newValue","containerValue","applyScopedProtected","isTermProtected","validateKeywordRedefinitions","contextBefore","contextAfter","expandOptions","isPrefix","isSimpleTermDefinitionPrefix","valueBefore","valueAfter","PROTECTED_TERM_REDEFINITION","validate","valueType","substr","INVALID_VOCAB_MAPPING","INVALID_BASE_IRI","validateLanguage","INVALID_DEFAULT_LANGUAGE","INVALID_VERSION_VALUE","validateDirection","INVALID_CONTEXT_ENTRY","INVALID_PROPAGATE_VALUE","getPrefix","CYCLIC_IRI_MAPPING","isValidIriWeak","JsonLdContextNormalized","isCompactIri","objectKey","objectValue","INVALID_TYPE_MAPPING","INVALID_REVERSE_PROPERTY","CONTAINERS_1_0","INVALID_CONTAINER_MAPPING","CONTAINERS","INVALID_LANGUAGE_MAPPING","INVALID_PREFIX_VALUE","INVALID_NEST_VALUE","applyBaseEntry","inheritFromParent","parentContext","external","normalizeContextIri","contextIri","_a","async","ignoreScopedContexts","ignoreProtection","ignoreRemoteScopedContexts","INVALID_SCOPED_CONTEXT","minimalProcessing","parentContextInitial","DEFAULT_PROCESSING_MODE","remoteContexts","CONTEXT_OVERFLOW","hasProtectedTerms","INVALID_CONTEXT_NULLIFICATION","overriddenLoad","getOverriddenLoad","parsedStringContext","load","contextIris","contexts","all","subContext","reducedContexts","accContextPromise","contextEntry","accContext","newContext","importContext","INVALID_IMPORT_VALUE","loadImportContext","newContextWrapped","parseInnerContexts","INVALID_LOCAL_CONTEXT","cached","document","LOADING_REMOTE_CONTEXT_FAILED","INVALID_REMOTE_CONTEXT","RECURSIVE_CONTEXT_INCLUSION","importContextIri","allowPrefixForcing","allowPrefixNonGenDelims","allowVocabRelativeToBase","code","http_link_header_1","fetcher","accept","mediaType","colonPos","alternateUrl","linkHeader","LOADING_DOCUMENT_FAILED","ContextParser_1","expandVocab","contextValue","validIriMapping","vocab","vocabRelative","base","potentialKeyword","contextPrefixValue","compactIri","shortestPrefixing","suffix","separatorPos","charAt","isPrefixIriEndingWithGenDelim","keyword","KEYWORD_REGEX","prefixIri","ENDS_WITH_GEN_DELIM","Boolean","IRI_REGEX","IRI_REGEX_WEAK","VALID_KEYWORDS","ContextTree","subTrees","getContext","head","tail","subTree","depth","setContext","removeContext","path","jsonld_context_parser_1","stream_1","EntryHandlerArrayValue_1","EntryHandlerContainer_1","EntryHandlerInvalidFallback_1","EntryHandlerPredicate_1","EntryHandlerKeywordContext_1","EntryHandlerKeywordGraph_1","EntryHandlerKeywordId_1","EntryHandlerKeywordIncluded_1","EntryHandlerKeywordNest_1","EntryHandlerKeywordType_1","EntryHandlerKeywordUnknownFallback_1","EntryHandlerKeywordValue_1","ParsingContext_1","readableObjectMode","parsingContext","ParsingContext","util","jsonParser","contextJobs","typeJobs","contextAwaitingJobs","lastDepth","lastKeys","lastOnValueJob","attachJsonParserListeners","endsWith","MULTIPLE_CONTEXT_LINK_HEADERS","ignoreMissingContextLinkHeader","contentType","match","stream","PassThrough","parsed","_transform","chunk","write","lastDepthCheck","flushStacks","listPointer","listPointerStack","rdfRest","rdfNil","getDefaultGraph","listId","listHead","idStack","listRootDepth","splice","EntryHandlerContainer","isBufferableContainerHandler","pendingContainerFlushBuffers","flushBuffer","unaliasKeyword","parentKey","unaliasKeywordParent","emittedStack","handleKey","INVALID_REVERSE_PROPERTY_MAP","inProperty","validationStack","property","Math","max","validationResult","validateKey","valid","isLiteral","entryHandler","ENTRY_HANDLERS","testResult","handle","isStackProcessor","processingStack","validateValueIndexes","unaliasedKeywordCacheStack","processingType","graphStack","graphContainerTermStack","jsonLiteralStack","literalStack","subjects","blankNode","valueBuffer","unidentifiedValuesBuffer","depthOffsetGraph","getDepthOffsetGraph","graphs","getGraphContainerValue","bufferedValue","reverse","emitQuad","subGraphBuffer","getUnidentifiedGraphBufferSafe","graphBuffer","unidentifiedGraphsBuffer","topLevelProperties","isPropertyHandler","onValue","fill","v","isParsingContextInner","valueJobCb","newOnValueJob","contextTree","jobs","job","executeBufferedJobs","onError","applicableTypeJobs","applicableTypeJobIds","typeJob","isPrefixArray","sortedTypeJobs","job1","job2","sortedApplicableTypeJobIds","jobId","EntryHandlerArrayValue","EntryHandlerKeywordContext","EntryHandlerKeywordId","EntryHandlerKeywordIncluded","EntryHandlerKeywordGraph","EntryHandlerKeywordNest","EntryHandlerKeywordType","EntryHandlerKeywordValue","EntryHandlerKeywordUnknownFallback","EntryHandlerPredicate","EntryHandlerInvalidFallback","ContextTree_1","JsonLdParser_1","contextParser","skipContextValidation","produceGeneralizedRdf","allowSubjectList","defaultGraph","rdfDirection","streamingProfileAllowOutOfOrderPlainType","activeProcessingMode","parseFloat","rootContext","parseContext","activeVersion","PROCESSING_MODE_CONFLICT","keysOriginal","contextData","getContextPropagationAware","contextKeyEntry","scopedContext","propagate","originalDepth","hasApplicablePropertyScopedContext","lastKey","lastKeyValue","pendingFlushBuffer","emitError","emitContext","getUnidentifiedValueBufferSafe","getExpandOptions","EXPAND_OPTIONS","shiftStack","depthOffset","deeperIdStack","rdf_data_factory_1","DataFactory","rdfFirst","RDF","rdfType","rdfJson","contextKey","fallback","entry","getContextValue","isContextValueReverse","needle","haystack","indexHashes","index","existingIndexValue","CONFLICTING_INDEXES","getContextValueType","literal","valueToJsonString","getContextValueContainer","getContextSelfOrPropertyScoped","unaliasKeywords","val","valueLanguage","valueDirection","valueIndex","subValue","INVALID_VALUE_OBJECT","INVALID_VALUE_OBJECT_VALUE","INVALID_INDEX_VALUE","INVALID_LANGUAGE_TAGGED_VALUE","INVALID_LANGUAGE_TAGGED_STRING","nullableTermToArray","createLanguageDirectionLiteral","INVALID_TYPED_VALUE","typeTerm","createVocabOrBaseTerm","valueToTerm","INVALID_SET_OR_LIST_OBJECT","listValue","graphContainerEntries","resourceToTerm","stringValueToTerm","XSD_BOOLEAN","XSD_INTEGER","XSD_DOUBLE","predicateToTerm","expanded","intToString","datatype","Number","isFinite","isInteger","toExponential","defaultDatatype","contextType","contextLanguage","getContextValueLanguage","contextDirection","getContextValueDirection","direction","valueNode","disableCache","cachedUnaliasedKeyword","unliased","hash","newHash","containers","getContainerHandler","isComplexGraphContainer","validateReverseSubject","INVALID_REVERSE_PROPERTY_VALUE","depthContainer","graphContainerIndex","getContainerGraphIndex","graphId","keyUnaliased","getContainerKey","lastValidDepth","XSD","ContainerHandlerIdentifier","canCombineWithGraph","maybeId","ids","equals","handlePendingContainerFlushBuffers","ContainerHandlerIndex","graphContainer","indexKey","indexPropertyRaw","getContextValueIndex","indexProperty","indexValues","indexValue","handlePredicateObject","ContainerHandlerLanguage","INVALID_LANGUAGE_MAP_VALUE","ContainerHandlerType","containerTypeType","entryHasIdentifier","keyOriginal","listRootKey","keyOption","handleListElement","valueOriginal","listRootKeys","newLinkTerm","linkTerm","ContainerHandlerIdentifier_1","ContainerHandlerIndex_1","ContainerHandlerLanguage_1","ContainerHandlerType_1","isSimpleGraphContainer","checkGraphContainer","containersSelf","containersParent","containerHandleName","CONTAINER_HANDLERS","handler","containerName","depthProperties","getPropertiesDepth","depthPropertiesGraph","atGraph","objects","isPropertyReverse","listValueContainer","EntryHandlerKeyword","EntryHandlerKeyword_1","INVALID_STREAMING_KEY_ORDER","INVALID_ID_VALUE","COLLIDING_KEYWORDS","INVALID_INCLUDED_VALUE","valueUnliased","elements","element","INVALID_TYPE_VALUE","hasTypedScopedContext","typeContext","c","keywordType","VALID_KEYWORDS_TYPES","INVALID_REVERSE_VALUE","C","LEFT_BRACE","RIGHT_BRACE","LEFT_BRACKET","RIGHT_BRACKET","COLON","COMMA","TRUE","FALSE","NULL","STRING","NUMBER","START","STOP","TRUE1","TRUE2","TRUE3","FALSE1","FALSE2","FALSE3","FALSE4","NULL1","NULL2","NULL3","NUMBER1","NUMBER3","STRING1","STRING2","STRING3","STRING4","STRING5","STRING6","VALUE","KEY","OBJECT","ARRAY","BACK_SLASH","charCodeAt","FORWARD_SLASH","BACKSPACE","FORM_FEED","NEWLINE","CARRIAGE_RETURN","TAB","STRING_BUFFER_SIZE","tState","string","stringBuffer","alloc","stringBufferOffset","unicode","highSurrogate","bytes_remaining","bytes_in_sequence","temp_buffs","toknam","l","proto","charError","appendStringChar","char","appendStringBuf","start","size","copy","n","onToken","j","intVal","parseInt","isNaN","token","parseError","pop","parent"],"sourceRoot":""}