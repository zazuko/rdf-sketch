{"version":3,"file":"js/624.92ca7be4.js","mappings":"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","sources":["webpack://@zazuko/rdf-sketch/./node_modules/@rdfjs/parser-jsonld/index.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdfjs/parser-jsonld/lib/ParserStream.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdfjs/sink/index.js","webpack://@zazuko/rdf-sketch/./node_modules/canonicalize/lib/canonicalize.js","webpack://@zazuko/rdf-sketch/./node_modules/cross-fetch/dist/browser-polyfill.js","webpack://@zazuko/rdf-sketch/./node_modules/http-link-header/lib/link.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/index.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/lib/ContextParser.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/lib/ErrorCoded.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/lib/IDocumentLoader.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/lib/JsonLdContext.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-context-parser/lib/Util.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/index.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/ContextTree.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/JsonLdParser.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/ParsingContext.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/Util.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIdentifier.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIndex.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerLanguage.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerType.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerArrayValue.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerContainer.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerInvalidFallback.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerPredicate.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeyword.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordContext.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordGraph.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordId.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordIncluded.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordNest.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordType.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordUnknownFallback.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordValue.js","webpack://@zazuko/rdf-sketch/./node_modules/jsonparse/jsonparse.js","webpack://@zazuko/rdf-sketch/./node_modules/rdf-data-factory/index.js","webpack://@zazuko/rdf-sketch/./node_modules/rdf-data-factory/lib/BlankNode.js","webpack://@zazuko/rdf-sketch/./node_modules/rdf-data-factory/lib/DataFactory.js","webpack://@zazuko/rdf-sketch/./node_modules/rdf-data-factory/lib/DefaultGraph.js","webpack://@zazuko/rdf-sketch/./node_modules/rdf-data-factory/lib/Literal.js","webpack://@zazuko/rdf-sketch/./node_modules/rdf-data-factory/lib/NamedNode.js","webpack://@zazuko/rdf-sketch/./node_modules/rdf-data-factory/lib/Quad.js","webpack://@zazuko/rdf-sketch/./node_modules/rdf-data-factory/lib/Variable.js","webpack://@zazuko/rdf-sketch/./node_modules/relative-to-absolute-iri/index.js","webpack://@zazuko/rdf-sketch/./node_modules/relative-to-absolute-iri/lib/Resolve.js"],"sourcesContent":["const Sink = require('@rdfjs/sink')\nconst ParserStream = require('./lib/ParserStream')\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nmodule.exports = Parser\n","const rdf = require('@rdfjs/data-model')\nconst { JsonLdParser } = require('jsonld-streaming-parser')\nconst { Transform } = require('readable-stream')\n\nconst relativeIriProtocol = 'null:'\n\nfunction termCleanup (factory) {\n  return term => {\n    if (term.termType !== 'NamedNode') {\n      return null\n    }\n\n    if (!term.value.startsWith(relativeIriProtocol)) {\n      return null\n    }\n\n    // remove dummy protocol workaround for relative IRIs\n    return factory.namedNode(term.value.slice(relativeIriProtocol.length))\n  }\n}\n\nfunction quadCleanup (factory) {\n  const cleanup = termCleanup(factory)\n\n  return quad => {\n    const parts = [\n      cleanup(quad.subject),\n      cleanup(quad.predicate),\n      cleanup(quad.object),\n      cleanup(quad.graph)\n    ]\n\n    if (parts[0] || parts[1] || parts[2] || parts[3]) {\n      return factory.quad(...parts)\n    }\n\n    return quad\n  }\n}\n\nclass ParserStream {\n  constructor (input, { baseIRI = relativeIriProtocol, context = null, factory = rdf } = {}) {\n    const parser = new JsonLdParser({\n      baseIRI,\n      context,\n      dataFactory: factory,\n      streamingProfile: false\n    })\n\n    input.pipe(parser)\n\n    const cleanup = quadCleanup(factory)\n\n    const transform = new Transform({\n      objectMode: true,\n      transform: (quad, encoding, callback) => {\n        callback(null, cleanup(quad))\n      }\n    })\n\n    parser.on('context', context => {\n      Object.entries(context).forEach(([prefix, iri]) => {\n        transform.emit('prefix', prefix, factory.namedNode(iri))\n      })\n    })\n    parser.on('error', err => transform.destroy(err))\n    parser.pipe(transform)\n\n    return transform\n  }\n}\n\nmodule.exports = ParserStream\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, Object.assign({}, this.options, options))\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', (err) => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nmodule.exports = Sink\n","/* jshint esversion: 6 */\n/* jslint node: true */\n'use strict';\n\nmodule.exports = function serialize (object) {\n  if (object === null || typeof object !== 'object' || object.toJSON != null) {\n    return JSON.stringify(object);\n  }\n\n  if (Array.isArray(object)) {\n    return '[' + object.reduce((t, cv, ci) => {\n      const comma = ci === 0 ? '' : ',';\n      const value = cv === undefined || typeof cv === 'symbol' ? null : cv;\n      return t + comma + serialize(value);\n    }, '') + ']';\n  }\n\n  return '{' + Object.keys(object).sort().reduce((t, cv, ci) => {\n    if (object[cv] === undefined ||\n        typeof object[cv] === 'symbol') {\n      return t;\n    }\n    const comma = t.length === 0 ? '' : ',';\n    return t + comma + serialize(cv) + ':' + serialize(object[cv]);\n  }, '') + '}';\n};\n","(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(typeof self !== 'undefined' ? self : this);\n","'use strict'\n\nvar COMPATIBLE_ENCODING_PATTERN = /^utf-?8|ascii|utf-?16-?le|ucs-?2|base-?64|latin-?1$/i\nvar WS_TRIM_PATTERN = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g\nvar WS_CHAR_PATTERN = /\\s|\\uFEFF|\\xA0/\nvar WS_FOLD_PATTERN = /\\r?\\n[\\x20\\x09]+/g\nvar DELIMITER_PATTERN = /[;,\"]/\nvar WS_DELIMITER_PATTERN = /[;,\"]|\\s/\n\n/**\n * Token character pattern\n * @type {RegExp}\n * @see https://tools.ietf.org/html/rfc7230#section-3.2.6\n */\nvar TOKEN_PATTERN = /^[!#$%&'*+\\-\\.^_`|~\\da-zA-Z]+$/\n\nvar STATE = {\n  IDLE: 1 << 0,\n  URI: 1 << 1,\n  ATTR: 1 << 2,\n}\n\nfunction trim( value ) {\n  return value.replace( WS_TRIM_PATTERN, '' )\n}\n\nfunction hasWhitespace( value ) {\n  return WS_CHAR_PATTERN.test( value )\n}\n\nfunction skipWhitespace( value, offset ) {\n  while( hasWhitespace( value[offset] ) ) {\n    offset++\n  }\n  return offset\n}\n\nfunction needsQuotes( value ) {\n  return WS_DELIMITER_PATTERN.test( value ) ||\n    !TOKEN_PATTERN.test( value )\n}\n\nclass Link {\n\n  /**\n   * Link\n   * @constructor\n   * @param {String} [value]\n   * @returns {Link}\n   */\n  constructor( value ) {\n\n    /** @type {Array} URI references */\n    this.refs = []\n\n    if( value ) {\n      this.parse( value )\n    }\n\n  }\n\n  /**\n   * Get refs with given relation type\n   * @param {String} value\n   * @returns {Array<Object>}\n   */\n  rel( value ) {\n\n    var links = []\n    var type = value.toLowerCase()\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ].rel.toLowerCase() === type ) {\n        links.push( this.refs[ i ] )\n      }\n    }\n\n    return links\n\n  }\n\n  /**\n   * Get refs where given attribute has a given value\n   * @param {String} attr\n   * @param {String} value\n   * @returns {Array<Object>}\n   */\n  get( attr, value ) {\n\n    attr = attr.toLowerCase()\n\n    var links = []\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ][ attr ] === value ) {\n        links.push( this.refs[ i ] )\n      }\n    }\n\n    return links\n\n  }\n\n  set( link ) {\n    this.refs.push( link )\n    return this\n  }\n\n  has( attr, value ) {\n\n    attr = attr.toLowerCase()\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      if( this.refs[ i ][ attr ] === value ) {\n        return true\n      }\n    }\n\n    return false\n\n  }\n\n  parse( value, offset ) {\n\n    offset = offset || 0\n    value = offset ? value.slice( offset ) : value\n\n    // Trim & unfold folded lines\n    value = trim( value ).replace( WS_FOLD_PATTERN, '' )\n\n    var state = STATE.IDLE\n    var length = value.length\n    var offset = 0\n    var ref = null\n\n    while( offset < length ) {\n      if( state === STATE.IDLE ) {\n        if( hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        } else if( value[offset] === '<' ) {\n          if( ref != null ) {\n            ref.rel != null ?\n              this.refs.push( ...Link.expandRelations( ref ) ) :\n              this.refs.push( ref )\n          }\n          var end = value.indexOf( '>', offset )\n          if( end === -1 ) throw new Error( 'Expected end of URI delimiter at offset ' + offset )\n          ref = { uri: value.slice( offset + 1, end ) }\n          // this.refs.push( ref )\n          offset = end\n          state = STATE.URI\n        } else {\n          throw new Error( 'Unexpected character \"' + value[offset] + '\" at offset ' + offset )\n        }\n        offset++\n      } else if( state === STATE.URI ) {\n        if( hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        } else if( value[offset] === ';' ) {\n          state = STATE.ATTR\n          offset++\n        } else if( value[offset] === ',' ) {\n          state = STATE.IDLE\n          offset++\n        } else {\n          throw new Error( 'Unexpected character \"' + value[offset] + '\" at offset ' + offset )\n        }\n      } else if( state === STATE.ATTR ) {\n        if( value[offset] ===';' || hasWhitespace( value[offset] ) ) {\n          offset++\n          continue\n        }\n        var end = value.indexOf( '=', offset )\n        if( end === -1 ) throw new Error( 'Expected attribute delimiter at offset ' + offset )\n        var attr = trim( value.slice( offset, end ) ).toLowerCase()\n        var attrValue = ''\n        offset = end + 1\n        offset = skipWhitespace( value, offset )\n        if( value[offset] === '\"' ) {\n          offset++\n          while( offset < length ) {\n            if( value[offset] === '\"' ) {\n              offset++; break\n            }\n            if( value[offset] === '\\\\' ) {\n              offset++\n            }\n            attrValue += value[offset]\n            offset++\n          }\n        } else {\n          var end = offset + 1\n          while( !DELIMITER_PATTERN.test( value[end] ) && end < length ) {\n            end++\n          }\n          attrValue = value.slice( offset, end )\n          offset = end\n        }\n        if( ref[ attr ] && Link.isSingleOccurenceAttr( attr ) ) {\n          // Ignore multiples of attributes which may only appear once\n        } else if( attr[ attr.length - 1 ] === '*' ) {\n          ref[ attr ] = Link.parseExtendedValue( attrValue )\n        } else {\n          attrValue = attr === 'type' ?\n            attrValue.toLowerCase() : attrValue\n          if( ref[ attr ] != null ) {\n            if( Array.isArray( ref[ attr ] ) ) {\n              ref[ attr ].push( attrValue )\n            } else {\n              ref[ attr ] = [ ref[ attr ], attrValue ]\n            }\n          } else {\n            ref[ attr ] = attrValue\n          }\n        }\n        switch( value[offset] ) {\n          case ',': state = STATE.IDLE; break\n          case ';': state = STATE.ATTR; break\n        }\n        offset++\n      } else {\n        throw new Error( 'Unknown parser state \"' + state + '\"' )\n      }\n    }\n\n    if( ref != null ) {\n      ref.rel != null ?\n        this.refs.push( ...Link.expandRelations( ref ) ) :\n        this.refs.push( ref )\n    }\n\n    ref = null\n\n    return this\n\n  }\n\n  toString() {\n\n    var refs = []\n    var link = ''\n    var ref = null\n\n    for( var i = 0; i < this.refs.length; i++ ) {\n      ref = this.refs[i]\n      link = Object.keys( this.refs[i] ).reduce( function( link, attr ) {\n        if( attr === 'uri' ) return link\n        return link + '; ' + Link.formatAttribute( attr, ref[ attr ] )\n      }, '<' + ref.uri + '>' )\n      refs.push( link )\n    }\n\n    return refs.join( ', ' )\n\n  }\n\n}\n\n/**\n * Determines whether an encoding can be\n * natively handled with a `Buffer`\n * @param {String} value\n * @returns {Boolean}\n */\nLink.isCompatibleEncoding = function( value ) {\n  return COMPATIBLE_ENCODING_PATTERN.test( value )\n}\n\nLink.parse = function( value, offset ) {\n  return new Link().parse( value, offset )\n}\n\nLink.isSingleOccurenceAttr = function( attr ) {\n  return attr === 'rel' || attr === 'type' || attr === 'media' ||\n    attr === 'title' || attr === 'title*'\n}\n\nLink.isTokenAttr = function( attr ) {\n  return attr === 'rel' || attr === 'type' || attr === 'anchor'\n}\n\nLink.escapeQuotes = function( value ) {\n  return value.replace( /\"/g, '\\\\\"' )\n}\n\nLink.expandRelations = function( ref ) {\n  var rels = ref.rel.split( ' ' )\n  return rels.map( function( rel ) {\n    var value = Object.assign( {}, ref )\n    value.rel = rel\n    return value\n  })\n}\n\n/**\n * Parses an extended value and attempts to decode it\n * @internal\n * @param {String} value\n * @return {Object}\n */\nLink.parseExtendedValue = function( value ) {\n  var parts = /([^']+)?(?:'([^']+)')?(.+)/.exec( value )\n  return {\n    language: parts[2].toLowerCase(),\n    encoding: Link.isCompatibleEncoding( parts[1] ) ?\n      null : parts[1].toLowerCase(),\n    value: Link.isCompatibleEncoding( parts[1] ) ?\n      decodeURIComponent( parts[3] ) : parts[3]\n  }\n}\n\n/**\n * Format a given extended attribute and it's value\n * @param {String} attr\n * @param {Object} data\n * @return {String}\n */\nLink.formatExtendedAttribute = function( attr, data ) {\n\n  var encoding = ( data.encoding || 'utf-8' ).toUpperCase()\n  var language = data.language || 'en'\n\n  var encodedValue = ''\n\n  if( Buffer.isBuffer( data.value ) && Link.isCompatibleEncoding( encoding ) ) {\n    encodedValue = data.value.toString( encoding )\n  } else if( Buffer.isBuffer( data.value ) ) {\n    encodedValue = data.value.toString( 'hex' )\n      .replace( /[0-9a-f]{2}/gi, '%$1' )\n  } else {\n    encodedValue = encodeURIComponent( data.value )\n  }\n\n  return attr + '=' + encoding + '\\'' +\n    language + '\\'' + encodedValue\n\n}\n\n/**\n * Format a given attribute and it's value\n * @param {String} attr\n * @param {String|Object} value\n * @return {String}\n */\nLink.formatAttribute = function( attr, value ) {\n\n  if( Array.isArray( value ) ) {\n    return value.map(( item ) => {\n      return Link.formatAttribute( attr, item )\n    }).join( '; ' )\n  }\n\n  if( attr[ attr.length - 1 ] === '*' || typeof value !== 'string' ) {\n    return Link.formatExtendedAttribute( attr, value )\n  }\n\n  if( Link.isTokenAttr( attr ) ) {\n    value = needsQuotes( value ) ?\n      '\"' + Link.escapeQuotes( value ) + '\"' :\n      Link.escapeQuotes( value )\n  } else if( needsQuotes( value ) ) {\n    value = encodeURIComponent( value )\n    // We don't need to escape <SP> <,> <;> within quotes\n    value = value\n      .replace( /%20/g, ' ' )\n      .replace( /%2C/g, ',' )\n      .replace( /%3B/g, ';' )\n\n    value = '\"' + value + '\"'\n  }\n\n  return attr + '=' + value\n\n}\n\nmodule.exports = Link\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/ContextParser\"), exports);\n__exportStar(require(\"./lib/ErrorCoded\"), exports);\n__exportStar(require(\"./lib/FetchDocumentLoader\"), exports);\n__exportStar(require(\"./lib/IDocumentLoader\"), exports);\n__exportStar(require(\"./lib/JsonLdContext\"), exports);\n__exportStar(require(\"./lib/JsonLdContextNormalized\"), exports);\n__exportStar(require(\"./lib/Util\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultExpandOptions = exports.ContextParser = void 0;\nrequire(\"cross-fetch/polyfill\");\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst FetchDocumentLoader_1 = require(\"./FetchDocumentLoader\");\nconst JsonLdContextNormalized_1 = require(\"./JsonLdContextNormalized\");\nconst Util_1 = require(\"./Util\");\n// tslint:disable-next-line:no-var-requires\nconst canonicalizeJson = require('canonicalize');\n/**\n * Parses JSON-LD contexts.\n */\nclass ContextParser {\n    constructor(options) {\n        options = options || {};\n        this.documentLoader = options.documentLoader || new FetchDocumentLoader_1.FetchDocumentLoader();\n        this.documentCache = {};\n        this.validateContext = !options.skipValidation;\n        this.expandContentTypeToBase = !!options.expandContentTypeToBase;\n        this.remoteContextsDepthLimit = options.remoteContextsDepthLimit || 32;\n        this.redirectSchemaOrgHttps = 'redirectSchemaOrgHttps' in options ? !!options.redirectSchemaOrgHttps : true;\n    }\n    /**\n     * Validate the given @language value.\n     * An error will be thrown if it is invalid.\n     * @param value An @language value.\n     * @param {boolean} strictRange If the string value should be strictly checked against a regex.\n     * @param {string} errorCode The error code to emit on errors.\n     * @return {boolean} If validation passed.\n     *                   Can only be false if strictRange is false and the string value did not pass the regex.\n     */\n    static validateLanguage(value, strictRange, errorCode) {\n        if (typeof value !== 'string') {\n            throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a string, got '${JSON.stringify(value)}'`, errorCode);\n        }\n        if (!Util_1.Util.REGEX_LANGUAGE_TAG.test(value)) {\n            if (strictRange) {\n                throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a valid language tag, got '${JSON.stringify(value)}'`, errorCode);\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Validate the given @direction value.\n     * An error will be thrown if it is invalid.\n     * @param value An @direction value.\n     * @param {boolean} strictValues If the string value should be strictly checked against a regex.\n     * @return {boolean} If validation passed.\n     *                   Can only be false if strictRange is false and the string value did not pass the regex.\n     */\n    static validateDirection(value, strictValues) {\n        if (typeof value !== 'string') {\n            throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be a string, got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);\n        }\n        if (!Util_1.Util.REGEX_DIRECTION_TAG.test(value)) {\n            if (strictValues) {\n                throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be 'ltr' or 'rtl', got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Add an @id term for all @reverse terms.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @return {IJsonLdContextNormalizedRaw} The mutated input context.\n     */\n    idifyReverseTerms(context) {\n        for (const key of Object.keys(context)) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if (value['@reverse'] && !value['@id']) {\n                    if (typeof value['@reverse'] !== 'string' || Util_1.Util.isValidKeyword(value['@reverse'])) {\n                        throw new ErrorCoded_1.ErrorCoded(`Invalid @reverse value, must be absolute IRI or blank node: '${value['@reverse']}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                    }\n                    value['@id'] = value['@reverse'];\n                    if (Util_1.Util.isPotentialKeyword(value['@reverse'])) {\n                        delete value['@reverse'];\n                    }\n                    else {\n                        value['@reverse'] = true;\n                    }\n                }\n            }\n        }\n        return context;\n    }\n    /**\n     * Expand all prefixed terms in the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {boolean} expandContentTypeToBase If @type inside the context may be expanded\n     *                                          via @base if @vocab is set to null.\n     */\n    expandPrefixedTerms(context, expandContentTypeToBase) {\n        const contextRaw = context.getContextRaw();\n        for (const key of Object.keys(contextRaw)) {\n            // Only expand allowed keys\n            if (Util_1.Util.EXPAND_KEYS_BLACKLIST.indexOf(key) < 0 && !Util_1.Util.isReservedInternalKeyword(key)) {\n                // Error if we try to alias a keyword to something else.\n                const keyValue = contextRaw[key];\n                if (Util_1.Util.isPotentialKeyword(key) && Util_1.Util.ALIAS_DOMAIN_BLACKLIST.indexOf(key) >= 0) {\n                    if (key !== '@type' || typeof contextRaw[key] === 'object'\n                        && !(contextRaw[key]['@protected'] || contextRaw[key]['@container'] === '@set')) {\n                        throw new ErrorCoded_1.ErrorCoded(`Keywords can not be aliased to something else.\nTried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);\n                    }\n                }\n                // Error if we try to alias to an illegal keyword\n                if (Util_1.Util.ALIAS_RANGE_BLACKLIST.indexOf(Util_1.Util.getContextValueId(keyValue)) >= 0) {\n                    throw new ErrorCoded_1.ErrorCoded(`Aliasing to certain keywords is not allowed.\nTried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.INVALID_KEYWORD_ALIAS);\n                }\n                // Error if this term was marked as prefix as well\n                if (keyValue && Util_1.Util.isPotentialKeyword(Util_1.Util.getContextValueId(keyValue))\n                    && keyValue['@prefix'] === true) {\n                    throw new ErrorCoded_1.ErrorCoded(`Tried to use keyword aliases as prefix: '${key}': '${JSON.stringify(keyValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                // Loop because prefixes might be nested\n                while (Util_1.Util.isPrefixValue(contextRaw[key])) {\n                    const value = contextRaw[key];\n                    let changed = false;\n                    if (typeof value === 'string') {\n                        contextRaw[key] = context.expandTerm(value, true);\n                        changed = changed || value !== contextRaw[key];\n                    }\n                    else {\n                        const id = value['@id'];\n                        const type = value['@type'];\n                        // If @id is missing, don't allow @id to be added if @prefix: true and key not being a valid IRI.\n                        const canAddIdEntry = !('@prefix' in value) || Util_1.Util.isValidIri(key);\n                        if ('@id' in value) {\n                            // Use @id value for expansion\n                            if (id !== undefined && id !== null && typeof id === 'string') {\n                                contextRaw[key]['@id'] = context.expandTerm(id, true);\n                                changed = changed || id !== contextRaw[key]['@id'];\n                            }\n                        }\n                        else if (!Util_1.Util.isPotentialKeyword(key) && canAddIdEntry) {\n                            // Add an explicit @id value based on the expanded key value\n                            const newId = context.expandTerm(key, true);\n                            if (newId !== key) {\n                                // Don't set @id if expansion failed\n                                contextRaw[key]['@id'] = newId;\n                                changed = true;\n                            }\n                        }\n                        if (type && typeof type === 'string' && type !== '@vocab'\n                            && (!value['@container'] || !value['@container']['@type'])\n                            && canAddIdEntry) {\n                            // First check @vocab, then fallback to @base\n                            contextRaw[key]['@type'] = context.expandTerm(type, true);\n                            if (expandContentTypeToBase && type === contextRaw[key]['@type']) {\n                                contextRaw[key]['@type'] = context.expandTerm(type, false);\n                            }\n                            changed = changed || type !== contextRaw[key]['@type'];\n                        }\n                    }\n                    if (!changed) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Normalize the @language entries in the given context to lowercase.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} parseOptions The parsing options.\n     */\n    normalize(context, { processingMode, normalizeLanguageTags }) {\n        // Lowercase language keys in 1.0\n        if (normalizeLanguageTags || processingMode === 1.0) {\n            for (const key of Object.keys(context)) {\n                if (key === '@language' && typeof context[key] === 'string') {\n                    context[key] = context[key].toLowerCase();\n                }\n                else {\n                    const value = context[key];\n                    if (value && typeof value === 'object') {\n                        if (typeof value['@language'] === 'string') {\n                            value['@language'] = value['@language'].toLowerCase();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Convert all @container strings and array values to hash-based values.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     */\n    containersToHash(context) {\n        for (const key of Object.keys(context)) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if (typeof value['@container'] === 'string') {\n                    value['@container'] = { [value['@container']]: true };\n                }\n                else if (Array.isArray(value['@container'])) {\n                    const newValue = {};\n                    for (const containerValue of value['@container']) {\n                        newValue[containerValue] = true;\n                    }\n                    value['@container'] = newValue;\n                }\n            }\n        }\n    }\n    /**\n     * Normalize and apply context-levevl @protected terms onto each term separately.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {number} processingMode The processing mode.\n     */\n    applyScopedProtected(context, { processingMode }) {\n        if (processingMode && processingMode >= 1.1) {\n            if (context['@protected']) {\n                for (const key of Object.keys(context)) {\n                    if (Util_1.Util.isReservedInternalKeyword(key)) {\n                        continue;\n                    }\n                    if (!Util_1.Util.isPotentialKeyword(key) && !Util_1.Util.isTermProtected(context, key)) {\n                        const value = context[key];\n                        if (value && typeof value === 'object') {\n                            if (!('@protected' in context[key])) {\n                                // Mark terms with object values as protected if they don't have an @protected: false annotation\n                                context[key]['@protected'] = true;\n                            }\n                        }\n                        else {\n                            // Convert string-based term values to object-based values with @protected: true\n                            context[key] = {\n                                '@id': value,\n                                '@protected': true,\n                            };\n                        }\n                    }\n                }\n                delete context['@protected'];\n            }\n        }\n    }\n    /**\n     * Check if the given context inheritance does not contain any overrides of protected terms.\n     * @param {IJsonLdContextNormalizedRaw} contextBefore The context that may contain some protected terms.\n     * @param {IJsonLdContextNormalizedRaw} contextAfter A new context that is being applied on the first one.\n     * @param {IExpandOptions} expandOptions Options that are needed for any expansions during this validation.\n     */\n    validateKeywordRedefinitions(contextBefore, contextAfter, expandOptions) {\n        for (const key of Object.keys(contextAfter)) {\n            if (Util_1.Util.isTermProtected(contextBefore, key)) {\n                // The entry in the context before will always be in object-mode\n                // If the new entry is in string-mode, convert it to object-mode\n                // before checking if it is identical.\n                if (typeof contextAfter[key] === 'string') {\n                    const isPrefix = Util_1.Util.isSimpleTermDefinitionPrefix(contextAfter[key], expandOptions);\n                    contextAfter[key] = { '@id': contextAfter[key] };\n                    // If the simple term def was a prefix, explicitly mark the term as a prefix in the expanded term definition,\n                    // because otherwise we loose this information due to JSON-LD interpreting prefixes differently\n                    // in simple vs expanded term definitions.\n                    if (isPrefix) {\n                        contextAfter[key]['@prefix'] = true;\n                        contextBefore[key]['@prefix'] = true; // Also on before, to make sure the next step still considers them ==\n                    }\n                }\n                // Convert term values to strings for each comparison\n                const valueBefore = canonicalizeJson(contextBefore[key]);\n                // We modify this deliberately,\n                // as we need it for the value comparison (they must be identical modulo '@protected')),\n                // and for the fact that this new value will override the first one.\n                contextAfter[key]['@protected'] = true;\n                const valueAfter = canonicalizeJson(contextAfter[key]);\n                // Error if they are not identical\n                if (valueBefore !== valueAfter) {\n                    throw new ErrorCoded_1.ErrorCoded(`Attempted to override the protected keyword ${key} from ${JSON.stringify(Util_1.Util.getContextValueId(contextBefore[key]))} to ${JSON.stringify(Util_1.Util.getContextValueId(contextAfter[key]))}`, ErrorCoded_1.ERROR_CODES.PROTECTED_TERM_REDEFINITION);\n                }\n            }\n        }\n    }\n    /**\n     * Validate the entries of the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} options The parse options.\n     */\n    validate(context, { processingMode }) {\n        for (const key of Object.keys(context)) {\n            // Ignore reserved internal keywords.\n            if (Util_1.Util.isReservedInternalKeyword(key)) {\n                continue;\n            }\n            // Do not allow empty term\n            if (key === '') {\n                throw new ErrorCoded_1.ErrorCoded(`The empty term is not allowed, got: '${key}': '${JSON.stringify(context[key])}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n            }\n            const value = context[key];\n            const valueType = typeof value;\n            // First check if the key is a keyword\n            if (Util_1.Util.isPotentialKeyword(key)) {\n                switch (key.substr(1)) {\n                    case 'vocab':\n                        if (value !== null && valueType !== 'string') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @vocab IRI: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);\n                        }\n                        break;\n                    case 'base':\n                        if (value !== null && valueType !== 'string') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @base IRI: ${context[key]}`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_IRI);\n                        }\n                        break;\n                    case 'language':\n                        if (value !== null) {\n                            ContextParser.validateLanguage(value, true, ErrorCoded_1.ERROR_CODES.INVALID_DEFAULT_LANGUAGE);\n                        }\n                        break;\n                    case 'version':\n                        if (value !== null && valueType !== 'number') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @version number: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);\n                        }\n                        break;\n                    case 'direction':\n                        if (value !== null) {\n                            ContextParser.validateDirection(value, true);\n                        }\n                        break;\n                    case 'propagate':\n                        if (processingMode === 1.0) {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an illegal @propagate keyword: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n                        }\n                        if (value !== null && valueType !== 'boolean') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @propagate value: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_PROPAGATE_VALUE);\n                        }\n                        break;\n                }\n                // Don't allow keywords to be overridden\n                if (Util_1.Util.isValidKeyword(key) && Util_1.Util.isValidKeyword(Util_1.Util.getContextValueId(value))) {\n                    throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${Util_1.Util\n                        .getContextValueId(value)}'`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);\n                }\n                continue;\n            }\n            // Otherwise, consider the key a term\n            if (value !== null) {\n                switch (valueType) {\n                    case 'string':\n                        if (Util_1.Util.getPrefix(value, context) === key) {\n                            throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON\n                                .stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);\n                        }\n                        if (Util_1.Util.isValidIriWeak(key)) {\n                            if (value === '@type') {\n                                throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                            }\n                            else if (Util_1.Util.isValidIri(value) && value !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {\n                                throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                            }\n                        }\n                        break;\n                    case 'object':\n                        if (!Util_1.Util.isCompactIri(key) && !('@id' in value)\n                            && (value['@type'] === '@id' ? !context['@base'] : !context['@vocab'])) {\n                            throw new ErrorCoded_1.ErrorCoded(`Missing @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                        }\n                        for (const objectKey of Object.keys(value)) {\n                            const objectValue = value[objectKey];\n                            if (!objectValue) {\n                                continue;\n                            }\n                            switch (objectKey) {\n                                case '@id':\n                                    if (Util_1.Util.isValidKeyword(objectValue)\n                                        && objectValue !== '@type' && objectValue !== '@id' && objectValue !== '@graph') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                    }\n                                    if (Util_1.Util.isValidIriWeak(key)) {\n                                        if (objectValue === '@type') {\n                                            throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                        }\n                                        else if (Util_1.Util.isValidIri(objectValue)\n                                            && objectValue !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {\n                                            throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                        }\n                                    }\n                                    if (typeof objectValue !== 'string') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Detected non-string @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                    }\n                                    if (Util_1.Util.getPrefix(objectValue, context) === key) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON\n                                            .stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);\n                                    }\n                                    break;\n                                case '@type':\n                                    if (value['@container'] === '@type' && objectValue !== '@id' && objectValue !== '@vocab') {\n                                        throw new ErrorCoded_1.ErrorCoded(`@container: @type only allows @type: @id or @vocab, but got: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    if (typeof objectValue !== 'string') {\n                                        throw new ErrorCoded_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    if (objectValue !== '@id' && objectValue !== '@vocab'\n                                        && (processingMode === 1.0 || objectValue !== '@json')\n                                        && (processingMode === 1.0 || objectValue !== '@none')\n                                        && (objectValue[0] === '_' || !Util_1.Util.isValidIri(objectValue))) {\n                                        throw new ErrorCoded_1.ErrorCoded(`A context @type must be an absolute IRI, found: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    break;\n                                case '@reverse':\n                                    if (typeof objectValue === 'string' && value['@id'] && value['@id'] !== objectValue) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found non-matching @id and @reverse term values in '${key}':\\\n'${objectValue}' and '${value['@id']}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                    }\n                                    if ('@nest' in value) {\n                                        throw new ErrorCoded_1.ErrorCoded(`@nest is not allowed in the reverse property '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                    }\n                                    break;\n                                case '@container':\n                                    if (processingMode === 1.0) {\n                                        if (Object.keys(objectValue).length > 1\n                                            || Util_1.Util.CONTAINERS_1_0.indexOf(Object.keys(objectValue)[0]) < 0) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${Object.keys(objectValue)}') in 1.0, \\\nmust be only one of ${Util_1.Util.CONTAINERS_1_0.join(', ')}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);\n                                        }\n                                    }\n                                    for (const containerValue of Object.keys(objectValue)) {\n                                        if (containerValue === '@list' && value['@reverse']) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Term value can not be @container: @list and @reverse at the same time on '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                        }\n                                        if (Util_1.Util.CONTAINERS.indexOf(containerValue) < 0) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${containerValue}'), \\\nmust be one of ${Util_1.Util.CONTAINERS.join(', ')}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);\n                                        }\n                                    }\n                                    break;\n                                case '@language':\n                                    ContextParser.validateLanguage(objectValue, true, ErrorCoded_1.ERROR_CODES.INVALID_LANGUAGE_MAPPING);\n                                    break;\n                                case '@direction':\n                                    ContextParser.validateDirection(objectValue, true);\n                                    break;\n                                case '@prefix':\n                                    if (objectValue !== null && typeof objectValue !== 'boolean') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @prefix boolean in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_PREFIX_VALUE);\n                                    }\n                                    if (!('@id' in value) && !Util_1.Util.isValidIri(key)) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Invalid @prefix definition for '${key}' ('${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                                    }\n                                    break;\n                                case '@index':\n                                    if (processingMode === 1.0 || !value['@container'] || !value['@container']['@index']) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Attempt to add illegal key to value object: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                                    }\n                                    break;\n                                case '@nest':\n                                    if (Util_1.Util.isPotentialKeyword(objectValue) && objectValue !== '@nest') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @nest value in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_NEST_VALUE);\n                                    }\n                            }\n                        }\n                        break;\n                    default:\n                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term value: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n            }\n        }\n    }\n    /**\n     * Apply the @base context entry to the given context under certain circumstances.\n     * @param context A context.\n     * @param options Parsing options.\n     * @param inheritFromParent If the @base value from the parent context can be inherited.\n     * @return The given context.\n     */\n    applyBaseEntry(context, options, inheritFromParent) {\n        // In some special cases, this can be a string, so ignore those.\n        if (typeof context === 'string') {\n            return context;\n        }\n        // Give priority to @base in the parent context\n        if (inheritFromParent && !('@base' in context) && options.parentContext\n            && typeof options.parentContext === 'object' && '@base' in options.parentContext) {\n            context['@base'] = options.parentContext['@base'];\n            if (options.parentContext['@__baseDocument']) {\n                context['@__baseDocument'] = true;\n            }\n        }\n        // Override the base IRI if provided.\n        if (options.baseIRI && !options.external) {\n            if (!('@base' in context)) {\n                // The context base is the document base\n                context['@base'] = options.baseIRI;\n                context['@__baseDocument'] = true;\n            }\n            else if (context['@base'] !== null && typeof context['@base'] === 'string'\n                && !Util_1.Util.isValidIri(context['@base'])) {\n                // The context base is relative to the document base\n                context['@base'] = relative_to_absolute_iri_1.resolve(context['@base'], options.parentContext && options.parentContext['@base'] || options.baseIRI);\n            }\n        }\n        return context;\n    }\n    /**\n     * Resolve relative context IRIs, or return full IRIs as-is.\n     * @param {string} contextIri A context IRI.\n     * @param {string} baseIRI A base IRI.\n     * @return {string} The normalized context IRI.\n     */\n    normalizeContextIri(contextIri, baseIRI) {\n        if (!Util_1.Util.isValidIri(contextIri)) {\n            try {\n                contextIri = relative_to_absolute_iri_1.resolve(contextIri, baseIRI);\n            }\n            catch (_a) {\n                throw new Error(`Invalid context IRI: ${contextIri}`);\n            }\n        }\n        // TODO: Temporary workaround for fixing schema.org CORS issues (https://github.com/schemaorg/schemaorg/issues/2578#issuecomment-652324465)\n        if (this.redirectSchemaOrgHttps && contextIri.startsWith('http://schema.org')) {\n            contextIri = 'https://schema.org/';\n        }\n        return contextIri;\n    }\n    /**\n     * Parse scoped contexts in the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} options Parsing options.\n     * @return {IJsonLdContextNormalizedRaw} The mutated input context.\n     */\n    async parseInnerContexts(context, options) {\n        for (const key of Object.keys(context)) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if ('@context' in value && value['@context'] !== null && !options.ignoreScopedContexts) {\n                    // Simulate a processing based on the parent context to check if there are any (potential errors).\n                    // Honestly, I find it a bit weird to do this here, as the context may be unused,\n                    // and the final effective context may differ based on any other embedded/scoped contexts.\n                    // But hey, it's part of the spec, so we have no choice...\n                    // https://w3c.github.io/json-ld-api/#h-note-10\n                    if (this.validateContext) {\n                        try {\n                            const parentContext = Object.assign({}, context);\n                            parentContext[key] = Object.assign({}, parentContext[key]);\n                            delete parentContext[key]['@context'];\n                            await this.parse(value['@context'], Object.assign(Object.assign({}, options), { parentContext, ignoreProtection: true, ignoreRemoteScopedContexts: true, ignoreScopedContexts: true }));\n                        }\n                        catch (e) {\n                            throw new ErrorCoded_1.ErrorCoded(e.message, ErrorCoded_1.ERROR_CODES.INVALID_SCOPED_CONTEXT);\n                        }\n                    }\n                    value['@context'] = (await this.parse(value['@context'], Object.assign(Object.assign({}, options), { minimalProcessing: true, ignoreRemoteScopedContexts: true, parentContext: context })))\n                        .getContextRaw();\n                }\n            }\n        }\n        return context;\n    }\n    /**\n     * Parse a JSON-LD context in any form.\n     * @param {JsonLdContext} context A context, URL to a context, or an array of contexts/URLs.\n     * @param {IParseOptions} options Optional parsing options.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to the context.\n     */\n    async parse(context, options = {}) {\n        const { baseIRI, parentContext: parentContextInitial, external, processingMode = ContextParser.DEFAULT_PROCESSING_MODE, normalizeLanguageTags, ignoreProtection, minimalProcessing, } = options;\n        let parentContext = parentContextInitial;\n        const remoteContexts = options.remoteContexts || {};\n        // Avoid remote context overflows\n        if (Object.keys(remoteContexts).length >= this.remoteContextsDepthLimit) {\n            throw new ErrorCoded_1.ErrorCoded('Detected an overflow in remote context inclusions: ' + Object.keys(remoteContexts), ErrorCoded_1.ERROR_CODES.CONTEXT_OVERFLOW);\n        }\n        if (context === null || context === undefined) {\n            // Don't allow context nullification and there are protected terms\n            if (!ignoreProtection && parentContext && Util_1.Util.hasProtectedTerms(parentContext)) {\n                throw new ErrorCoded_1.ErrorCoded('Illegal context nullification when terms are protected', ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_NULLIFICATION);\n            }\n            // Context that are explicitly set to null are empty.\n            return new JsonLdContextNormalized_1.JsonLdContextNormalized(this.applyBaseEntry({}, options, false));\n        }\n        else if (typeof context === 'string') {\n            const contextIri = this.normalizeContextIri(context, baseIRI);\n            const overriddenLoad = this.getOverriddenLoad(contextIri, options);\n            if (overriddenLoad) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(overriddenLoad);\n            }\n            const parsedStringContext = await this.parse(await this.load(contextIri), Object.assign(Object.assign({}, options), { baseIRI: contextIri, external: true, remoteContexts: Object.assign(Object.assign({}, remoteContexts), { [contextIri]: true }) }));\n            this.applyBaseEntry(parsedStringContext.getContextRaw(), options, true);\n            return parsedStringContext;\n        }\n        else if (Array.isArray(context)) {\n            // As a performance consideration, first load all external contexts in parallel.\n            const contextIris = [];\n            const contexts = await Promise.all(context.map((subContext, i) => {\n                if (typeof subContext === 'string') {\n                    const contextIri = this.normalizeContextIri(subContext, baseIRI);\n                    contextIris[i] = contextIri;\n                    const overriddenLoad = this.getOverriddenLoad(contextIri, options);\n                    if (overriddenLoad) {\n                        return overriddenLoad;\n                    }\n                    return this.load(contextIri);\n                }\n                else {\n                    return subContext;\n                }\n            }));\n            // Don't apply inheritance logic on minimal processing\n            if (minimalProcessing) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(contexts);\n            }\n            const reducedContexts = await contexts.reduce((accContextPromise, contextEntry, i) => accContextPromise\n                .then((accContext) => this.parse(contextEntry, Object.assign(Object.assign({}, options), { baseIRI: contextIris[i] || options.baseIRI, external: !!contextIris[i] || options.external, parentContext: accContext.getContextRaw(), remoteContexts: contextIris[i] ? Object.assign(Object.assign({}, remoteContexts), { [contextIris[i]]: true }) : remoteContexts }))), Promise.resolve(new JsonLdContextNormalized_1.JsonLdContextNormalized(parentContext || {})));\n            // Override the base IRI if provided.\n            this.applyBaseEntry(reducedContexts.getContextRaw(), options, true);\n            return reducedContexts;\n        }\n        else if (typeof context === 'object') {\n            if ('@context' in context) {\n                return await this.parse(context['@context'], options);\n            }\n            // Make a deep clone of the given context, to avoid modifying it.\n            context = JSON.parse(JSON.stringify(context)); // No better way in JS at the moment.\n            if (parentContext && !minimalProcessing) {\n                parentContext = JSON.parse(JSON.stringify(parentContext));\n            }\n            // We have an actual context object.\n            let newContext = {};\n            // According to the JSON-LD spec, @base must be ignored from external contexts.\n            if (external) {\n                delete context['@base'];\n            }\n            // Override the base IRI if provided.\n            this.applyBaseEntry(context, options, true);\n            // Hashify container entries\n            // Do this before protected term validation as that influences term format\n            this.containersToHash(context);\n            // Don't perform any other modifications if only minimal processing is needed.\n            if (minimalProcessing) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(context);\n            }\n            // In JSON-LD 1.1, load @import'ed context prior to processing.\n            let importContext = {};\n            if ('@import' in context) {\n                if (processingMode >= 1.1) {\n                    // Only accept string values\n                    if (typeof context['@import'] !== 'string') {\n                        throw new ErrorCoded_1.ErrorCoded('An @import value must be a string, but got ' + typeof context['@import'], ErrorCoded_1.ERROR_CODES.INVALID_IMPORT_VALUE);\n                    }\n                    // Load context\n                    importContext = await this.loadImportContext(this.normalizeContextIri(context['@import'], baseIRI));\n                    delete context['@import'];\n                }\n                else {\n                    throw new ErrorCoded_1.ErrorCoded('Context importing is not supported in JSON-LD 1.0', ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n                }\n            }\n            // Merge different parts of the final context in order\n            newContext = Object.assign(Object.assign(Object.assign(Object.assign({}, newContext), (typeof parentContext === 'object' ? parentContext : {})), importContext), context);\n            const newContextWrapped = new JsonLdContextNormalized_1.JsonLdContextNormalized(newContext);\n            // Parse inner contexts with minimal processing\n            await this.parseInnerContexts(newContext, options);\n            // In JSON-LD 1.1, @vocab can be relative to @vocab in the parent context.\n            if ((newContext && newContext['@version'] || ContextParser.DEFAULT_PROCESSING_MODE) >= 1.1\n                && ((context['@vocab'] && typeof context['@vocab'] === 'string') || context['@vocab'] === '')\n                && context['@vocab'].indexOf(':') < 0 && parentContext && '@vocab' in parentContext) {\n                newContext['@vocab'] = parentContext['@vocab'] + context['@vocab'];\n            }\n            // Handle terms (before protection checks)\n            this.idifyReverseTerms(newContext);\n            this.expandPrefixedTerms(newContextWrapped, this.expandContentTypeToBase);\n            // In JSON-LD 1.1, check if we are not redefining any protected keywords\n            if (!ignoreProtection && parentContext && processingMode >= 1.1) {\n                this.validateKeywordRedefinitions(parentContext, newContext, exports.defaultExpandOptions);\n            }\n            this.normalize(newContext, { processingMode, normalizeLanguageTags });\n            this.applyScopedProtected(newContext, { processingMode });\n            if (this.validateContext) {\n                this.validate(newContext, { processingMode });\n            }\n            return newContextWrapped;\n        }\n        else {\n            throw new ErrorCoded_1.ErrorCoded(`Tried parsing a context that is not a string, array or object, but got ${context}`, ErrorCoded_1.ERROR_CODES.INVALID_LOCAL_CONTEXT);\n        }\n    }\n    /**\n     * Fetch the given URL as a raw JSON-LD context.\n     * @param url An URL.\n     * @return A promise resolving to a raw JSON-LD context.\n     */\n    async load(url) {\n        // First try to retrieve the context from cache\n        const cached = this.documentCache[url];\n        if (cached) {\n            return typeof cached === 'string' ? cached : Array.isArray(cached) ? cached.slice() : Object.assign({}, cached);\n        }\n        // If not in cache, load it\n        let document;\n        try {\n            document = await this.documentLoader.load(url);\n        }\n        catch (e) {\n            throw new ErrorCoded_1.ErrorCoded(`Failed to load remote context ${url}: ${e.message}`, ErrorCoded_1.ERROR_CODES.LOADING_REMOTE_CONTEXT_FAILED);\n        }\n        // Validate the context\n        if (!('@context' in document)) {\n            throw new ErrorCoded_1.ErrorCoded(`Missing @context in remote context at ${url}`, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);\n        }\n        return this.documentCache[url] = document['@context'];\n    }\n    /**\n     * Override the given context that may be loaded.\n     *\n     * This will check whether or not the url is recursively being loaded.\n     * @param url An URL.\n     * @param options Parsing options.\n     * @return An overridden context, or null.\n     *         Optionally an error can be thrown if a cyclic context is detected.\n     */\n    getOverriddenLoad(url, options) {\n        if (url in (options.remoteContexts || {})) {\n            if (options.ignoreRemoteScopedContexts) {\n                return url;\n            }\n            else {\n                throw new ErrorCoded_1.ErrorCoded('Detected a cyclic context inclusion of ' + url, ErrorCoded_1.ERROR_CODES.RECURSIVE_CONTEXT_INCLUSION);\n            }\n        }\n        return null;\n    }\n    /**\n     * Load an @import'ed context.\n     * @param importContextIri The full URI of an @import value.\n     */\n    async loadImportContext(importContextIri) {\n        // Load the context\n        const importContext = await this.load(importContextIri);\n        // Require the context to be a non-array object\n        if (typeof importContext !== 'object' || Array.isArray(importContext)) {\n            throw new ErrorCoded_1.ErrorCoded('An imported context must be a single object: ' + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);\n        }\n        // Error if the context contains another @import\n        if ('@import' in importContext) {\n            throw new ErrorCoded_1.ErrorCoded('An imported context can not import another context: ' + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n        }\n        // Containers have to be converted into hash values the same way as for the importing context\n        // Otherwise context validation will fail for container values\n        this.containersToHash(importContext);\n        return importContext;\n    }\n}\nexports.ContextParser = ContextParser;\nContextParser.DEFAULT_PROCESSING_MODE = 1.1;\nexports.defaultExpandOptions = {\n    allowPrefixForcing: true,\n    allowPrefixNonGenDelims: false,\n    allowVocabRelativeToBase: true,\n};\n//# sourceMappingURL=ContextParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERROR_CODES = exports.ErrorCoded = void 0;\n/**\n * An error that has a certain error code.\n *\n * The error code can be any string.\n * All standardized error codes are listed in {@link ERROR_CODES}.\n */\nclass ErrorCoded extends Error {\n    /* istanbul ignore next */\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nexports.ErrorCoded = ErrorCoded;\n/**\n * All standardized JSON-LD error codes.\n * @see https://w3c.github.io/json-ld-api/#dom-jsonlderrorcode\n */\n// tslint:disable:object-literal-sort-keys\nvar ERROR_CODES;\n(function (ERROR_CODES) {\n    ERROR_CODES[\"COLLIDING_KEYWORDS\"] = \"colliding keywords\";\n    ERROR_CODES[\"CONFLICTING_INDEXES\"] = \"conflicting indexes\";\n    ERROR_CODES[\"CYCLIC_IRI_MAPPING\"] = \"cyclic IRI mapping\";\n    ERROR_CODES[\"INVALID_ID_VALUE\"] = \"invalid @id value\";\n    ERROR_CODES[\"INVALID_INDEX_VALUE\"] = \"invalid @index value\";\n    ERROR_CODES[\"INVALID_NEST_VALUE\"] = \"invalid @nest value\";\n    ERROR_CODES[\"INVALID_PREFIX_VALUE\"] = \"invalid @prefix value\";\n    ERROR_CODES[\"INVALID_PROPAGATE_VALUE\"] = \"invalid @propagate value\";\n    ERROR_CODES[\"INVALID_REVERSE_VALUE\"] = \"invalid @reverse value\";\n    ERROR_CODES[\"INVALID_IMPORT_VALUE\"] = \"invalid @import value\";\n    ERROR_CODES[\"INVALID_VERSION_VALUE\"] = \"invalid @version value\";\n    ERROR_CODES[\"INVALID_BASE_IRI\"] = \"invalid base IRI\";\n    ERROR_CODES[\"INVALID_CONTAINER_MAPPING\"] = \"invalid container mapping\";\n    ERROR_CODES[\"INVALID_CONTEXT_ENTRY\"] = \"invalid context entry\";\n    ERROR_CODES[\"INVALID_CONTEXT_NULLIFICATION\"] = \"invalid context nullification\";\n    ERROR_CODES[\"INVALID_DEFAULT_LANGUAGE\"] = \"invalid default language\";\n    ERROR_CODES[\"INVALID_INCLUDED_VALUE\"] = \"invalid @included value\";\n    ERROR_CODES[\"INVALID_IRI_MAPPING\"] = \"invalid IRI mapping\";\n    ERROR_CODES[\"INVALID_JSON_LITERAL\"] = \"invalid JSON literal\";\n    ERROR_CODES[\"INVALID_KEYWORD_ALIAS\"] = \"invalid keyword alias\";\n    ERROR_CODES[\"INVALID_LANGUAGE_MAP_VALUE\"] = \"invalid language map value\";\n    ERROR_CODES[\"INVALID_LANGUAGE_MAPPING\"] = \"invalid language mapping\";\n    ERROR_CODES[\"INVALID_LANGUAGE_TAGGED_STRING\"] = \"invalid language-tagged string\";\n    ERROR_CODES[\"INVALID_LANGUAGE_TAGGED_VALUE\"] = \"invalid language-tagged value\";\n    ERROR_CODES[\"INVALID_LOCAL_CONTEXT\"] = \"invalid local context\";\n    ERROR_CODES[\"INVALID_REMOTE_CONTEXT\"] = \"invalid remote context\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY\"] = \"invalid reverse property\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY_MAP\"] = \"invalid reverse property map\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY_VALUE\"] = \"invalid reverse property value\";\n    ERROR_CODES[\"INVALID_SCOPED_CONTEXT\"] = \"invalid scoped context\";\n    ERROR_CODES[\"INVALID_SCRIPT_ELEMENT\"] = \"invalid script element\";\n    ERROR_CODES[\"INVALID_SET_OR_LIST_OBJECT\"] = \"invalid set or list object\";\n    ERROR_CODES[\"INVALID_TERM_DEFINITION\"] = \"invalid term definition\";\n    ERROR_CODES[\"INVALID_TYPE_MAPPING\"] = \"invalid type mapping\";\n    ERROR_CODES[\"INVALID_TYPE_VALUE\"] = \"invalid type value\";\n    ERROR_CODES[\"INVALID_TYPED_VALUE\"] = \"invalid typed value\";\n    ERROR_CODES[\"INVALID_VALUE_OBJECT\"] = \"invalid value object\";\n    ERROR_CODES[\"INVALID_VALUE_OBJECT_VALUE\"] = \"invalid value object value\";\n    ERROR_CODES[\"INVALID_VOCAB_MAPPING\"] = \"invalid vocab mapping\";\n    ERROR_CODES[\"IRI_CONFUSED_WITH_PREFIX\"] = \"IRI confused with prefix\";\n    ERROR_CODES[\"KEYWORD_REDEFINITION\"] = \"keyword redefinition\";\n    ERROR_CODES[\"LOADING_DOCUMENT_FAILED\"] = \"loading document failed\";\n    ERROR_CODES[\"LOADING_REMOTE_CONTEXT_FAILED\"] = \"loading remote context failed\";\n    ERROR_CODES[\"MULTIPLE_CONTEXT_LINK_HEADERS\"] = \"multiple context link headers\";\n    ERROR_CODES[\"PROCESSING_MODE_CONFLICT\"] = \"processing mode conflict\";\n    ERROR_CODES[\"PROTECTED_TERM_REDEFINITION\"] = \"protected term redefinition\";\n    ERROR_CODES[\"CONTEXT_OVERFLOW\"] = \"context overflow\";\n    ERROR_CODES[\"INVALID_BASE_DIRECTION\"] = \"invalid base direction\";\n    ERROR_CODES[\"RECURSIVE_CONTEXT_INCLUSION\"] = \"recursive context inclusion\";\n    ERROR_CODES[\"INVALID_STREAMING_KEY_ORDER\"] = \"invalid streaming key order\";\n})(ERROR_CODES = exports.ERROR_CODES || (exports.ERROR_CODES = {}));\n//# sourceMappingURL=ErrorCoded.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FetchDocumentLoader = void 0;\nrequire(\"cross-fetch/polyfill\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst http_link_header_1 = require(\"http-link-header\");\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\n/**\n * Loads documents via the fetch API.\n */\nclass FetchDocumentLoader {\n    constructor(fetcher) {\n        this.fetcher = fetcher;\n    }\n    async load(url) {\n        const response = await (this.fetcher || fetch)(url, { headers: new Headers({ accept: 'application/ld+json' }) });\n        if (response.ok && response.headers) {\n            let mediaType = response.headers.get('Content-Type');\n            if (mediaType) {\n                const colonPos = mediaType.indexOf(';');\n                if (colonPos > 0) {\n                    mediaType = mediaType.substr(0, colonPos);\n                }\n            }\n            if (mediaType === 'application/ld+json') {\n                // Return JSON-LD if proper content type was returned\n                return (await response.json());\n            }\n            else {\n                // Check for alternate link for a non-JSON-LD response\n                if (response.headers.has('Link')) {\n                    let alternateUrl;\n                    response.headers.forEach((value, key) => {\n                        if (key === 'link') {\n                            const linkHeader = http_link_header_1.parse(value);\n                            for (const link of linkHeader.get('type', 'application/ld+json')) {\n                                if (link.rel === 'alternate') {\n                                    if (alternateUrl) {\n                                        throw new Error('Multiple JSON-LD alternate links were found on ' + url);\n                                    }\n                                    alternateUrl = relative_to_absolute_iri_1.resolve(link.uri, url);\n                                }\n                            }\n                        }\n                    });\n                    if (alternateUrl) {\n                        return this.load(alternateUrl);\n                    }\n                }\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, ErrorCoded_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        else {\n            throw new Error(response.statusText || `Status code: ${response.status}`);\n        }\n    }\n}\nexports.FetchDocumentLoader = FetchDocumentLoader;\n//# sourceMappingURL=FetchDocumentLoader.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=IDocumentLoader.js.map","\"use strict\";\n// tslint:disable:max-line-length\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=JsonLdContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonLdContextNormalized = void 0;\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst ContextParser_1 = require(\"./ContextParser\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst Util_1 = require(\"./Util\");\n/**\n * A class exposing operations over a normalized JSON-LD context.\n */\nclass JsonLdContextNormalized {\n    constructor(contextRaw) {\n        this.contextRaw = contextRaw;\n    }\n    /**\n     * @return The raw inner context.\n     */\n    getContextRaw() {\n        return this.contextRaw;\n    }\n    /**\n     * Expand the term or prefix of the given term if it has one,\n     * otherwise return the term as-is.\n     *\n     * This will try to expand the IRI as much as possible.\n     *\n     * Iff in vocab-mode, then other references to other terms in the context can be used,\n     * such as to `myTerm`:\n     * ```\n     * {\n     *   \"myTerm\": \"http://example.org/myLongTerm\"\n     * }\n     * ```\n     *\n     * @param {string} term A term that is an URL or a prefixed URL.\n     * @param {boolean} expandVocab If the term is a predicate or type and should be expanded based on @vocab,\n     *                              otherwise it is considered a regular term that is expanded based on @base.\n     * @param {IExpandOptions} options Options that define the way how expansion must be done.\n     * @return {string} The expanded term, the term as-is, or null if it was explicitly disabled in the context.\n     * @throws If the term is aliased to an invalid value (not a string, IRI or keyword).\n     */\n    expandTerm(term, expandVocab, options = ContextParser_1.defaultExpandOptions) {\n        const contextValue = this.contextRaw[term];\n        // Immediately return if the term was disabled in the context\n        if (contextValue === null || (contextValue && contextValue['@id'] === null)) {\n            return null;\n        }\n        // Check the @id\n        let validIriMapping = true;\n        if (contextValue && expandVocab) {\n            const value = Util_1.Util.getContextValueId(contextValue);\n            if (value && value !== term) {\n                if (typeof value !== 'string' || (!Util_1.Util.isValidIri(value) && !Util_1.Util.isValidKeyword(value))) {\n                    // Don't mark this mapping as invalid if we have an unknown keyword, but of the correct form.\n                    if (!Util_1.Util.isPotentialKeyword(value)) {\n                        validIriMapping = false;\n                    }\n                }\n                else {\n                    return value;\n                }\n            }\n        }\n        // Check if the term is prefixed\n        const prefix = Util_1.Util.getPrefix(term, this.contextRaw);\n        const vocab = this.contextRaw['@vocab'];\n        const vocabRelative = (!!vocab || vocab === '') && vocab.indexOf(':') < 0;\n        const base = this.contextRaw['@base'];\n        const potentialKeyword = Util_1.Util.isPotentialKeyword(term);\n        if (prefix) {\n            const contextPrefixValue = this.contextRaw[prefix];\n            const value = Util_1.Util.getContextValueId(contextPrefixValue);\n            if (value) {\n                if (typeof contextPrefixValue === 'string' || !options.allowPrefixForcing) {\n                    // If we have a simple term definition,\n                    // check the last character of the prefix to determine whether or not it is a prefix.\n                    // Validate that prefix ends with gen-delim character, unless @prefix is true\n                    if (!Util_1.Util.isSimpleTermDefinitionPrefix(value, options)) {\n                        // Treat the term as an absolute IRI\n                        return term;\n                    }\n                }\n                else {\n                    // If we have an expanded term definition, default to @prefix: false\n                    if (value[0] !== '_' && !potentialKeyword && !contextPrefixValue['@prefix'] && !(term in this.contextRaw)) {\n                        // Treat the term as an absolute IRI\n                        return term;\n                    }\n                }\n                return value + term.substr(prefix.length + 1);\n            }\n        }\n        else if (expandVocab && ((vocab || vocab === '') || (options.allowVocabRelativeToBase && (base && vocabRelative)))\n            && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {\n            if (vocabRelative) {\n                if (options.allowVocabRelativeToBase) {\n                    return ((vocab || base) ? relative_to_absolute_iri_1.resolve(vocab, base) : '') + term;\n                }\n                else {\n                    throw new ErrorCoded_1.ErrorCoded(`Relative vocab expansion for term '${term}' with vocab '${vocab}' is not allowed.`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);\n                }\n            }\n            else {\n                return vocab + term;\n            }\n        }\n        else if (!expandVocab && base && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {\n            return relative_to_absolute_iri_1.resolve(term, base);\n        }\n        // Return the term as-is, unless we discovered an invalid IRI mapping for this term in the context earlier.\n        if (validIriMapping) {\n            return term;\n        }\n        else {\n            throw new ErrorCoded_1.ErrorCoded(`Invalid IRI mapping found for context entry '${term}': '${JSON.stringify(contextValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n        }\n    }\n    /**\n     * Compact the given term using @base, @vocab, an aliased term, or a prefixed term.\n     *\n     * This will try to compact the IRI as much as possible.\n     *\n     * @param {string} iri An IRI to compact.\n     * @param {boolean} vocab If the term is a predicate or type and should be compacted based on @vocab,\n     *                        otherwise it is considered a regular term that is compacted based on @base.\n     * @return {string} The compacted term or the IRI as-is.\n     */\n    compactIri(iri, vocab) {\n        // Try @vocab compacting\n        if (vocab && this.contextRaw['@vocab'] && iri.startsWith(this.contextRaw['@vocab'])) {\n            return iri.substr(this.contextRaw['@vocab'].length);\n        }\n        // Try @base compacting\n        if (!vocab && this.contextRaw['@base'] && iri.startsWith(this.contextRaw['@base'])) {\n            return iri.substr(this.contextRaw['@base'].length);\n        }\n        // Loop over all terms in the context\n        // This will try to prefix as short as possible.\n        // Once a fully compacted alias is found, return immediately, as we can not go any shorter.\n        const shortestPrefixing = { prefix: '', suffix: iri };\n        for (const key in this.contextRaw) {\n            const value = this.contextRaw[key];\n            if (value && !Util_1.Util.isPotentialKeyword(key)) {\n                const contextIri = Util_1.Util.getContextValueId(value);\n                if (iri.startsWith(contextIri)) {\n                    const suffix = iri.substr(contextIri.length);\n                    if (!suffix) {\n                        if (vocab) {\n                            // Immediately return on compacted alias\n                            return key;\n                        }\n                    }\n                    else if (suffix.length < shortestPrefixing.suffix.length) {\n                        // Overwrite the shortest prefix\n                        shortestPrefixing.prefix = key;\n                        shortestPrefixing.suffix = suffix;\n                    }\n                }\n            }\n        }\n        // Return the shortest prefix\n        if (shortestPrefixing.prefix) {\n            return shortestPrefixing.prefix + ':' + shortestPrefixing.suffix;\n        }\n        return iri;\n    }\n}\nexports.JsonLdContextNormalized = JsonLdContextNormalized;\n//# sourceMappingURL=JsonLdContextNormalized.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nclass Util {\n    /**\n     * Check if the given term is a valid compact IRI.\n     * Otherwise, it may be an IRI.\n     * @param {string} term A term.\n     * @return {boolean} If it is a compact IRI.\n     */\n    static isCompactIri(term) {\n        return term.indexOf(':') > 0 && !(term && term[0] === '#');\n    }\n    /**\n     * Get the prefix from the given term.\n     * @see https://json-ld.org/spec/latest/json-ld/#compact-iris\n     * @param {string} term A term that is an URL or a prefixed URL.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @return {string} The prefix or null.\n     */\n    static getPrefix(term, context) {\n        // Do not consider relative IRIs starting with a hash as compact IRIs\n        if (term && term[0] === '#') {\n            return null;\n        }\n        const separatorPos = term.indexOf(':');\n        if (separatorPos >= 0) {\n            // Suffix can not begin with two slashes\n            if (term.length > separatorPos + 1\n                && term.charAt(separatorPos + 1) === '/'\n                && term.charAt(separatorPos + 2) === '/') {\n                return null;\n            }\n            const prefix = term.substr(0, separatorPos);\n            // Prefix can not be an underscore (this is a blank node)\n            if (prefix === '_') {\n                return null;\n            }\n            // Prefix must match a term in the active context\n            if (context[prefix]) {\n                return prefix;\n            }\n        }\n        return null;\n    }\n    /**\n     * From a given context entry value, get the string value, or the @id field.\n     * @param contextValue A value for a term in a context.\n     * @return {string} The id value, or null.\n     */\n    static getContextValueId(contextValue) {\n        if (contextValue === null || typeof contextValue === 'string') {\n            return contextValue;\n        }\n        const id = contextValue['@id'];\n        return id ? id : null;\n    }\n    /**\n     * Check if the given simple term definition (string-based value of a context term)\n     * should be considered a prefix.\n     * @param value A simple term definition value.\n     * @param options Options that define the way how expansion must be done.\n     */\n    static isSimpleTermDefinitionPrefix(value, options) {\n        return !Util.isPotentialKeyword(value)\n            && (value[0] === '_' || options.allowPrefixNonGenDelims || Util.isPrefixIriEndingWithGenDelim(value));\n    }\n    /**\n     * Check if the given keyword is of the keyword format \"@\"1*ALPHA.\n     * @param {string} keyword A potential keyword.\n     * @return {boolean} If the given keyword is of the keyword format.\n     */\n    static isPotentialKeyword(keyword) {\n        return typeof keyword === 'string' && Util.KEYWORD_REGEX.test(keyword);\n    }\n    /**\n     * Check if the given prefix ends with a gen-delim character.\n     * @param {string} prefixIri A prefix IRI.\n     * @return {boolean} If the given prefix IRI is valid.\n     */\n    static isPrefixIriEndingWithGenDelim(prefixIri) {\n        return Util.ENDS_WITH_GEN_DELIM.test(prefixIri);\n    }\n    /**\n     * Check if the given context value can be a prefix value.\n     * @param value A context value.\n     * @return {boolean} If it can be a prefix value.\n     */\n    static isPrefixValue(value) {\n        return value && (typeof value === 'string' || (value && typeof value === 'object'));\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return Boolean(iri && Util.IRI_REGEX.test(iri));\n    }\n    /**\n     * Check if the given IRI is valid, this includes the possibility of being a relative IRI.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIriWeak(iri) {\n        return !!iri && iri[0] !== ':' && Util.IRI_REGEX_WEAK.test(iri);\n    }\n    /**\n     * Check if the given keyword is a defined according to the JSON-LD specification.\n     * @param {string} keyword A potential keyword.\n     * @return {boolean} If the given keyword is valid.\n     */\n    static isValidKeyword(keyword) {\n        return Util.VALID_KEYWORDS[keyword];\n    }\n    /**\n     * Check if the given term is protected in the context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {string} key A context term.\n     * @return {boolean} If the given term has an @protected flag.\n     */\n    static isTermProtected(context, key) {\n        const value = context[key];\n        return !(typeof value === 'string') && value && value['@protected'];\n    }\n    /**\n     * Check if the given context has at least one protected term.\n     * @param context A context.\n     * @return If the context has a protected term.\n     */\n    static hasProtectedTerms(context) {\n        for (const key of Object.keys(context)) {\n            if (Util.isTermProtected(context, key)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Check if the given key is an internal reserved keyword.\n     * @param key A context key.\n     */\n    static isReservedInternalKeyword(key) {\n        return key.startsWith('@__');\n    }\n}\nexports.Util = Util;\n// Regex for valid IRIs\nUtil.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^ \"<>{}|\\\\\\[\\]`#]*(#[^#]*)?$/;\n// Weaker regex for valid IRIs, this includes relative IRIs\nUtil.IRI_REGEX_WEAK = /(?::[^:])|\\//;\n// Regex for keyword form\nUtil.KEYWORD_REGEX = /^@[a-z]+$/i;\n// Regex to see if an IRI ends with a gen-delim character (see RFC 3986)\nUtil.ENDS_WITH_GEN_DELIM = /[:/?#\\[\\]@]$/;\n// Regex for language tags\nUtil.REGEX_LANGUAGE_TAG = /^[a-zA-Z]+(-[a-zA-Z0-9]+)*$/;\n// Regex for base directions\nUtil.REGEX_DIRECTION_TAG = /^(ltr)|(rtl)$/;\n// All known valid JSON-LD keywords\n// @see https://www.w3.org/TR/json-ld11/#keywords\nUtil.VALID_KEYWORDS = {\n    '@base': true,\n    '@container': true,\n    '@context': true,\n    '@direction': true,\n    '@graph': true,\n    '@id': true,\n    '@import': true,\n    '@included': true,\n    '@index': true,\n    '@json': true,\n    '@language': true,\n    '@list': true,\n    '@nest': true,\n    '@none': true,\n    '@prefix': true,\n    '@propagate': true,\n    '@protected': true,\n    '@reverse': true,\n    '@set': true,\n    '@type': true,\n    '@value': true,\n    '@version': true,\n    '@vocab': true,\n};\n// Keys in the contexts that will not be expanded based on the base IRI\nUtil.EXPAND_KEYS_BLACKLIST = [\n    '@base',\n    '@vocab',\n    '@language',\n    '@version',\n    '@direction',\n];\n// Keys in the contexts that may not be aliased from\nUtil.ALIAS_DOMAIN_BLACKLIST = [\n    '@container',\n    '@graph',\n    '@id',\n    '@index',\n    '@list',\n    '@nest',\n    '@none',\n    '@prefix',\n    '@reverse',\n    '@set',\n    '@type',\n    '@value',\n    '@version',\n];\n// Keys in the contexts that may not be aliased to\nUtil.ALIAS_RANGE_BLACKLIST = [\n    '@context',\n    '@preserve',\n];\n// All valid @container values\nUtil.CONTAINERS = [\n    '@list',\n    '@set',\n    '@index',\n    '@language',\n    '@graph',\n    '@id',\n    '@type',\n];\n// All valid @container values under processing mode 1.0\nUtil.CONTAINERS_1_0 = [\n    '@list',\n    '@set',\n    '@index',\n];\n//# sourceMappingURL=Util.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/JsonLdParser\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextTree = void 0;\n/**\n * A tree structure that holds all contexts,\n * based on their position in the JSON object.\n *\n * Positions are identified by a path of keys.\n */\nclass ContextTree {\n    constructor() {\n        this.subTrees = {};\n    }\n    getContext(keys) {\n        if (keys.length > 0) {\n            const [head, ...tail] = keys;\n            const subTree = this.subTrees[head];\n            if (subTree) {\n                const subContext = subTree.getContext(tail);\n                if (subContext) {\n                    return subContext.then(({ context, depth }) => ({ context, depth: depth + 1 }));\n                }\n            }\n        }\n        return this.context ? this.context.then((context) => ({ context, depth: 0 })) : null;\n    }\n    setContext(keys, context) {\n        if (keys.length === 0) {\n            this.context = context;\n        }\n        else {\n            const [head, ...tail] = keys;\n            let subTree = this.subTrees[head];\n            if (!subTree) {\n                subTree = this.subTrees[head] = new ContextTree();\n            }\n            subTree.setContext(tail, context);\n        }\n    }\n    removeContext(path) {\n        this.setContext(path, null);\n    }\n}\nexports.ContextTree = ContextTree;\n//# sourceMappingURL=ContextTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonLdParser = void 0;\n// tslint:disable-next-line:no-var-requires\nconst Parser = require('jsonparse');\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst stream_1 = require(\"stream\");\nconst EntryHandlerArrayValue_1 = require(\"./entryhandler/EntryHandlerArrayValue\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\nconst EntryHandlerInvalidFallback_1 = require(\"./entryhandler/EntryHandlerInvalidFallback\");\nconst EntryHandlerPredicate_1 = require(\"./entryhandler/EntryHandlerPredicate\");\nconst EntryHandlerKeywordContext_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordContext\");\nconst EntryHandlerKeywordGraph_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordGraph\");\nconst EntryHandlerKeywordId_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordId\");\nconst EntryHandlerKeywordIncluded_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordIncluded\");\nconst EntryHandlerKeywordNest_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordNest\");\nconst EntryHandlerKeywordType_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordType\");\nconst EntryHandlerKeywordUnknownFallback_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordUnknownFallback\");\nconst EntryHandlerKeywordValue_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordValue\");\nconst ParsingContext_1 = require(\"./ParsingContext\");\nconst Util_1 = require(\"./Util\");\nconst http_link_header_1 = require(\"http-link-header\");\n/**\n * A stream transformer that parses JSON-LD (text) streams to an {@link RDF.Stream}.\n */\nclass JsonLdParser extends stream_1.Transform {\n    constructor(options) {\n        super({ readableObjectMode: true });\n        options = options || {};\n        this.options = options;\n        this.parsingContext = new ParsingContext_1.ParsingContext(Object.assign({ parser: this }, options));\n        this.util = new Util_1.Util({ dataFactory: options.dataFactory, parsingContext: this.parsingContext });\n        this.jsonParser = new Parser();\n        this.contextJobs = [];\n        this.typeJobs = [];\n        this.contextAwaitingJobs = [];\n        this.lastDepth = 0;\n        this.lastKeys = [];\n        this.lastOnValueJob = Promise.resolve();\n        this.attachJsonParserListeners();\n        this.on('end', () => {\n            if (typeof this.jsonParser.mode !== 'undefined') {\n                this.emit('error', new Error('Unclosed document'));\n            }\n        });\n    }\n    /**\n     * Construct a JsonLdParser from the given HTTP response.\n     *\n     * This will throw an error if no valid JSON response is received\n     * (application/ld+json, application/json, or something+json).\n     *\n     * For raw JSON responses, exactly one link header pointing to a JSON-LD context is required.\n     *\n     * This method is not responsible for handling redirects.\n     *\n     * @param baseIRI The URI of the received response.\n     * @param mediaType The received content type.\n     * @param headers Optional HTTP headers.\n     * @param options Optional parser options.\n     */\n    static fromHttpResponse(baseIRI, mediaType, headers, options) {\n        let context;\n        // Special cases when receiving something else than the JSON-LD media type\n        if (mediaType !== 'application/ld+json') {\n            // Only accept JSON or JSON extension types\n            if (mediaType !== 'application/json' && !mediaType.endsWith('+json')) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n            // We need exactly one JSON-LD context in the link header\n            if (headers && headers.has('Link')) {\n                headers.forEach((value, key) => {\n                    if (key === 'link') {\n                        const linkHeader = http_link_header_1.parse(value);\n                        for (const link of linkHeader.get('rel', 'http://www.w3.org/ns/json-ld#context')) {\n                            if (context) {\n                                throw new jsonld_context_parser_1.ErrorCoded('Multiple JSON-LD context link headers were found on ' + baseIRI, jsonld_context_parser_1.ERROR_CODES.MULTIPLE_CONTEXT_LINK_HEADERS);\n                            }\n                            context = link.uri;\n                        }\n                    }\n                });\n            }\n            if (!context && !(options === null || options === void 0 ? void 0 : options.ignoreMissingContextLinkHeader)) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Missing context link header for media type ${mediaType} on ${baseIRI}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        // Check if the streaming profile is present\n        let streamingProfile;\n        if (headers && headers.has('Content-Type')) {\n            const contentType = headers.get('Content-Type');\n            const match = /; *profile=([^\"]*)/.exec(contentType);\n            if (match && match[1] === 'http://www.w3.org/ns/json-ld#streaming') {\n                streamingProfile = true;\n            }\n        }\n        return new JsonLdParser(Object.assign({ baseIRI,\n            context,\n            streamingProfile }, options ? options : {}));\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        const output = new stream_1.PassThrough({ readableObjectMode: true });\n        stream.on('error', (error) => parsed.emit('error', error));\n        stream.on('data', (data) => output.push(data));\n        stream.on('end', () => output.push(null));\n        const parsed = output.pipe(new JsonLdParser(this.options));\n        return parsed;\n    }\n    _transform(chunk, encoding, callback) {\n        this.jsonParser.write(chunk);\n        this.lastOnValueJob\n            .then(() => callback(), (error) => callback(error));\n    }\n    /**\n     * Start a new job for parsing the given value.\n     *\n     * This will let the first valid {@link IEntryHandler} handle the entry.\n     *\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        let flushStacks = true;\n        // When we go up the stack, emit all unidentified values\n        // We need to do this before the new job, because the new job may require determined values from the flushed jobs.\n        if (lastDepthCheck && depth < this.lastDepth) {\n            // Check if we had any RDF lists that need to be terminated with an rdf:nil\n            const listPointer = this.parsingContext.listPointerStack[this.lastDepth];\n            if (listPointer) {\n                // Terminate the list if the had at least one value\n                if (listPointer.value) {\n                    this.emit('data', this.util.dataFactory.quad(listPointer.value, this.util.rdfRest, this.util.rdfNil, this.util.getDefaultGraph()));\n                }\n                // Add the list id to the id stack, so it can be used higher up in the stack\n                listPointer.listId.listHead = true;\n                this.parsingContext.idStack[listPointer.listRootDepth + 1] = [listPointer.listId];\n                this.parsingContext.listPointerStack.splice(this.lastDepth, 1);\n            }\n            // Flush the buffer for lastDepth\n            // If the parent key is a special type of container, postpone flushing until that parent is handled.\n            if (await EntryHandlerContainer_1.EntryHandlerContainer.isBufferableContainerHandler(this.parsingContext, this.lastKeys, this.lastDepth)) {\n                this.parsingContext.pendingContainerFlushBuffers\n                    .push({ depth: this.lastDepth, keys: this.lastKeys.slice(0, this.lastKeys.length) });\n                flushStacks = false;\n            }\n            else {\n                await this.flushBuffer(this.lastDepth, this.lastKeys);\n            }\n        }\n        const key = await this.util.unaliasKeyword(keys[depth], keys, depth);\n        const parentKey = await this.util.unaliasKeywordParent(keys, depth);\n        this.parsingContext.emittedStack[depth] = true;\n        let handleKey = true;\n        // Keywords inside @reverse is not allowed apart from @context\n        if (jsonld_context_parser_1.Util.isValidKeyword(key) && parentKey === '@reverse' && key !== '@context') {\n            this.emit('error', new jsonld_context_parser_1.ErrorCoded(`Found the @id '${value}' inside an @reverse property`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_MAP));\n        }\n        // Skip further processing if one of the parent nodes are invalid.\n        // We use the validationStack to reuse validation results that were produced before with common key stacks.\n        let inProperty = false;\n        if (this.parsingContext.validationStack.length > 1) {\n            inProperty = this.parsingContext.validationStack[this.parsingContext.validationStack.length - 1].property;\n        }\n        for (let i = Math.max(1, this.parsingContext.validationStack.length - 1); i < keys.length - 1; i++) {\n            const validationResult = this.parsingContext.validationStack[i]\n                || (this.parsingContext.validationStack[i] = await this.validateKey(keys.slice(0, i + 1), i, inProperty));\n            if (!validationResult.valid) {\n                this.parsingContext.emittedStack[depth] = false;\n                handleKey = false;\n                break;\n            }\n            else if (!inProperty && validationResult.property) {\n                inProperty = true;\n            }\n        }\n        // Skip further processing if this node is part of a literal\n        if (this.util.isLiteral(depth)) {\n            handleKey = false;\n        }\n        // Get handler\n        if (handleKey) {\n            for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n                const testResult = await entryHandler.test(this.parsingContext, this.util, key, keys, depth);\n                if (testResult) {\n                    // Pass processing over to the handler\n                    await entryHandler.handle(this.parsingContext, this.util, key, keys, value, depth, testResult);\n                    // Flag that this depth is processed\n                    if (entryHandler.isStackProcessor()) {\n                        this.parsingContext.processingStack[depth] = true;\n                    }\n                    break;\n                }\n            }\n        }\n        // Validate value indexes on the root.\n        if (depth === 0 && Array.isArray(value)) {\n            await this.util.validateValueIndexes(value);\n        }\n        // When we go up the stack, flush the old stack\n        if (flushStacks && depth < this.lastDepth) {\n            // Reset our stacks\n            this.flushStacks(this.lastDepth);\n        }\n        this.lastDepth = depth;\n        this.lastKeys = keys;\n        // Clear the keyword cache at this depth, and everything underneath.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(depth - 1);\n    }\n    /**\n     * Flush the processing stacks at the given depth.\n     * @param {number} depth A depth.\n     */\n    flushStacks(depth) {\n        this.parsingContext.processingStack.splice(depth, 1);\n        this.parsingContext.processingType.splice(depth, 1);\n        this.parsingContext.emittedStack.splice(depth, 1);\n        this.parsingContext.idStack.splice(depth, 1);\n        this.parsingContext.graphStack.splice(depth + 1, 1);\n        this.parsingContext.graphContainerTermStack.splice(depth, 1);\n        this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        this.parsingContext.validationStack.splice(depth - 1, 2);\n        this.parsingContext.literalStack.splice(depth, this.parsingContext.literalStack.length - depth);\n        // TODO: just like the literal stack, splice all other stack until the end as well?\n    }\n    /**\n     * Flush buffers for the given depth.\n     *\n     * This should be called after the last entry at a given depth was processed.\n     *\n     * @param {number} depth A depth.\n     * @param {any[]} keys A stack of keys.\n     * @return {Promise<void>} A promise resolving if flushing is done.\n     */\n    async flushBuffer(depth, keys) {\n        let subjects = this.parsingContext.idStack[depth];\n        if (!subjects) {\n            subjects = this.parsingContext.idStack[depth] = [this.util.dataFactory.blankNode()];\n        }\n        // Flush values at this level\n        const valueBuffer = this.parsingContext.unidentifiedValuesBuffer[depth];\n        if (valueBuffer) {\n            for (const subject of subjects) {\n                const depthOffsetGraph = await this.util.getDepthOffsetGraph(depth, keys);\n                const graphs = (this.parsingContext.graphStack[depth] || depthOffsetGraph >= 0)\n                    ? this.parsingContext.idStack[depth - depthOffsetGraph - 1]\n                    : [await this.util.getGraphContainerValue(keys, depth)];\n                if (graphs) {\n                    for (const graph of graphs) {\n                        // Flush values to stream if the graph @id is known\n                        this.parsingContext.emittedStack[depth] = true;\n                        for (const bufferedValue of valueBuffer) {\n                            if (bufferedValue.reverse) {\n                                this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.object, bufferedValue.predicate, subject, graph));\n                            }\n                            else {\n                                this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(subject, bufferedValue.predicate, bufferedValue.object, graph));\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Place the values in the graphs buffer if the graph @id is not yet known\n                    const subGraphBuffer = this.parsingContext.getUnidentifiedGraphBufferSafe(depth - await this.util.getDepthOffsetGraph(depth, keys) - 1);\n                    for (const bufferedValue of valueBuffer) {\n                        if (bufferedValue.reverse) {\n                            subGraphBuffer.push({\n                                object: subject,\n                                predicate: bufferedValue.predicate,\n                                subject: bufferedValue.object,\n                            });\n                        }\n                        else {\n                            subGraphBuffer.push({\n                                object: bufferedValue.object,\n                                predicate: bufferedValue.predicate,\n                                subject,\n                            });\n                        }\n                    }\n                }\n            }\n            this.parsingContext.unidentifiedValuesBuffer.splice(depth, 1);\n            this.parsingContext.literalStack.splice(depth, 1);\n            this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        }\n        // Flush graphs at this level\n        const graphBuffer = this.parsingContext.unidentifiedGraphsBuffer[depth];\n        if (graphBuffer) {\n            for (const subject of subjects) {\n                // A @graph statement at the root without @id relates to the default graph,\n                // unless there are top-level properties,\n                // others relate to blank nodes.\n                const graph = depth === 1 && subject.termType === 'BlankNode'\n                    && !this.parsingContext.topLevelProperties ? this.util.getDefaultGraph() : subject;\n                this.parsingContext.emittedStack[depth] = true;\n                for (const bufferedValue of graphBuffer) {\n                    this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.subject, bufferedValue.predicate, bufferedValue.object, graph));\n                }\n            }\n            this.parsingContext.unidentifiedGraphsBuffer.splice(depth, 1);\n        }\n    }\n    /**\n     * Check if at least one {@link IEntryHandler} validates the entry to true.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth A depth.\n     * @param {boolean} inProperty If the current depth is part of a valid property node.\n     * @return {Promise<{ valid: boolean, property: boolean }>} A promise resolving to true or false.\n     */\n    async validateKey(keys, depth, inProperty) {\n        for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n            if (await entryHandler.validate(this.parsingContext, this.util, keys, depth, inProperty)) {\n                return { valid: true, property: inProperty || entryHandler.isPropertyHandler() };\n            }\n        }\n        return { valid: false, property: false };\n    }\n    /**\n     * Attach all required listeners to the JSON parser.\n     *\n     * This should only be called once.\n     */\n    attachJsonParserListeners() {\n        // Listen to json parser events\n        this.jsonParser.onValue = (value) => {\n            const depth = this.jsonParser.stack.length;\n            const keys = (new Array(depth + 1).fill(0)).map((v, i) => {\n                return i === depth ? this.jsonParser.key : this.jsonParser.stack[i].key;\n            });\n            if (!this.isParsingContextInner(depth)) { // Don't parse inner nodes inside @context\n                const valueJobCb = () => this.newOnValueJob(keys, value, depth, true);\n                if (!this.parsingContext.streamingProfile\n                    && !this.parsingContext.contextTree.getContext(keys.slice(0, -1))) {\n                    // If an out-of-order context is allowed,\n                    // we have to buffer everything.\n                    // We store jobs for @context's and @type's separately,\n                    // because at the end, we have to process them first.\n                    // We also handle @type because these *could* introduce a type-scoped context.\n                    if (keys[depth] === '@context') {\n                        let jobs = this.contextJobs[depth];\n                        if (!jobs) {\n                            jobs = this.contextJobs[depth] = [];\n                        }\n                        jobs.push(valueJobCb);\n                    }\n                    else if (keys[depth] === '@type'\n                        || typeof keys[depth] === 'number' && keys[depth - 1] === '@type') { // Also capture @type with array values\n                        // Remove @type from keys, because we want it to apply to parent later on\n                        this.typeJobs.push({ job: valueJobCb, keys: keys.slice(0, keys.length - 1) });\n                    }\n                    else {\n                        this.contextAwaitingJobs.push({ job: valueJobCb, keys });\n                    }\n                }\n                else {\n                    // Make sure that our value jobs are chained synchronously\n                    this.lastOnValueJob = this.lastOnValueJob.then(valueJobCb);\n                }\n                // Execute all buffered jobs on deeper levels\n                if (!this.parsingContext.streamingProfile && depth === 0) {\n                    this.lastOnValueJob = this.lastOnValueJob\n                        .then(() => this.executeBufferedJobs());\n                }\n            }\n        };\n        this.jsonParser.onError = (error) => {\n            this.emit('error', error);\n        };\n    }\n    /**\n     * Check if the parser is currently parsing an element that is part of an @context entry.\n     * @param {number} depth A depth.\n     * @return {boolean} A boolean.\n     */\n    isParsingContextInner(depth) {\n        for (let i = depth; i > 0; i--) {\n            if (this.jsonParser.stack[i - 1].key === '@context') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Execute all buffered jobs.\n     * @return {Promise<void>} A promise resolving if all jobs are finished.\n     */\n    async executeBufferedJobs() {\n        // Handle context jobs\n        for (const jobs of this.contextJobs) {\n            if (jobs) {\n                for (const job of jobs) {\n                    await job();\n                }\n            }\n        }\n        // Clear the keyword cache.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(0);\n        // Handle non-context jobs\n        for (const job of this.contextAwaitingJobs) {\n            // Check if we have a type (with possible type-scoped context) that should be handled before.\n            // We check all possible parent nodes for the current job, from root to leaves.\n            if (this.typeJobs.length > 0) {\n                // First collect all applicable type jobs\n                const applicableTypeJobs = [];\n                const applicableTypeJobIds = [];\n                for (let i = 0; i < this.typeJobs.length; i++) {\n                    const typeJob = this.typeJobs[i];\n                    if (Util_1.Util.isPrefixArray(typeJob.keys, job.keys)) {\n                        applicableTypeJobs.push(typeJob);\n                        applicableTypeJobIds.push(i);\n                    }\n                }\n                // Next, sort the jobs from short to long key length (to ensure types higher up in the tree to be handled first)\n                const sortedTypeJobs = applicableTypeJobs.sort((job1, job2) => job1.keys.length - job2.keys.length);\n                // Finally, execute the jobs in order\n                for (const typeJob of sortedTypeJobs) {\n                    await typeJob.job();\n                }\n                // Remove the executed type jobs\n                // Sort first, so we can efficiently splice\n                const sortedApplicableTypeJobIds = applicableTypeJobIds.sort().reverse();\n                for (const jobId of sortedApplicableTypeJobIds) {\n                    this.typeJobs.splice(jobId, 1);\n                }\n            }\n            await job.job();\n        }\n    }\n}\nexports.JsonLdParser = JsonLdParser;\nJsonLdParser.DEFAULT_PROCESSING_MODE = '1.1';\nJsonLdParser.ENTRY_HANDLERS = [\n    new EntryHandlerArrayValue_1.EntryHandlerArrayValue(),\n    new EntryHandlerKeywordContext_1.EntryHandlerKeywordContext(),\n    new EntryHandlerKeywordId_1.EntryHandlerKeywordId(),\n    new EntryHandlerKeywordIncluded_1.EntryHandlerKeywordIncluded(),\n    new EntryHandlerKeywordGraph_1.EntryHandlerKeywordGraph(),\n    new EntryHandlerKeywordNest_1.EntryHandlerKeywordNest(),\n    new EntryHandlerKeywordType_1.EntryHandlerKeywordType(),\n    new EntryHandlerKeywordValue_1.EntryHandlerKeywordValue(),\n    new EntryHandlerContainer_1.EntryHandlerContainer(),\n    new EntryHandlerKeywordUnknownFallback_1.EntryHandlerKeywordUnknownFallback(),\n    new EntryHandlerPredicate_1.EntryHandlerPredicate(),\n    new EntryHandlerInvalidFallback_1.EntryHandlerInvalidFallback(),\n];\n//# sourceMappingURL=JsonLdParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParsingContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst ErrorCoded_1 = require(\"jsonld-context-parser/lib/ErrorCoded\");\nconst ContextTree_1 = require(\"./ContextTree\");\nconst JsonLdParser_1 = require(\"./JsonLdParser\");\n/**\n * Data holder for parsing information.\n */\nclass ParsingContext {\n    constructor(options) {\n        // Initialize settings\n        this.contextParser = new jsonld_context_parser_1.ContextParser({ documentLoader: options.documentLoader, skipValidation: options.skipContextValidation });\n        this.streamingProfile = !!options.streamingProfile;\n        this.baseIRI = options.baseIRI;\n        this.produceGeneralizedRdf = !!options.produceGeneralizedRdf;\n        this.allowSubjectList = !!options.allowSubjectList;\n        this.processingMode = options.processingMode || JsonLdParser_1.JsonLdParser.DEFAULT_PROCESSING_MODE;\n        this.strictValues = !!options.strictValues;\n        this.validateValueIndexes = !!options.validateValueIndexes;\n        this.defaultGraph = options.defaultGraph;\n        this.rdfDirection = options.rdfDirection;\n        this.normalizeLanguageTags = options.normalizeLanguageTags;\n        this.streamingProfileAllowOutOfOrderPlainType = options.streamingProfileAllowOutOfOrderPlainType;\n        this.topLevelProperties = false;\n        this.activeProcessingMode = parseFloat(this.processingMode);\n        // Initialize stacks\n        this.processingStack = [];\n        this.processingType = [];\n        this.emittedStack = [];\n        this.idStack = [];\n        this.graphStack = [];\n        this.graphContainerTermStack = [];\n        this.listPointerStack = [];\n        this.contextTree = new ContextTree_1.ContextTree();\n        this.literalStack = [];\n        this.validationStack = [];\n        this.unaliasedKeywordCacheStack = [];\n        this.jsonLiteralStack = [];\n        this.unidentifiedValuesBuffer = [];\n        this.unidentifiedGraphsBuffer = [];\n        this.pendingContainerFlushBuffers = [];\n        this.parser = options.parser;\n        if (options.context) {\n            this.rootContext = this.parseContext(options.context);\n            this.rootContext.then((context) => this.validateContext(context));\n        }\n        else {\n            this.rootContext = Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(this.baseIRI ? { '@base': this.baseIRI, '@__baseDocument': true } : {}));\n        }\n    }\n    /**\n     * Parse the given context with the configured options.\n     * @param {JsonLdContext} context A context to parse.\n     * @param {JsonLdContextNormalized} parentContext An optional parent context.\n     * @param {boolean} ignoreProtection If @protected term checks should be ignored.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to the parsed context.\n     */\n    async parseContext(context, parentContext, ignoreProtection) {\n        return this.contextParser.parse(context, {\n            baseIRI: this.baseIRI,\n            ignoreProtection,\n            normalizeLanguageTags: this.normalizeLanguageTags,\n            parentContext,\n            processingMode: this.activeProcessingMode,\n        });\n    }\n    /**\n     * Check if the given context is valid.\n     * If not, an error will be thrown.\n     * @param {JsonLdContextNormalized} context A context.\n     */\n    validateContext(context) {\n        const activeVersion = context.getContextRaw()['@version'];\n        if (activeVersion) {\n            if (this.activeProcessingMode && activeVersion > this.activeProcessingMode) {\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD version '${activeVersion}' under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.PROCESSING_MODE_CONFLICT);\n            }\n            else {\n                if (this.activeProcessingMode && activeVersion < this.activeProcessingMode) {\n                    throw new ErrorCoded_1.ErrorCoded(`Invalid JSON-LD version ${activeVersion} under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);\n                }\n                this.activeProcessingMode = activeVersion;\n            }\n        }\n    }\n    /**\n     * Get the context at the given path.\n     * @param {keys} keys The path of keys to get the context at.\n     * @param {number} offset The path offset, defaults to 1.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to a context.\n     */\n    async getContext(keys, offset = 1) {\n        const keysOriginal = keys;\n        // Ignore array keys at the end\n        while (typeof keys[keys.length - 1] === 'number') {\n            keys = keys.slice(0, keys.length - 1);\n        }\n        // Handle offset on keys\n        if (offset) {\n            keys = keys.slice(0, -offset);\n        }\n        // Determine the closest context\n        const contextData = await this.getContextPropagationAware(keys);\n        const context = contextData.context;\n        // Process property-scoped contexts (high-to-low)\n        let contextRaw = context.getContextRaw();\n        for (let i = contextData.depth; i < keysOriginal.length - offset; i++) {\n            const key = keysOriginal[i];\n            const contextKeyEntry = contextRaw[key];\n            if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n                const scopedContext = (await this.parseContext(contextKeyEntry, contextRaw, true)).getContextRaw();\n                const propagate = !(key in scopedContext)\n                    || scopedContext[key]['@context']['@propagate']; // Propagation is true by default\n                if (propagate !== false || i === keysOriginal.length - 1 - offset) {\n                    contextRaw = scopedContext;\n                    // Clean up final context\n                    delete contextRaw['@propagate'];\n                    contextRaw[key] = Object.assign({}, contextRaw[key]);\n                    if ('@id' in contextKeyEntry) {\n                        contextRaw[key]['@id'] = contextKeyEntry['@id'];\n                    }\n                    delete contextRaw[key]['@context'];\n                    if (propagate !== false) {\n                        this.contextTree.setContext(keysOriginal.slice(0, i + offset), Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw)));\n                    }\n                }\n            }\n        }\n        return new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw);\n    }\n    /**\n     * Get the context at the given path.\n     * Non-propagating contexts will be skipped,\n     * unless the context at that exact depth is retrieved.\n     *\n     * This ONLY takes into account context propagation logic,\n     * so this should usually not be called directly,\n     * call {@link #getContext} instead.\n     *\n     * @param keys The path of keys to get the context at.\n     * @return {Promise<{ context: JsonLdContextNormalized, depth: number }>} A context and its depth.\n     */\n    async getContextPropagationAware(keys) {\n        const originalDepth = keys.length;\n        let contextData = null;\n        let hasApplicablePropertyScopedContext;\n        do {\n            hasApplicablePropertyScopedContext = false;\n            if (contextData && '@__propagateFallback' in contextData.context.getContextRaw()) {\n                // If a propagation fallback context has been set,\n                // fallback to that context and retry for the same depth.\n                contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized(contextData.context.getContextRaw()['@__propagateFallback']);\n            }\n            else {\n                if (contextData) {\n                    // If we had a previous iteration, jump to the parent of context depth.\n                    // We must do this because once we get here, last context had propagation disabled,\n                    // so we check its first parent instead.\n                    keys = keys.slice(0, contextData.depth - 1);\n                }\n                contextData = await this.contextTree.getContext(keys) || { context: await this.rootContext, depth: 0 };\n            }\n            // Allow non-propagating contexts to propagate one level deeper\n            // if it defines a property-scoped context that is applicable for the current key.\n            // @see https://w3c.github.io/json-ld-api/tests/toRdf-manifest#tc012\n            const lastKey = keys[keys.length - 1];\n            if (lastKey in contextData.context.getContextRaw()) {\n                const lastKeyValue = contextData.context.getContextRaw()[lastKey];\n                if (lastKeyValue && typeof lastKeyValue === 'object' && '@context' in lastKeyValue) {\n                    hasApplicablePropertyScopedContext = true;\n                }\n            }\n        } while (contextData.depth > 0 // Root context has a special case\n            && contextData.context.getContextRaw()['@propagate'] === false // Stop loop if propagation is true\n            && contextData.depth !== originalDepth // Stop loop if requesting exact depth of non-propagating\n            && !hasApplicablePropertyScopedContext);\n        // Special case for root context that does not allow propagation.\n        // Fallback to empty context in that case.\n        if (contextData.depth === 0\n            && contextData.context.getContextRaw()['@propagate'] === false\n            && contextData.depth !== originalDepth) {\n            contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized({});\n        }\n        return contextData;\n    }\n    /**\n     * Start a new job for parsing the given value.\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        await this.parser.newOnValueJob(keys, value, depth, lastDepthCheck);\n    }\n    /**\n     * Flush the pending container flush buffers\n     * @return {boolean} If any pending buffers were flushed.\n     */\n    async handlePendingContainerFlushBuffers() {\n        if (this.pendingContainerFlushBuffers.length > 0) {\n            for (const pendingFlushBuffer of this.pendingContainerFlushBuffers) {\n                await this.parser.flushBuffer(pendingFlushBuffer.depth, pendingFlushBuffer.keys);\n                this.parser.flushStacks(pendingFlushBuffer.depth);\n            }\n            this.pendingContainerFlushBuffers.splice(0, this.pendingContainerFlushBuffers.length);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Emit the given quad into the output stream.\n     * @param {number} depth The depth the quad was generated at.\n     * @param {Quad} quad A quad to emit.\n     */\n    emitQuad(depth, quad) {\n        if (depth === 1) {\n            this.topLevelProperties = true;\n        }\n        this.parser.push(quad);\n    }\n    /**\n     * Emit the given error into the output stream.\n     * @param {Error} error An error to emit.\n     */\n    emitError(error) {\n        this.parser.emit('error', error);\n    }\n    /**\n     * Emit the given context into the output stream under the 'context' event.\n     * @param {JsonLdContext} context A context to emit.\n     */\n    emitContext(context) {\n        this.parser.emit('context', context);\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedValuesBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedValuesBuffer}.\n     */\n    getUnidentifiedValueBufferSafe(depth) {\n        let buffer = this.unidentifiedValuesBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedValuesBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedGraphsBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedGraphsBuffer}.\n     */\n    getUnidentifiedGraphBufferSafe(depth) {\n        let buffer = this.unidentifiedGraphsBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedGraphsBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * @return IExpandOptions The expand options for the active processing mode.\n     */\n    getExpandOptions() {\n        return ParsingContext.EXPAND_OPTIONS[this.activeProcessingMode];\n    }\n    /**\n     * Shift the stack at the given offset to the given depth.\n     *\n     * This will override anything in the stack at `depth`,\n     * and this will remove anything at `depth + depthOffset`\n     *\n     * @param depth The target depth.\n     * @param depthOffset The origin depth, relative to `depth`.\n     */\n    shiftStack(depth, depthOffset) {\n        // Copy the id stack value up one level so that the next job can access the id.\n        const deeperIdStack = this.idStack[depth + depthOffset];\n        if (deeperIdStack) {\n            this.idStack[depth] = deeperIdStack;\n            this.emittedStack[depth] = true;\n            delete this.idStack[depth + depthOffset];\n        }\n        // Shorten key stack\n        if (this.pendingContainerFlushBuffers.length) {\n            for (const buffer of this.pendingContainerFlushBuffers) {\n                if (buffer.depth >= depth + depthOffset) {\n                    buffer.depth -= depthOffset;\n                    buffer.keys.splice(depth, depthOffset);\n                }\n            }\n        }\n        // Splice stacks\n        if (this.unidentifiedValuesBuffer[depth + depthOffset]) {\n            this.unidentifiedValuesBuffer[depth] = this.unidentifiedValuesBuffer[depth + depthOffset];\n            delete this.unidentifiedValuesBuffer[depth + depthOffset];\n        }\n        // TODO: also do the same for other stacks\n    }\n}\nexports.ParsingContext = ParsingContext;\nParsingContext.EXPAND_OPTIONS = {\n    1.0: {\n        allowPrefixForcing: false,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: false,\n    },\n    1.1: {\n        allowPrefixForcing: true,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: true,\n    },\n};\n//# sourceMappingURL=ParsingContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\n// tslint:disable-next-line:no-var-requires\nconst canonicalizeJson = require('canonicalize');\n/**\n * Utility functions and methods.\n */\nclass Util {\n    constructor(options) {\n        this.parsingContext = options.parsingContext;\n        this.dataFactory = options.dataFactory || new rdf_data_factory_1.DataFactory();\n        this.rdfFirst = this.dataFactory.namedNode(Util.RDF + 'first');\n        this.rdfRest = this.dataFactory.namedNode(Util.RDF + 'rest');\n        this.rdfNil = this.dataFactory.namedNode(Util.RDF + 'nil');\n        this.rdfType = this.dataFactory.namedNode(Util.RDF + 'type');\n        this.rdfJson = this.dataFactory.namedNode(Util.RDF + 'JSON');\n    }\n    /**\n     * Helper function to get the value of a context entry,\n     * or fallback to a certain value.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} contextKey A pre-defined JSON-LD key in context entries.\n     * @param {string} key A context entry key.\n     * @param {string} fallback A fallback value for when the given contextKey\n     *                          could not be found in the value with the given key.\n     * @return {string} The value of the given contextKey in the entry behind key in the given context,\n     *                  or the given fallback value.\n     */\n    static getContextValue(context, contextKey, key, fallback) {\n        const entry = context.getContextRaw()[key];\n        if (!entry) {\n            return fallback;\n        }\n        const type = entry[contextKey];\n        return type === undefined ? fallback : type;\n    }\n    /**\n     * Get the container type of the given key in the context.\n     *\n     * Should any context-scoping bugs should occur related to this in the future,\n     * it may be required to increase the offset from the depth at which the context is retrieved by one (to 2).\n     * This is because containers act 2 levels deep.\n     *\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The container type.\n     */\n    static getContextValueContainer(context, key) {\n        return Util.getContextValue(context, '@container', key, { '@set': true });\n    }\n    /**\n     * Get the value type of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueType(context, key) {\n        const valueType = Util.getContextValue(context, '@type', key, null);\n        if (valueType === '@none') {\n            return null;\n        }\n        return valueType;\n    }\n    /**\n     * Get the language of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueLanguage(context, key) {\n        return Util.getContextValue(context, '@language', key, context.getContextRaw()['@language'] || null);\n    }\n    /**\n     * Get the direction of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueDirection(context, key) {\n        return Util.getContextValue(context, '@direction', key, context.getContextRaw()['@direction'] || null);\n    }\n    /**\n     * Check if the given key in the context is a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {boolean} If the context value has a @reverse key.\n     */\n    static isContextValueReverse(context, key) {\n        return !!Util.getContextValue(context, '@reverse', key, null);\n    }\n    /**\n     * Get the @index of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The index.\n     */\n    static getContextValueIndex(context, key) {\n        return Util.getContextValue(context, '@index', key, context.getContextRaw()['@index'] || null);\n    }\n    /**\n     * Check if the given key refers to a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The property key.\n     * @param {string} parentKey The parent key.\n     * @return {boolean} If the property must be reversed.\n     */\n    static isPropertyReverse(context, key, parentKey) {\n        // '!==' is needed because reversed properties in a @reverse container should cancel each other out.\n        return parentKey === '@reverse' !== Util.isContextValueReverse(context, key);\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return iri !== null && jsonld_context_parser_1.Util.isValidIri(iri);\n    }\n    /**\n     * Check if the given first array (needle) is a prefix of the given second array (haystack).\n     * @param needle An array to check if it is a prefix.\n     * @param haystack An array to look in.\n     */\n    static isPrefixArray(needle, haystack) {\n        if (needle.length > haystack.length) {\n            return false;\n        }\n        for (let i = 0; i < needle.length; i++) {\n            if (needle[i] !== haystack[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Make sure that @id-@index pairs are equal over all array values.\n     * Reject otherwise.\n     * @param {any[]} value An array value.\n     * @return {Promise<void>} A promise rejecting if conflicts are present.\n     */\n    async validateValueIndexes(value) {\n        if (this.parsingContext.validateValueIndexes) {\n            const indexHashes = {};\n            for (const entry of value) {\n                if (entry && typeof entry === 'object') {\n                    const id = entry['@id'];\n                    const index = entry['@index'];\n                    if (id && index) {\n                        const existingIndexValue = indexHashes[id];\n                        if (existingIndexValue && existingIndexValue !== index) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Conflicting @index value for ${id}`, jsonld_context_parser_1.ERROR_CODES.CONFLICTING_INDEXES);\n                        }\n                        indexHashes[id] = index;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Convert a given JSON value to an RDF term.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param value A JSON value.\n     * @param {number} depth The depth the value is at.\n     * @param {string[]} keys The path of keys.\n     * @return {Promise<RDF.Term[]>} An RDF term array.\n     */\n    async valueToTerm(context, key, value, depth, keys) {\n        // Skip further processing if we have an @type: @json\n        if (Util.getContextValueType(context, key) === '@json') {\n            return [this.dataFactory.literal(this.valueToJsonString(value), this.rdfJson)];\n        }\n        const type = typeof value;\n        switch (type) {\n            case 'object':\n                // Skip if we have a null or undefined object\n                if (value === null || value === undefined) {\n                    return [];\n                }\n                // Special case for arrays\n                if (Array.isArray(value)) {\n                    // We handle arrays at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty context-based lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if ('@list' in Util.getContextValueContainer(context, key)) {\n                        if (value.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    await this.validateValueIndexes(value);\n                    return [];\n                }\n                // Handle property-scoped contexts\n                context = await this.getContextSelfOrPropertyScoped(context, key);\n                // Handle local context in the value\n                if ('@context' in value) {\n                    context = await this.parsingContext.parseContext(value['@context'], (await this.parsingContext.getContext(keys, 0)).getContextRaw());\n                }\n                // In all other cases, we have a hash\n                value = await this.unaliasKeywords(value, keys, depth, context); // Un-alias potential keywords in this hash\n                if ('@value' in value) {\n                    let val;\n                    let valueLanguage;\n                    let valueDirection;\n                    let valueType;\n                    let valueIndex; // We don't use the index, but we need to check its type for spec-compliance\n                    for (key in value) {\n                        const subValue = value[key];\n                        switch (key) {\n                            case '@value':\n                                val = subValue;\n                                break;\n                            case '@language':\n                                valueLanguage = subValue;\n                                break;\n                            case '@direction':\n                                valueDirection = subValue;\n                                break;\n                            case '@type':\n                                valueType = subValue;\n                                break;\n                            case '@index':\n                                valueIndex = subValue;\n                                break;\n                            default:\n                                throw new jsonld_context_parser_1.ErrorCoded(`Unknown value entry '${key}' in @value: ${JSON.stringify(value)}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                    }\n                    // Skip further processing if we have an @type: @json\n                    if (await this.unaliasKeyword(valueType, keys, depth, true, context) === '@json') {\n                        return [this.dataFactory.literal(this.valueToJsonString(val), this.rdfJson)];\n                    }\n                    // Validate @value\n                    if (val === null) {\n                        return [];\n                    }\n                    if (typeof val === 'object') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@value' can not be an object, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT_VALUE);\n                    }\n                    // Validate @index\n                    if (this.parsingContext.validateValueIndexes && valueIndex && typeof valueIndex !== 'string') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@index' must be a string, got '${JSON.stringify(valueIndex)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE);\n                    }\n                    // Validate @language and @direction\n                    if (valueLanguage) {\n                        if (typeof val !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`When an '@language' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_VALUE);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateLanguage(valueLanguage, this.parsingContext.strictValues, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_STRING)) {\n                            return [];\n                        }\n                        // Language tags are always normalized to lowercase in 1.0.\n                        if (this.parsingContext.normalizeLanguageTags || this.parsingContext.activeProcessingMode === 1.0) {\n                            valueLanguage = valueLanguage.toLowerCase();\n                        }\n                    }\n                    if (valueDirection) {\n                        if (typeof val !== 'string') {\n                            throw new Error(`When an '@direction' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateDirection(valueDirection, this.parsingContext.strictValues)) {\n                            return [];\n                        }\n                    }\n                    // Check @language and @direction\n                    if (valueLanguage && valueDirection && this.parsingContext.rdfDirection) {\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have '@language', '@direction' and '@type' in a value: '${JSON\n                                .stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueLanguage) { // Check @language\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@language' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return [this.dataFactory.literal(val, valueLanguage)];\n                    }\n                    else if (valueDirection && this.parsingContext.rdfDirection) { // Check @direction\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@direction' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueType) { // Validate @type\n                        if (typeof valueType !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        const typeTerm = this.createVocabOrBaseTerm(context, valueType);\n                        if (!typeTerm) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Invalid '@type' value, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        if (typeTerm.termType !== 'NamedNode') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Illegal value type (${typeTerm.termType}): ${valueType}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        return [this.dataFactory.literal(val, typeTerm)];\n                    }\n                    // We don't pass the context, because context-based things like @language should be ignored\n                    return await this.valueToTerm(new jsonld_context_parser_1.JsonLdContextNormalized({}), key, val, depth, keys);\n                }\n                else if ('@set' in value) {\n                    // No other entries are allow in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @set for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    // No need to do anything here, this is handled at the deeper level.\n                    return [];\n                }\n                else if ('@list' in value) {\n                    // No other entries are allowed in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    const listValue = value[\"@list\"];\n                    // We handle lists at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty anonymous lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if (Array.isArray(listValue)) {\n                        if (listValue.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    else {\n                        // We only have a single list element here, so emit this directly as single element\n                        return await this.valueToTerm(await this.parsingContext.getContext(keys), key, listValue, depth - 1, keys.slice(0, -1));\n                    }\n                }\n                else if ('@reverse' in value && typeof value['@reverse'] === 'boolean') {\n                    // We handle reverse properties at value level so we can emit earlier,\n                    // so this is handled already when we get here.\n                    return [];\n                }\n                else if ('@graph' in Util.getContextValueContainer(await this.parsingContext.getContext(keys), key)) {\n                    // We are processing a graph container\n                    const graphContainerEntries = this.parsingContext.graphContainerTermStack[depth + 1];\n                    return graphContainerEntries ? Object.values(graphContainerEntries) : [this.dataFactory.blankNode()];\n                }\n                else if (\"@id\" in value) {\n                    // Use deeper context if the value node contains other properties next to @id.\n                    if (Object.keys(value).length > 1) {\n                        context = await this.parsingContext.getContext(keys, 0);\n                    }\n                    // Handle local context in the value\n                    if ('@context' in value) {\n                        context = await this.parsingContext.parseContext(value['@context'], context.getContextRaw());\n                    }\n                    if (value[\"@type\"] === '@vocab') {\n                        return this.nullableTermToArray(this.createVocabOrBaseTerm(context, value[\"@id\"]));\n                    }\n                    else {\n                        return this.nullableTermToArray(this.resourceToTerm(context, value[\"@id\"]));\n                    }\n                }\n                else {\n                    // Only make a blank node if at least one triple was emitted at the value's level.\n                    if (this.parsingContext.emittedStack[depth + 1]\n                        || (value && typeof value === 'object' && Object.keys(value).length === 0)) {\n                        return (this.parsingContext.idStack[depth + 1]\n                            || (this.parsingContext.idStack[depth + 1] = [this.dataFactory.blankNode()]));\n                    }\n                    else {\n                        return [];\n                    }\n                }\n            case 'string':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, null));\n            case 'boolean':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, Boolean(value).toString(), this.dataFactory.namedNode(Util.XSD_BOOLEAN)));\n            case 'number':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, this.dataFactory.namedNode(value % 1 === 0 && value < 1e21 ? Util.XSD_INTEGER : Util.XSD_DOUBLE)));\n            default:\n                this.parsingContext.emitError(new Error(`Could not determine the RDF type of a ${type}`));\n                return [];\n        }\n    }\n    /**\n     * If the context defines a property-scoped context for the given key,\n     * that context will be returned.\n     * Otherwise, the given context will be returned as-is.\n     *\n     * This should be used for valueToTerm cases that are not objects.\n     * @param context A context.\n     * @param key A JSON key.\n     */\n    async getContextSelfOrPropertyScoped(context, key) {\n        const contextKeyEntry = context.getContextRaw()[key];\n        if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n            context = await this.parsingContext.parseContext(contextKeyEntry, context.getContextRaw(), true);\n        }\n        return context;\n    }\n    /**\n     * If the given term is null, return an empty array, otherwise return an array with the single given term.\n     * @param term A term.\n     */\n    nullableTermToArray(term) {\n        return term ? [term] : [];\n    }\n    /**\n     * Convert a given JSON key to an RDF predicate term,\n     * based on @vocab.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node.\n     */\n    predicateToTerm(context, key) {\n        const expanded = context.expandTerm(key, true, this.parsingContext.getExpandOptions());\n        // Immediately return if the predicate was disabled in the context\n        if (!expanded) {\n            return null;\n        }\n        // Check if the predicate is a blank node\n        if (expanded[0] === '_' && expanded[1] === ':') {\n            if (this.parsingContext.produceGeneralizedRdf) {\n                return this.dataFactory.blankNode(expanded.substr(2));\n            }\n            else {\n                return null;\n            }\n        }\n        // Check if the predicate is a valid IRI\n        if (Util.isValidIri(expanded)) {\n            return this.dataFactory.namedNode(expanded);\n        }\n        else {\n            if (expanded && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid predicate IRI: ${expanded}`, jsonld_context_parser_1.ERROR_CODES.INVALID_IRI_MAPPING));\n            }\n            else {\n                return null;\n            }\n        }\n        return null;\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term or blank node,\n     * based on @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    resourceToTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const iri = context.expandTerm(key, false, this.parsingContext.getExpandOptions());\n        if (!Util.isValidIri(iri)) {\n            if (iri && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new Error(`Invalid resource IRI: ${iri}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(iri);\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term.\n     * It will do this based on the @vocab,\n     * and fallback to @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    createVocabOrBaseTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const expandOptions = this.parsingContext.getExpandOptions();\n        let expanded = context.expandTerm(key, true, expandOptions);\n        if (expanded === key) {\n            expanded = context.expandTerm(key, false, expandOptions);\n        }\n        if (!Util.isValidIri(expanded)) {\n            if (expanded && this.parsingContext.strictValues && !expanded.startsWith('@')) {\n                this.parsingContext.emitError(new Error(`Invalid term IRI: ${expanded}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(expanded);\n    }\n    /**\n     * Ensure that the given value becomes a string.\n     * @param {string | number} value A string or number.\n     * @param {NamedNode} datatype The intended datatype.\n     * @return {string} The returned string.\n     */\n    intToString(value, datatype) {\n        if (typeof value === 'number') {\n            if (Number.isFinite(value)) {\n                const isInteger = value % 1 === 0;\n                if (isInteger && (!datatype || datatype.value !== Util.XSD_DOUBLE)) {\n                    return Number(value).toString();\n                }\n                else {\n                    return value.toExponential(15).replace(/(\\d)0*e\\+?/, '$1E');\n                }\n            }\n            else {\n                return value > 0 ? 'INF' : '-INF';\n            }\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * Convert a given JSON string value to an RDF term.\n     * @param {number} depth The current stack depth.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param {string} value A JSON value.\n     * @param {NamedNode} defaultDatatype The default datatype for the given value.\n     * @return {RDF.Term} An RDF term or null.\n     */\n    stringValueToTerm(depth, context, key, value, defaultDatatype) {\n        // Check the datatype from the context\n        const contextType = Util.getContextValueType(context, key);\n        if (contextType) {\n            if (contextType === '@id') {\n                if (!defaultDatatype) {\n                    return this.resourceToTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else if (contextType === '@vocab') {\n                if (!defaultDatatype) {\n                    return this.createVocabOrBaseTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else {\n                defaultDatatype = this.dataFactory.namedNode(contextType);\n            }\n        }\n        // If we don't find such a datatype, check the language from the context\n        if (!defaultDatatype) {\n            const contextLanguage = Util.getContextValueLanguage(context, key);\n            const contextDirection = Util.getContextValueDirection(context, key);\n            if (contextDirection && this.parsingContext.rdfDirection) {\n                return this.createLanguageDirectionLiteral(depth, this.intToString(value, defaultDatatype), contextLanguage, contextDirection);\n            }\n            else {\n                return this.dataFactory.literal(this.intToString(value, defaultDatatype), contextLanguage);\n            }\n        }\n        // If all else fails, make a literal based on the default content type\n        return this.dataFactory.literal(this.intToString(value, defaultDatatype), defaultDatatype);\n    }\n    /**\n     * Create a literal for the given value with the given language and direction.\n     * Auxiliary quads may be emitted.\n     * @param {number} depth The current stack depth.\n     * @param {string} value A string value.\n     * @param {string} language A language tag.\n     * @param {string} direction A direction.\n     * @return {Term} An RDF term.\n     */\n    createLanguageDirectionLiteral(depth, value, language, direction) {\n        if (this.parsingContext.rdfDirection === 'i18n-datatype') {\n            // Create a datatyped literal, by encoding the language and direction into https://www.w3.org/ns/i18n#.\n            if (!language) {\n                language = '';\n            }\n            return this.dataFactory.literal(value, this.dataFactory.namedNode(`https://www.w3.org/ns/i18n#${language}_${direction}`));\n        }\n        else {\n            // Reify the literal.\n            const valueNode = this.dataFactory.blankNode();\n            const graph = this.getDefaultGraph();\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'value'), this.dataFactory.literal(value), graph));\n            if (language) {\n                this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'language'), this.dataFactory.literal(language), graph));\n            }\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'direction'), this.dataFactory.literal(direction), graph));\n            return valueNode;\n        }\n    }\n    /**\n     * Stringify the given JSON object to a canonical JSON string.\n     * @param value Any valid JSON value.\n     * @return {string} A canonical JSON string.\n     */\n    valueToJsonString(value) {\n        return canonicalizeJson(value);\n    }\n    /**\n     * If the key is not a keyword, try to check if it is an alias for a keyword,\n     * and if so, un-alias it.\n     * @param {string} key A key, can be falsy.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth to\n     * @param {boolean} disableCache If the cache should be disabled\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<string>} A promise resolving to the key itself, or another key.\n     */\n    async unaliasKeyword(key, keys, depth, disableCache, context) {\n        // Numbers can not be an alias\n        if (Number.isInteger(key)) {\n            return key;\n        }\n        // Try to grab from cache if it was already un-aliased before.\n        if (!disableCache) {\n            const cachedUnaliasedKeyword = this.parsingContext.unaliasedKeywordCacheStack[depth];\n            if (cachedUnaliasedKeyword) {\n                return cachedUnaliasedKeyword;\n            }\n        }\n        if (!jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            context = context || await this.parsingContext.getContext(keys);\n            let unliased = context.getContextRaw()[key];\n            if (unliased && typeof unliased === 'object') {\n                unliased = unliased['@id'];\n            }\n            if (jsonld_context_parser_1.Util.isValidKeyword(unliased)) {\n                key = unliased;\n            }\n        }\n        return disableCache ? key : (this.parsingContext.unaliasedKeywordCacheStack[depth] = key);\n    }\n    /**\n     * Unalias the keyword of the parent.\n     * This adds a safety check if no parent exist.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<any>} A promise resolving to the parent key, or another key.\n     */\n    async unaliasKeywordParent(keys, depth) {\n        return await this.unaliasKeyword(depth > 0 && keys[depth - 1], keys, depth - 1);\n    }\n    /**\n     * Un-alias all keywords in the given hash.\n     * @param {{[p: string]: any}} hash A hash object.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth.\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<{[p: string]: any}>} A promise resolving to the new hash.\n     */\n    async unaliasKeywords(hash, keys, depth, context) {\n        const newHash = {};\n        for (const key in hash) {\n            newHash[await this.unaliasKeyword(key, keys, depth + 1, true, context)] = hash[key];\n        }\n        return newHash;\n    }\n    /**\n     * Check if we are processing a literal (including JSON literals) at the given depth.\n     * This will also check higher levels,\n     * because if a parent is a literal,\n     * then the deeper levels are definitely a literal as well.\n     * @param {number} depth The depth.\n     * @return {boolean} If we are processing a literal.\n     */\n    isLiteral(depth) {\n        for (let i = depth; i >= 0; i--) {\n            if (this.parsingContext.literalStack[i] || this.parsingContext.jsonLiteralStack[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Check how many parents should be skipped for checking the @graph for the given node.\n     *\n     * @param {number} depth The depth of the node.\n     * @param {any[]} keys An array of keys.\n     * @return {number} The graph depth offset.\n     */\n    async getDepthOffsetGraph(depth, keys) {\n        for (let i = depth - 1; i > 0; i--) {\n            if (await this.unaliasKeyword(keys[i], keys, i) === '@graph') {\n                // Skip further processing if we are already in an @graph-@id or @graph-@index container\n                const containers = (await EntryHandlerContainer_1.EntryHandlerContainer.getContainerHandler(this.parsingContext, keys, i)).containers;\n                if (EntryHandlerContainer_1.EntryHandlerContainer.isComplexGraphContainer(containers)) {\n                    return -1;\n                }\n                return depth - i - 1;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Check if the given subject is of a valid type.\n     * This should be called when applying @reverse'd properties.\n     * @param {Term} subject A subject.\n     */\n    validateReverseSubject(subject) {\n        if (subject.termType === 'Literal') {\n            throw new jsonld_context_parser_1.ErrorCoded(`Found illegal literal in subject position: ${subject.value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n        }\n    }\n    /**\n     * Get the default graph.\n     * @return {Term} An RDF term.\n     */\n    getDefaultGraph() {\n        return this.parsingContext.defaultGraph || this.dataFactory.defaultGraph();\n    }\n    /**\n     * Get the current graph, while taking into account a graph that can be defined via @container: @graph.\n     * If not within a graph container, the default graph will be returned.\n     * @param keys The current keys.\n     * @param depth The current depth.\n     */\n    async getGraphContainerValue(keys, depth) {\n        // Default to default graph\n        let graph = this.getDefaultGraph();\n        // Check if we are in an @container: @graph.\n        const { containers, depth: depthContainer } = await EntryHandlerContainer_1.EntryHandlerContainer\n            .getContainerHandler(this.parsingContext, keys, depth);\n        if ('@graph' in containers) {\n            // Get the graph from the stack.\n            const graphContainerIndex = EntryHandlerContainer_1.EntryHandlerContainer.getContainerGraphIndex(containers, depthContainer, keys);\n            const entry = this.parsingContext.graphContainerTermStack[depthContainer];\n            graph = entry ? entry[graphContainerIndex] : null;\n            // Set the graph in the stack if none has been set yet.\n            if (!graph) {\n                let graphId = null;\n                if ('@id' in containers) {\n                    const keyUnaliased = await this.getContainerKey(keys[depthContainer], keys, depthContainer);\n                    if (keyUnaliased !== null) {\n                        graphId = await this.resourceToTerm(await this.parsingContext.getContext(keys), keyUnaliased);\n                    }\n                }\n                if (!graphId) {\n                    graphId = this.dataFactory.blankNode();\n                }\n                if (!this.parsingContext.graphContainerTermStack[depthContainer]) {\n                    this.parsingContext.graphContainerTermStack[depthContainer] = {};\n                }\n                graph = this.parsingContext.graphContainerTermStack[depthContainer][graphContainerIndex] = graphId;\n            }\n        }\n        return graph;\n    }\n    /**\n     * Get the properties depth for retrieving properties.\n     *\n     * Typically, the properties depth will be identical to the given depth.\n     *\n     * The following exceptions apply:\n     * * When the parent is @reverse, the depth is decremented by one.\n     * * When @nest parents are found, the depth is decremented by the number of @nest parents.\n     * If in combination with the exceptions above an intermediary array is discovered,\n     * the depth is also decremented by this number of arrays.\n     *\n     * @param keys The current key chain.\n     * @param depth The current depth.\n     */\n    async getPropertiesDepth(keys, depth) {\n        let lastValidDepth = depth;\n        for (let i = depth - 1; i > 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                const parentKey = await this.unaliasKeyword(keys[i], keys, i);\n                if (parentKey === '@reverse') {\n                    return i;\n                }\n                else if (parentKey === '@nest') {\n                    lastValidDepth = i;\n                }\n                else {\n                    return lastValidDepth;\n                }\n            }\n        }\n        return lastValidDepth;\n    }\n    /**\n     * Get the key for the current container entry.\n     * @param key A key, can be falsy.\n     * @param keys The key chain.\n     * @param depth The current depth to get the key from.\n     * @return Promise resolving to the key.\n     *         Null will be returned for @none entries, with aliasing taken into account.\n     */\n    async getContainerKey(key, keys, depth) {\n        const keyUnaliased = await this.unaliasKeyword(key, keys, depth);\n        return keyUnaliased === '@none' ? null : keyUnaliased;\n    }\n}\nexports.Util = Util;\nUtil.XSD = 'http://www.w3.org/2001/XMLSchema#';\nUtil.XSD_BOOLEAN = Util.XSD + 'boolean';\nUtil.XSD_INTEGER = Util.XSD + 'integer';\nUtil.XSD_DOUBLE = Util.XSD + 'double';\nUtil.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\n//# sourceMappingURL=Util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIdentifier = void 0;\n/**\n * Container handler for @id.\n *\n * It assumes that the current key is the identifier of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerIdentifier {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        let id;\n        // First check if the child node already has a defined id.\n        if (parsingContext.emittedStack[depth + 1] && parsingContext.idStack[depth + 1]) {\n            // Use the existing identifier\n            id = parsingContext.idStack[depth + 1][0];\n        }\n        else {\n            // Create the identifier\n            const keyUnaliased = await util.getContainerKey(keys[depth], keys, depth);\n            const maybeId = keyUnaliased !== null\n                ? await util.resourceToTerm(await parsingContext.getContext(keys), keys[depth])\n                : util.dataFactory.blankNode();\n            // Do nothing if the id is invalid\n            if (!maybeId) {\n                parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n                return;\n            }\n            id = maybeId;\n            // Insert the id into the stack so that buffered children can make us of it.\n            parsingContext.idStack[depth + 1] = [id];\n        }\n        // Insert the id into the stack so that parents can make use of it.\n        // Insert it as an array because multiple id container entries may exist\n        let ids = parsingContext.idStack[depth];\n        if (!ids) {\n            ids = parsingContext.idStack[depth] = [];\n        }\n        // Only insert the term if it does not exist yet in the array.\n        if (!ids.some((term) => term.equals(id))) {\n            ids.push(id);\n        }\n        // Flush any pending flush buffers\n        if (!await parsingContext.handlePendingContainerFlushBuffers()) {\n            parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n        }\n    }\n}\nexports.ContainerHandlerIdentifier = ContainerHandlerIdentifier;\n//# sourceMappingURL=ContainerHandlerIdentifier.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIndex = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @index.\n *\n * This will ignore the current key and add this entry to the parent node.\n */\nclass ContainerHandlerIndex {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            const graphContainer = '@graph' in containers;\n            // Check if the container is a property-based container by checking if there is a valid @index.\n            const context = await parsingContext.getContext(keys);\n            const indexKey = keys[depth - 1];\n            const indexPropertyRaw = Util_1.Util.getContextValueIndex(context, indexKey);\n            if (indexPropertyRaw) {\n                // Validate the @index value\n                if (jsonld_context_parser_1.Util.isPotentialKeyword(indexPropertyRaw)) {\n                    throw new jsonld_context_parser_1.ErrorCoded(`Keywords can not be used as @index value, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                if (typeof indexPropertyRaw !== 'string') {\n                    throw new jsonld_context_parser_1.ErrorCoded(`@index values must be strings, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                // When @index is used, values must be node values, unless @type: @id is defined in the context\n                if (typeof value !== 'object') {\n                    // Error if we don't have @type: @id\n                    if (Util_1.Util.getContextValueType(context, indexKey) !== '@id') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Property-based index containers require nodes as values or strings with @type: @id, but got: ${value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                    }\n                    // Add an @id to the stack, so our expanded @index value can make use of it\n                    const id = util.resourceToTerm(context, value);\n                    if (id) {\n                        parsingContext.idStack[depth + 1] = [id];\n                    }\n                }\n                // Expand the @index value\n                const indexProperty = util.createVocabOrBaseTerm(context, indexPropertyRaw);\n                if (indexProperty) {\n                    const indexValues = await util.valueToTerm(context, indexPropertyRaw, await util.getContainerKey(keys[depth], keys, depth), depth, keys);\n                    if (graphContainer) {\n                        // When we're in a graph container, attach the index to the graph identifier\n                        const graphId = await util.getGraphContainerValue(keys, depth + 1);\n                        for (const indexValue of indexValues) {\n                            parsingContext.emitQuad(depth, util.dataFactory.quad(graphId, indexProperty, indexValue, util.getDefaultGraph()));\n                        }\n                    }\n                    else {\n                        // Otherwise, attach the index to the node identifier\n                        for (const indexValue of indexValues) {\n                            await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, indexProperty, indexValue, false);\n                        }\n                    }\n                }\n            }\n            const depthOffset = graphContainer ? 2 : 1;\n            await parsingContext.newOnValueJob(keys.slice(0, keys.length - depthOffset), value, depth - depthOffset, true);\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerIndex = ContainerHandlerIndex;\n//# sourceMappingURL=ContainerHandlerIndex.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerLanguage = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * Container handler for @language.\n *\n * It assumes that the current key is the language of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerLanguage {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        const language = await util.getContainerKey(keys[depth], keys, depth);\n        if (Array.isArray(value)) {\n            // No type-checking needed, will be handled on each value when this handler is called recursively.\n            value = value.map((subValue) => ({ '@value': subValue, '@language': language }));\n        }\n        else {\n            if (typeof value !== 'string') {\n                throw new jsonld_context_parser_1.ErrorCoded(`Got invalid language map value, got '${JSON.stringify(value)}', but expected string`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_MAP_VALUE);\n            }\n            value = { '@value': value, '@language': language };\n        }\n        await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerLanguage = ContainerHandlerLanguage;\n//# sourceMappingURL=ContainerHandlerLanguage.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerType = void 0;\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @type.\n *\n * This will add this entry to the parent node, and use the current key as an rdf:type value.\n */\nclass ContainerHandlerType {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            if (typeof value === 'string') {\n                // Determine the @type of the container\n                const context = await parsingContext.getContext(keys);\n                const containerTypeType = Util_1.Util.getContextValueType(context, keys[depth - 1]);\n                // String values refer to node references\n                const id = containerTypeType === '@vocab'\n                    ? await util.createVocabOrBaseTerm(context, value)\n                    : await util.resourceToTerm(context, value);\n                if (id) {\n                    // Handle the value of this node as @id, which will also cause the predicate from above to be emitted.\n                    const subValue = { '@id': id.termType === 'NamedNode' ? id.value : value };\n                    await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), subValue, depth - 1, true);\n                    // Set the id in the stack so it can be used for the rdf:type handling later on\n                    parsingContext.idStack[depth + 1] = [id];\n                }\n            }\n            else {\n                // Other values are handled by handling them as a proper job\n                // Check needed for cases where entries don't have an explicit @id\n                const entryHasIdentifier = !!parsingContext.idStack[depth + 1];\n                // Handle the value of this node, which will also cause the predicate from above to be emitted.\n                if (!entryHasIdentifier) {\n                    delete parsingContext.idStack[depth]; // Force new (blank node) identifier\n                }\n                await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n                if (!entryHasIdentifier) {\n                    parsingContext.idStack[depth + 1] = parsingContext.idStack[depth]; // Copy the id to the child node, for @type\n                }\n            }\n            // Identify the type to emit.\n            const keyOriginal = await util.getContainerKey(keys[depth], keys, depth);\n            const type = keyOriginal !== null\n                ? util.createVocabOrBaseTerm(await parsingContext.getContext(keys), keyOriginal)\n                : null;\n            if (type) {\n                // Push the type to the stack using the rdf:type predicate\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, util.rdfType, type, false);\n            }\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n    }\n}\nexports.ContainerHandlerType = ContainerHandlerType;\n//# sourceMappingURL=ContainerHandlerType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerArrayValue = void 0;\nconst Util_1 = require(\"../Util\");\n/**\n * Handles values that are part of an array.\n */\nclass EntryHandlerArrayValue {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return typeof keys[depth] === 'number';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        let parentKey = await util.unaliasKeywordParent(keys, depth);\n        // Check if we have an anonymous list\n        if (parentKey === '@list') {\n            // Our value is part of an array\n            // Determine the list root key\n            let listRootKey = null;\n            let listRootDepth = 0;\n            for (let i = depth - 2; i > 0; i--) {\n                const keyOption = keys[i];\n                if (typeof keyOption === 'string' || typeof keyOption === 'number') {\n                    listRootDepth = i;\n                    listRootKey = keyOption;\n                    break;\n                }\n            }\n            if (listRootKey !== null) {\n                // Emit the given objects as list elements\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), listRootKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n            }\n        }\n        else if (parentKey === '@set') {\n            // Our value is part of a set, so we just add it to the parent-parent\n            await parsingContext.newOnValueJob(keys.slice(0, -2), value, depth - 2, false);\n        }\n        else if (parentKey !== undefined && parentKey !== '@type') {\n            // Buffer our value using the parent key as predicate\n            // Determine the first parent key that is *not* an array key\n            // This is needed in case we have an @list container with nested arrays,\n            // where each of them should produce nested RDF lists.\n            for (let i = depth - 1; i > 0; i--) {\n                if (typeof keys[i] !== 'number') {\n                    parentKey = await util.unaliasKeyword(keys[i], keys, i);\n                    break;\n                }\n            }\n            // Check if the predicate is marked as an @list in the context\n            const parentContext = await parsingContext.getContext(keys.slice(0, -1));\n            if ('@list' in Util_1.Util.getContextValueContainer(parentContext, parentKey)) {\n                // Our value is part of an array\n                // Emit the given objects as list elements\n                parsingContext.emittedStack[depth + 1] = true; // Ensure the creation of bnodes for empty nodes\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), parentKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, -1), depth - 1);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, -1), depth - 1);\n                }\n            }\n            else {\n                // Copy the stack values up one level so that the next job can access them.\n                parsingContext.shiftStack(depth, 1);\n                // Execute the job one level higher\n                await parsingContext.newOnValueJob(keys.slice(0, -1), value, depth - 1, false);\n                // Remove any defined contexts at this level to avoid it to propagate to the next array element.\n                parsingContext.contextTree.removeContext(keys.slice(0, -1));\n            }\n        }\n    }\n    async handleListElement(parsingContext, util, value, valueOriginal, depth, listRootKeys, listRootDepth) {\n        // Buffer our value as an RDF list using the listRootKey as predicate\n        let listPointer = parsingContext.listPointerStack[depth];\n        if (valueOriginal !== null && (await util.unaliasKeywords(valueOriginal, listRootKeys, depth))['@value'] !== null) {\n            if (!listPointer || !listPointer.value) {\n                const linkTerm = util.dataFactory.blankNode();\n                listPointer = { value: linkTerm, listRootDepth, listId: linkTerm };\n            }\n            else {\n                // rdf:rest links are always emitted before the next element,\n                // as the blank node identifier is only created at that point.\n                // Because of this reason, the final rdf:nil is emitted when the stack depth is decreased.\n                const newLinkTerm = util.dataFactory.blankNode();\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfRest, newLinkTerm, util.getDefaultGraph()));\n                // Update the list pointer for the next element\n                listPointer.value = newLinkTerm;\n            }\n            // Emit a list element for the current value\n            // Omit rdf:first if the value is invalid\n            if (value) {\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfFirst, value, util.getDefaultGraph()));\n            }\n        }\n        else {\n            // A falsy list element if found.\n            // Mark it as an rdf:nil list until another valid list element comes in\n            if (!listPointer) {\n                listPointer = { listRootDepth, listId: util.rdfNil };\n            }\n        }\n        parsingContext.listPointerStack[depth] = listPointer;\n    }\n}\nexports.EntryHandlerArrayValue = EntryHandlerArrayValue;\n//# sourceMappingURL=EntryHandlerArrayValue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerContainer = void 0;\nconst ContainerHandlerIdentifier_1 = require(\"../containerhandler/ContainerHandlerIdentifier\");\nconst ContainerHandlerIndex_1 = require(\"../containerhandler/ContainerHandlerIndex\");\nconst ContainerHandlerLanguage_1 = require(\"../containerhandler/ContainerHandlerLanguage\");\nconst ContainerHandlerType_1 = require(\"../containerhandler/ContainerHandlerType\");\nconst Util_1 = require(\"../Util\");\n/**\n * Handles values that are part of a container type (like @index),\n * as specified by {@link IContainerHandler}.\n */\nclass EntryHandlerContainer {\n    /**\n     * Check fit the given container is a simple @graph container.\n     * Concretely, it will check if no @index or @id is active as well.\n     * @param containers A container hash.\n     */\n    static isSimpleGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length === 2) || Object.keys(containers).length === 1);\n    }\n    /**\n     * Check fit the given container is a complex @graph container.\n     * Concretely, it will check if @index or @id is active as well next to @graph.\n     * @param containers A container hash.\n     */\n    static isComplexGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length > 2)\n                || (!('@set' in containers) && Object.keys(containers).length > 1));\n    }\n    /**\n     * Create an graph container index that can be used for identifying a graph term inside the graphContainerTermStack.\n     * @param containers The applicable containers.\n     * @param depth The container depth.\n     * @param keys The array of keys.\n     * @return The graph index.\n     */\n    static getContainerGraphIndex(containers, depth, keys) {\n        let isSimpleGraphContainer = EntryHandlerContainer.isSimpleGraphContainer(containers);\n        let index = '';\n        for (let i = depth; i < keys.length; i++) {\n            if (!isSimpleGraphContainer || typeof keys[i] === 'number') {\n                index += ':' + keys[i];\n            }\n            // Only allow a second 'real' key if in a non-simple graph container.\n            if (!isSimpleGraphContainer && typeof keys[i] !== 'number') {\n                isSimpleGraphContainer = true;\n            }\n        }\n        return index;\n    }\n    /**\n     * Return the applicable container type at the given depth.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<{ containers: {[typeName: string]: boolean}, depth: number, fallback: boolean }>}\n     *          All applicable containers for the given depth,\n     *          the `depth` of the container root (can change when arrays are in the key chain),\n     *          and the `fallback` flag that indicates if the default container type was returned\n     *            (i.e., no dedicated container type is defined).\n     */\n    static async getContainerHandler(parsingContext, keys, depth) {\n        const fallback = {\n            containers: { '@set': true },\n            depth,\n            fallback: true,\n        };\n        // A flag that is enabled when @graph container should be tested in next iteration\n        let checkGraphContainer = false;\n        // Iterate from deeper to higher\n        const context = await parsingContext.getContext(keys, 2);\n        for (let i = depth - 1; i >= 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                // @graph containers without any other types are one level less deep, and require special handling\n                const containersSelf = Util_1.Util.getContextValue(context, '@container', keys[i], false);\n                if (containersSelf && EntryHandlerContainer.isSimpleGraphContainer(containersSelf)) {\n                    return {\n                        containers: containersSelf,\n                        depth: i + 1,\n                        fallback: false,\n                    };\n                }\n                const containersParent = Util_1.Util.getContextValue(context, '@container', keys[i - 1], false);\n                if (!containersParent) { // If we have the fallback container value\n                    if (checkGraphContainer) {\n                        // Return false if we were already expecting a @graph-@id of @graph-@index container\n                        return fallback;\n                    }\n                    // Check parent-parent, we may be in a @graph-@id of @graph-@index container, which have two levels\n                    checkGraphContainer = true;\n                }\n                else {\n                    // We had an invalid container next iteration, so we now have to check if we were in an @graph container\n                    const graphContainer = '@graph' in containersParent;\n                    // We're in a regular container\n                    for (const containerHandleName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n                        if (containersParent[containerHandleName]) {\n                            if (graphContainer) {\n                                // Only accept graph containers if their combined handlers can handle them.\n                                if (EntryHandlerContainer.CONTAINER_HANDLERS[containerHandleName].canCombineWithGraph()) {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                                else {\n                                    return fallback;\n                                }\n                            }\n                            else {\n                                // Only accept if we were not expecting a @graph-@id of @graph-@index container\n                                if (checkGraphContainer) {\n                                    return fallback;\n                                }\n                                else {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                            }\n                        }\n                    }\n                    // Fail if no valid container handlers were found\n                    return fallback;\n                }\n            }\n        }\n        return fallback;\n    }\n    /**\n     * Check if we are handling a value at the given depth\n     * that is part of something that should be handled as a container,\n     * AND if this container should be buffered, so that it can be handled by a dedicated container handler.\n     *\n     * For instance, any container with @graph will NOT be buffered.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<boolean>} If we are in the scope of a container handler.\n     */\n    static async isBufferableContainerHandler(parsingContext, keys, depth) {\n        const handler = await EntryHandlerContainer.getContainerHandler(parsingContext, keys, depth);\n        return !handler.fallback && !('@graph' in handler.containers);\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return !!await this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        const containers = Util_1.Util.getContextValueContainer(await parsingContext.getContext(keys, 2), keys[depth - 1]);\n        for (const containerName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n            if (containers[containerName]) {\n                return {\n                    containers,\n                    handler: EntryHandlerContainer.CONTAINER_HANDLERS[containerName],\n                };\n            }\n        }\n        return null;\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        return testResult.handler.handle(testResult.containers, parsingContext, util, keys, value, depth);\n    }\n}\nexports.EntryHandlerContainer = EntryHandlerContainer;\nEntryHandlerContainer.CONTAINER_HANDLERS = {\n    '@id': new ContainerHandlerIdentifier_1.ContainerHandlerIdentifier(),\n    '@index': new ContainerHandlerIndex_1.ContainerHandlerIndex(),\n    '@language': new ContainerHandlerLanguage_1.ContainerHandlerLanguage(),\n    '@type': new ContainerHandlerType_1.ContainerHandlerType(),\n};\n//# sourceMappingURL=EntryHandlerContainer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerInvalidFallback = void 0;\n/**\n * A catch-all for properties, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerInvalidFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return true;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerInvalidFallback = EntryHandlerInvalidFallback;\n//# sourceMappingURL=EntryHandlerInvalidFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerPredicate = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../Util\");\n/**\n * Interprets keys as predicates.\n * The most common case in JSON-LD processing.\n */\nclass EntryHandlerPredicate {\n    /**\n     * Handle the given predicate-object by either emitting it,\n     * or by placing it in the appropriate stack for later emission when no @graph and/or @id has been defined.\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {Util} util A utility instance.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @param {Term} predicate The predicate.\n     * @param {Term} object The object.\n     * @param {boolean} reverse If the property is reversed.\n     * @return {Promise<void>} A promise resolving when handling is done.\n     */\n    static async handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse) {\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        const depthOffsetGraph = await util.getDepthOffsetGraph(depth, keys);\n        const depthPropertiesGraph = depth - depthOffsetGraph;\n        const subjects = parsingContext.idStack[depthProperties];\n        if (subjects) {\n            // Emit directly if the @id was already defined\n            for (const subject of subjects) {\n                // Check if we're in a @graph context\n                const atGraph = depthOffsetGraph >= 0;\n                if (atGraph) {\n                    const graphs = parsingContext.idStack[depthPropertiesGraph - 1];\n                    if (graphs) {\n                        for (const graph of graphs) {\n                            // Emit our quad if graph @id is known\n                            if (reverse) {\n                                util.validateReverseSubject(object);\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(object, predicate, subject, graph));\n                            }\n                            else {\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(subject, predicate, object, graph));\n                            }\n                        }\n                    }\n                    else {\n                        // Buffer our triple if graph @id is not known yet.\n                        if (reverse) {\n                            util.validateReverseSubject(object);\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1).push({ subject: object, predicate, object: subject });\n                        }\n                        else {\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1)\n                                .push({ subject, predicate, object });\n                        }\n                    }\n                }\n                else {\n                    // Emit if no @graph was applicable\n                    const graph = await util.getGraphContainerValue(keys, depthProperties);\n                    if (reverse) {\n                        util.validateReverseSubject(object);\n                        parsingContext.emitQuad(depth, util.dataFactory.quad(object, predicate, subject, graph));\n                    }\n                    else {\n                        parsingContext.emitQuad(depth, util.dataFactory.quad(subject, predicate, object, graph));\n                    }\n                }\n            }\n        }\n        else {\n            // Buffer until our @id becomes known, or we go up the stack\n            if (reverse) {\n                util.validateReverseSubject(object);\n            }\n            parsingContext.getUnidentifiedValueBufferSafe(depthProperties).push({ predicate, object, reverse });\n        }\n    }\n    isPropertyHandler() {\n        return true;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = keys[depth];\n        if (key) {\n            const context = await parsingContext.getContext(keys);\n            if (!parsingContext.jsonLiteralStack[depth] && await util.predicateToTerm(context, keys[depth])) {\n                // If this valid predicate is of type @json, mark it so in the stack so that no deeper handling of nodes occurs.\n                if (Util_1.Util.getContextValueType(context, key) === '@json') {\n                    parsingContext.jsonLiteralStack[depth + 1] = true;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return keys[depth];\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        const keyOriginal = keys[depth];\n        const context = await parsingContext.getContext(keys);\n        const predicate = await util.predicateToTerm(context, key);\n        if (predicate) {\n            const objects = await util.valueToTerm(context, key, value, depth, keys);\n            if (objects.length) {\n                for (let object of objects) {\n                    const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, await util.unaliasKeywordParent(keys, depth));\n                    if (value) {\n                        // Special case if our term was defined as an @list, but does not occur in an array,\n                        // In that case we just emit it as an RDF list with a single element.\n                        const listValueContainer = '@list' in Util_1.Util.getContextValueContainer(context, key);\n                        if (listValueContainer || value['@list']) {\n                            if (((listValueContainer && !Array.isArray(value) && !value['@list'])\n                                || (value['@list'] && !Array.isArray(value['@list'])))\n                                && object !== util.rdfNil) {\n                                const listPointer = util.dataFactory.blankNode();\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfRest, util.rdfNil, util.getDefaultGraph()));\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfFirst, object, util.getDefaultGraph()));\n                                object = listPointer;\n                            }\n                            // Lists are not allowed in @reverse'd properties\n                            if (reverse && !parsingContext.allowSubjectList) {\n                                throw new jsonld_context_parser_1.ErrorCoded(`Found illegal list value in subject position at ${key}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n                            }\n                        }\n                    }\n                    await EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse);\n                }\n            }\n        }\n    }\n}\nexports.EntryHandlerPredicate = EntryHandlerPredicate;\n//# sourceMappingURL=EntryHandlerPredicate.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeyword = void 0;\n/**\n * An abstract keyword entry handler.\n */\nclass EntryHandlerKeyword {\n    constructor(keyword) {\n        this.keyword = keyword;\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return key === this.keyword;\n    }\n}\nexports.EntryHandlerKeyword = EntryHandlerKeyword;\n//# sourceMappingURL=EntryHandlerKeyword.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @context entries.\n */\nclass EntryHandlerKeywordContext extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@context');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // Error if an out-of-order context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (parsingContext.processingStack[depth]\n                || parsingContext.processingType[depth]\n                || parsingContext.idStack[depth] !== undefined)) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // Find the parent context to inherit from.\n        // We actually request a context for the current depth (with fallback to parent)\n        // because we want to take into account any property-scoped contexts that are defined for this depth.\n        const parentContext = parsingContext.getContext(keys);\n        // Set the context for this scope\n        const context = parsingContext.parseContext(value, (await parentContext).getContextRaw());\n        parsingContext.contextTree.setContext(keys.slice(0, -1), context);\n        parsingContext.emitContext(value);\n        await parsingContext.validateContext(await context);\n    }\n}\nexports.EntryHandlerKeywordContext = EntryHandlerKeywordContext;\n//# sourceMappingURL=EntryHandlerKeywordContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordGraph = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordGraph extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@graph');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // The current identifier identifies a graph for the deeper level.\n        parsingContext.graphStack[depth + 1] = true;\n    }\n}\nexports.EntryHandlerKeywordGraph = EntryHandlerKeywordGraph;\n//# sourceMappingURL=EntryHandlerKeywordGraph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordId = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @id entries.\n */\nclass EntryHandlerKeywordId extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@id');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'string') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE));\n        }\n        // Determine the canonical place for this id.\n        // For example, @nest parents should be ignored.\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        // Error if an @id for this node already existed.\n        if (parsingContext.idStack[depthProperties] !== undefined) {\n            if (parsingContext.idStack[depthProperties][0].listHead) {\n                // Error if an @list was already defined for this node\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${keys[depth - 1]}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT));\n            }\n            else {\n                // Otherwise, the previous id was just because of an @id entry.\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found duplicate @ids '${parsingContext\n                    .idStack[depthProperties][0].value}' and '${value}'`, jsonld_context_parser_1.ERROR_CODES.COLLIDING_KEYWORDS));\n            }\n        }\n        // Save our @id on the stack\n        parsingContext.idStack[depthProperties] = util.nullableTermToArray(await util.resourceToTerm(await parsingContext.getContext(keys), value));\n    }\n}\nexports.EntryHandlerKeywordId = EntryHandlerKeywordId;\n//# sourceMappingURL=EntryHandlerKeywordId.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordIncluded = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @included entries.\n */\nclass EntryHandlerKeywordIncluded extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@included');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @included '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        const valueUnliased = await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys));\n        if ('@value' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @value node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        if ('@list' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @list node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordIncluded = EntryHandlerKeywordIncluded;\n//# sourceMappingURL=EntryHandlerKeywordIncluded.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordNest = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @nest entries.\n */\nclass EntryHandlerKeywordNest extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@nest');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found invalid @nest entry for '${key}': '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        if ('@value' in await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys))) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an invalid @value node for '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordNest = EntryHandlerKeywordNest;\n//# sourceMappingURL=EntryHandlerKeywordNest.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordType = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../../Util\");\nconst EntryHandlerPredicate_1 = require(\"../EntryHandlerPredicate\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordType extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@type');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keyOriginal = keys[depth];\n        // The current identifier identifies an rdf:type predicate.\n        // But we only emit it once the node closes,\n        // as it's possible that the @type is used to identify the datatype of a literal, which we ignore here.\n        const context = await parsingContext.getContext(keys);\n        const predicate = util.rdfType;\n        const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, await util.unaliasKeywordParent(keys, depth));\n        // Handle multiple values if the value is an array\n        const elements = Array.isArray(value) ? value : [value];\n        for (const element of elements) {\n            if (typeof element !== 'string') {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @type '${element}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPE_VALUE));\n            }\n            const type = util.createVocabOrBaseTerm(context, element);\n            if (type) {\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, type, reverse);\n            }\n        }\n        // Collect type-scoped contexts if they exist\n        let scopedContext = Promise.resolve(context);\n        let hasTypedScopedContext = false;\n        for (const element of elements.sort()) { // Spec requires lexicographical ordering\n            const typeContext = Util_1.Util.getContextValue(context, '@context', element, null);\n            if (typeContext) {\n                hasTypedScopedContext = true;\n                scopedContext = scopedContext.then((c) => parsingContext.parseContext(typeContext, c.getContextRaw()));\n            }\n        }\n        // Error if an out-of-order type-scoped context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (hasTypedScopedContext || !parsingContext.streamingProfileAllowOutOfOrderPlainType)\n            && (parsingContext.processingStack[depth] || parsingContext.idStack[depth])) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order type-scoped context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // If at least least one type-scoped context applies, set them in the tree.\n        if (hasTypedScopedContext) {\n            // Do not propagate by default\n            scopedContext = scopedContext.then((c) => {\n                if (!('@propagate' in c.getContextRaw())) {\n                    c.getContextRaw()['@propagate'] = false;\n                }\n                // Set the original context at this depth as a fallback\n                // This is needed when a context was already defined at the given depth,\n                // and this context needs to remain accessible from child nodes when propagation is disabled.\n                if (c.getContextRaw()['@propagate'] === false) {\n                    c.getContextRaw()['@__propagateFallback'] = context.getContextRaw();\n                }\n                return c;\n            });\n            // Set the new context in the context tree\n            parsingContext.contextTree.setContext(keys.slice(0, keys.length - 1), scopedContext);\n        }\n        // Flag that type has been processed at this depth\n        parsingContext.processingType[depth] = true;\n    }\n}\nexports.EntryHandlerKeywordType = EntryHandlerKeywordType;\n//# sourceMappingURL=EntryHandlerKeywordType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordUnknownFallback = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * A catch-all for keywords, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerKeywordUnknownFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = await util.unaliasKeyword(keys[depth], keys, depth);\n        if (jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            // Don't emit anything inside free-floating lists\n            if (!inProperty) {\n                if (key === '@list') {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return jsonld_context_parser_1.Util.isPotentialKeyword(key);\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keywordType = EntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES[key];\n        if (keywordType !== undefined) {\n            if (keywordType && typeof value !== keywordType.type) {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid value type for '${key}' with value '${value}'`, keywordType.errorCode));\n            }\n        }\n        else if (parsingContext.strictValues) {\n            parsingContext.emitError(new Error(`Unknown keyword '${key}' with value '${value}'`));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordUnknownFallback = EntryHandlerKeywordUnknownFallback;\nEntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES = {\n    '@index': { type: 'string', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE },\n    '@list': null,\n    '@reverse': { type: 'object', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_VALUE },\n    '@set': null,\n    '@value': null,\n};\n//# sourceMappingURL=EntryHandlerKeywordUnknownFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordValue = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @value entries.\n */\nclass EntryHandlerKeywordValue extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@value');\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        // If this is @value, mark it so in the stack so that no deeper handling of nodes occurs.\n        const key = keys[depth];\n        if (key && !parsingContext.literalStack[depth] && await this.test(parsingContext, util, key, keys, depth)) {\n            parsingContext.literalStack[depth] = true;\n        }\n        return super.validate(parsingContext, util, keys, depth, inProperty);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return await util.unaliasKeyword(keys[depth], keys.slice(0, keys.length - 1), depth - 1, true) === '@value';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // If the value is valid, indicate that we are processing a literal.\n        // The actual value will be determined at the parent level when the @value is part of an object,\n        // because we may want to take into account additional entries such as @language.\n        // See {@link Util.valueToTerm}\n        // Indicate that we are processing a literal, and that no later predicates should be parsed at this depth.\n        parsingContext.literalStack[depth] = true;\n        // Void any buffers that we may have accumulated up until now\n        delete parsingContext.unidentifiedValuesBuffer[depth];\n        delete parsingContext.unidentifiedGraphsBuffer[depth];\n        // Indicate that we have not emitted at this depth\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordValue = EntryHandlerKeywordValue;\n//# sourceMappingURL=EntryHandlerKeywordValue.js.map","/*global Buffer*/\n// Named constants with unique integer values\nvar C = {};\n// Tokens\nvar LEFT_BRACE    = C.LEFT_BRACE    = 0x1;\nvar RIGHT_BRACE   = C.RIGHT_BRACE   = 0x2;\nvar LEFT_BRACKET  = C.LEFT_BRACKET  = 0x3;\nvar RIGHT_BRACKET = C.RIGHT_BRACKET = 0x4;\nvar COLON         = C.COLON         = 0x5;\nvar COMMA         = C.COMMA         = 0x6;\nvar TRUE          = C.TRUE          = 0x7;\nvar FALSE         = C.FALSE         = 0x8;\nvar NULL          = C.NULL          = 0x9;\nvar STRING        = C.STRING        = 0xa;\nvar NUMBER        = C.NUMBER        = 0xb;\n// Tokenizer States\nvar START   = C.START   = 0x11;\nvar STOP    = C.STOP    = 0x12;\nvar TRUE1   = C.TRUE1   = 0x21;\nvar TRUE2   = C.TRUE2   = 0x22;\nvar TRUE3   = C.TRUE3   = 0x23;\nvar FALSE1  = C.FALSE1  = 0x31;\nvar FALSE2  = C.FALSE2  = 0x32;\nvar FALSE3  = C.FALSE3  = 0x33;\nvar FALSE4  = C.FALSE4  = 0x34;\nvar NULL1   = C.NULL1   = 0x41;\nvar NULL2   = C.NULL2   = 0x42;\nvar NULL3   = C.NULL3   = 0x43;\nvar NUMBER1 = C.NUMBER1 = 0x51;\nvar NUMBER3 = C.NUMBER3 = 0x53;\nvar STRING1 = C.STRING1 = 0x61;\nvar STRING2 = C.STRING2 = 0x62;\nvar STRING3 = C.STRING3 = 0x63;\nvar STRING4 = C.STRING4 = 0x64;\nvar STRING5 = C.STRING5 = 0x65;\nvar STRING6 = C.STRING6 = 0x66;\n// Parser States\nvar VALUE   = C.VALUE   = 0x71;\nvar KEY     = C.KEY     = 0x72;\n// Parser Modes\nvar OBJECT  = C.OBJECT  = 0x81;\nvar ARRAY   = C.ARRAY   = 0x82;\n// Character constants\nvar BACK_SLASH =      \"\\\\\".charCodeAt(0);\nvar FORWARD_SLASH =   \"\\/\".charCodeAt(0);\nvar BACKSPACE =       \"\\b\".charCodeAt(0);\nvar FORM_FEED =       \"\\f\".charCodeAt(0);\nvar NEWLINE =         \"\\n\".charCodeAt(0);\nvar CARRIAGE_RETURN = \"\\r\".charCodeAt(0);\nvar TAB =             \"\\t\".charCodeAt(0);\n\nvar STRING_BUFFER_SIZE = 64 * 1024;\n\nfunction Parser() {\n  this.tState = START;\n  this.value = undefined;\n\n  this.string = undefined; // string data\n  this.stringBuffer = Buffer.alloc ? Buffer.alloc(STRING_BUFFER_SIZE) : new Buffer(STRING_BUFFER_SIZE);\n  this.stringBufferOffset = 0;\n  this.unicode = undefined; // unicode escapes\n  this.highSurrogate = undefined;\n\n  this.key = undefined;\n  this.mode = undefined;\n  this.stack = [];\n  this.state = VALUE;\n  this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary\n  this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read\n  this.temp_buffs = { \"2\": new Buffer(2), \"3\": new Buffer(3), \"4\": new Buffer(4) }; // for rebuilding chars split before boundary is reached\n\n  // Stream offset\n  this.offset = -1;\n}\n\n// Slow code to string converter (only used when throwing syntax errors)\nParser.toknam = function (code) {\n  var keys = Object.keys(C);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    if (C[key] === code) { return key; }\n  }\n  return code && (\"0x\" + code.toString(16));\n};\n\nvar proto = Parser.prototype;\nproto.onError = function (err) { throw err; };\nproto.charError = function (buffer, i) {\n  this.tState = STOP;\n  this.onError(new Error(\"Unexpected \" + JSON.stringify(String.fromCharCode(buffer[i])) + \" at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n};\nproto.appendStringChar = function (char) {\n  if (this.stringBufferOffset >= STRING_BUFFER_SIZE) {\n    this.string += this.stringBuffer.toString('utf8');\n    this.stringBufferOffset = 0;\n  }\n\n  this.stringBuffer[this.stringBufferOffset++] = char;\n};\nproto.appendStringBuf = function (buf, start, end) {\n  var size = buf.length;\n  if (typeof start === 'number') {\n    if (typeof end === 'number') {\n      if (end < 0) {\n        // adding a negative end decreeses the size\n        size = buf.length - start + end;\n      } else {\n        size = end - start;\n      }\n    } else {\n      size = buf.length - start;\n    }\n  }\n\n  if (size < 0) {\n    size = 0;\n  }\n\n  if (this.stringBufferOffset + size > STRING_BUFFER_SIZE) {\n    this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);\n    this.stringBufferOffset = 0;\n  }\n\n  buf.copy(this.stringBuffer, this.stringBufferOffset, start, end);\n  this.stringBufferOffset += size;\n};\nproto.write = function (buffer) {\n  if (typeof buffer === \"string\") buffer = new Buffer(buffer);\n  var n;\n  for (var i = 0, l = buffer.length; i < l; i++) {\n    if (this.tState === START){\n      n = buffer[i];\n      this.offset++;\n      if(n === 0x7b){ this.onToken(LEFT_BRACE, \"{\"); // {\n      }else if(n === 0x7d){ this.onToken(RIGHT_BRACE, \"}\"); // }\n      }else if(n === 0x5b){ this.onToken(LEFT_BRACKET, \"[\"); // [\n      }else if(n === 0x5d){ this.onToken(RIGHT_BRACKET, \"]\"); // ]\n      }else if(n === 0x3a){ this.onToken(COLON, \":\");  // :\n      }else if(n === 0x2c){ this.onToken(COMMA, \",\"); // ,\n      }else if(n === 0x74){ this.tState = TRUE1;  // t\n      }else if(n === 0x66){ this.tState = FALSE1;  // f\n      }else if(n === 0x6e){ this.tState = NULL1; // n\n      }else if(n === 0x22){ // \"\n        this.string = \"\";\n        this.stringBufferOffset = 0;\n        this.tState = STRING1;\n      }else if(n === 0x2d){ this.string = \"-\"; this.tState = NUMBER1; // -\n      }else{\n        if (n >= 0x30 && n < 0x40) { // 1-9\n          this.string = String.fromCharCode(n); this.tState = NUMBER3;\n        } else if (n === 0x20 || n === 0x09 || n === 0x0a || n === 0x0d) {\n          // whitespace\n        } else {\n          return this.charError(buffer, i);\n        }\n      }\n    }else if (this.tState === STRING1){ // After open quote\n      n = buffer[i]; // get current byte from buffer\n      // check for carry over of a multi byte char split between data chunks\n      // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration\n      if (this.bytes_remaining > 0) {\n        for (var j = 0; j < this.bytes_remaining; j++) {\n          this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = buffer[j];\n        }\n\n        this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]);\n        this.bytes_in_sequence = this.bytes_remaining = 0;\n        i = i + j - 1;\n      } else if (this.bytes_remaining === 0 && n >= 128) { // else if no remainder bytes carried over, parse multi byte (>=128) chars one at a time\n        if (n <= 193 || n > 244) {\n          return this.onError(new Error(\"Invalid UTF-8 character at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n        }\n        if ((n >= 194) && (n <= 223)) this.bytes_in_sequence = 2;\n        if ((n >= 224) && (n <= 239)) this.bytes_in_sequence = 3;\n        if ((n >= 240) && (n <= 244)) this.bytes_in_sequence = 4;\n        if ((this.bytes_in_sequence + i) > buffer.length) { // if bytes needed to complete char fall outside buffer length, we have a boundary split\n          for (var k = 0; k <= (buffer.length - 1 - i); k++) {\n            this.temp_buffs[this.bytes_in_sequence][k] = buffer[i + k]; // fill temp buffer of correct size with bytes available in this chunk\n          }\n          this.bytes_remaining = (i + this.bytes_in_sequence) - buffer.length;\n          i = buffer.length - 1;\n        } else {\n          this.appendStringBuf(buffer, i, i + this.bytes_in_sequence);\n          i = i + this.bytes_in_sequence - 1;\n        }\n      } else if (n === 0x22) {\n        this.tState = START;\n        this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);\n        this.stringBufferOffset = 0;\n        this.onToken(STRING, this.string);\n        this.offset += Buffer.byteLength(this.string, 'utf8') + 1;\n        this.string = undefined;\n      }\n      else if (n === 0x5c) {\n        this.tState = STRING2;\n      }\n      else if (n >= 0x20) { this.appendStringChar(n); }\n      else {\n          return this.charError(buffer, i);\n      }\n    }else if (this.tState === STRING2){ // After backslash\n      n = buffer[i];\n      if(n === 0x22){ this.appendStringChar(n); this.tState = STRING1;\n      }else if(n === 0x5c){ this.appendStringChar(BACK_SLASH); this.tState = STRING1;\n      }else if(n === 0x2f){ this.appendStringChar(FORWARD_SLASH); this.tState = STRING1;\n      }else if(n === 0x62){ this.appendStringChar(BACKSPACE); this.tState = STRING1;\n      }else if(n === 0x66){ this.appendStringChar(FORM_FEED); this.tState = STRING1;\n      }else if(n === 0x6e){ this.appendStringChar(NEWLINE); this.tState = STRING1;\n      }else if(n === 0x72){ this.appendStringChar(CARRIAGE_RETURN); this.tState = STRING1;\n      }else if(n === 0x74){ this.appendStringChar(TAB); this.tState = STRING1;\n      }else if(n === 0x75){ this.unicode = \"\"; this.tState = STRING3;\n      }else{\n        return this.charError(buffer, i);\n      }\n    }else if (this.tState === STRING3 || this.tState === STRING4 || this.tState === STRING5 || this.tState === STRING6){ // unicode hex codes\n      n = buffer[i];\n      // 0-9 A-F a-f\n      if ((n >= 0x30 && n < 0x40) || (n > 0x40 && n <= 0x46) || (n > 0x60 && n <= 0x66)) {\n        this.unicode += String.fromCharCode(n);\n        if (this.tState++ === STRING6) {\n          var intVal = parseInt(this.unicode, 16);\n          this.unicode = undefined;\n          if (this.highSurrogate !== undefined && intVal >= 0xDC00 && intVal < (0xDFFF + 1)) { //<56320,57343> - lowSurrogate\n            this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate, intVal)));\n            this.highSurrogate = undefined;\n          } else if (this.highSurrogate === undefined && intVal >= 0xD800 && intVal < (0xDBFF + 1)) { //<55296,56319> - highSurrogate\n            this.highSurrogate = intVal;\n          } else {\n            if (this.highSurrogate !== undefined) {\n              this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate)));\n              this.highSurrogate = undefined;\n            }\n            this.appendStringBuf(new Buffer(String.fromCharCode(intVal)));\n          }\n          this.tState = STRING1;\n        }\n      } else {\n        return this.charError(buffer, i);\n      }\n    } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {\n        n = buffer[i];\n\n        switch (n) {\n          case 0x30: // 0\n          case 0x31: // 1\n          case 0x32: // 2\n          case 0x33: // 3\n          case 0x34: // 4\n          case 0x35: // 5\n          case 0x36: // 6\n          case 0x37: // 7\n          case 0x38: // 8\n          case 0x39: // 9\n          case 0x2e: // .\n          case 0x65: // e\n          case 0x45: // E\n          case 0x2b: // +\n          case 0x2d: // -\n            this.string += String.fromCharCode(n);\n            this.tState = NUMBER3;\n            break;\n          default:\n            this.tState = START;\n            var result = Number(this.string);\n\n            if (isNaN(result)){\n              return this.charError(buffer, i);\n            }\n\n            if ((this.string.match(/[0-9]+/) == this.string) && (result.toString() != this.string)) {\n              // Long string of digits which is an ID string and not valid and/or safe JavaScript integer Number\n              this.onToken(STRING, this.string);\n            } else {\n              this.onToken(NUMBER, result);\n            }\n\n            this.offset += this.string.length - 1;\n            this.string = undefined;\n            i--;\n            break;\n        }\n    }else if (this.tState === TRUE1){ // r\n      if (buffer[i] === 0x72) { this.tState = TRUE2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === TRUE2){ // u\n      if (buffer[i] === 0x75) { this.tState = TRUE3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === TRUE3){ // e\n      if (buffer[i] === 0x65) { this.tState = START; this.onToken(TRUE, true); this.offset+= 3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE1){ // a\n      if (buffer[i] === 0x61) { this.tState = FALSE2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE2){ // l\n      if (buffer[i] === 0x6c) { this.tState = FALSE3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE3){ // s\n      if (buffer[i] === 0x73) { this.tState = FALSE4; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE4){ // e\n      if (buffer[i] === 0x65) { this.tState = START; this.onToken(FALSE, false); this.offset+= 4; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL1){ // u\n      if (buffer[i] === 0x75) { this.tState = NULL2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL2){ // l\n      if (buffer[i] === 0x6c) { this.tState = NULL3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL3){ // l\n      if (buffer[i] === 0x6c) { this.tState = START; this.onToken(NULL, null); this.offset += 3; }\n      else { return this.charError(buffer, i); }\n    }\n  }\n};\nproto.onToken = function (token, value) {\n  // Override this to get events\n};\n\nproto.parseError = function (token, value) {\n  this.tState = STOP;\n  this.onError(new Error(\"Unexpected \" + Parser.toknam(token) + (value ? (\"(\" + JSON.stringify(value) + \")\") : \"\") + \" in state \" + Parser.toknam(this.state)));\n};\nproto.push = function () {\n  this.stack.push({value: this.value, key: this.key, mode: this.mode});\n};\nproto.pop = function () {\n  var value = this.value;\n  var parent = this.stack.pop();\n  this.value = parent.value;\n  this.key = parent.key;\n  this.mode = parent.mode;\n  this.emit(value);\n  if (!this.mode) { this.state = VALUE; }\n};\nproto.emit = function (value) {\n  if (this.mode) { this.state = COMMA; }\n  this.onValue(value);\n};\nproto.onValue = function (value) {\n  // Override me\n};\nproto.onToken = function (token, value) {\n  if(this.state === VALUE){\n    if(token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL){\n      if (this.value) {\n        this.value[this.key] = value;\n      }\n      this.emit(value);\n    }else if(token === LEFT_BRACE){\n      this.push();\n      if (this.value) {\n        this.value = this.value[this.key] = {};\n      } else {\n        this.value = {};\n      }\n      this.key = undefined;\n      this.state = KEY;\n      this.mode = OBJECT;\n    }else if(token === LEFT_BRACKET){\n      this.push();\n      if (this.value) {\n        this.value = this.value[this.key] = [];\n      } else {\n        this.value = [];\n      }\n      this.key = 0;\n      this.mode = ARRAY;\n      this.state = VALUE;\n    }else if(token === RIGHT_BRACE){\n      if (this.mode === OBJECT) {\n        this.pop();\n      } else {\n        return this.parseError(token, value);\n      }\n    }else if(token === RIGHT_BRACKET){\n      if (this.mode === ARRAY) {\n        this.pop();\n      } else {\n        return this.parseError(token, value);\n      }\n    }else{\n      return this.parseError(token, value);\n    }\n  }else if(this.state === KEY){\n    if (token === STRING) {\n      this.key = value;\n      this.state = COLON;\n    } else if (token === RIGHT_BRACE) {\n      this.pop();\n    } else {\n      return this.parseError(token, value);\n    }\n  }else if(this.state === COLON){\n    if (token === COLON) { this.state = VALUE; }\n    else { return this.parseError(token, value); }\n  }else if(this.state === COMMA){\n    if (token === COMMA) {\n      if (this.mode === ARRAY) { this.key++; this.state = VALUE; }\n      else if (this.mode === OBJECT) { this.state = KEY; }\n\n    } else if (token === RIGHT_BRACKET && this.mode === ARRAY || token === RIGHT_BRACE && this.mode === OBJECT) {\n      this.pop();\n    } else {\n      return this.parseError(token, value);\n    }\n  }else{\n    return this.parseError(token, value);\n  }\n};\n\nParser.C = C;\n\nmodule.exports = Parser;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/BlankNode\"), exports);\n__exportStar(require(\"./lib/DataFactory\"), exports);\n__exportStar(require(\"./lib/DefaultGraph\"), exports);\n__exportStar(require(\"./lib/Literal\"), exports);\n__exportStar(require(\"./lib/NamedNode\"), exports);\n__exportStar(require(\"./lib/Quad\"), exports);\n__exportStar(require(\"./lib/Variable\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlankNode = void 0;\n/**\n * A term that represents an RDF blank node with a label.\n */\nclass BlankNode {\n    constructor(value) {\n        this.termType = 'BlankNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'BlankNode' && other.value === this.value;\n    }\n}\nexports.BlankNode = BlankNode;\n//# sourceMappingURL=BlankNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataFactory = void 0;\nconst BlankNode_1 = require(\"./BlankNode\");\nconst DefaultGraph_1 = require(\"./DefaultGraph\");\nconst Literal_1 = require(\"./Literal\");\nconst NamedNode_1 = require(\"./NamedNode\");\nconst Quad_1 = require(\"./Quad\");\nconst Variable_1 = require(\"./Variable\");\nlet dataFactoryCounter = 0;\n/**\n * A factory for instantiating RDF terms and quads.\n */\nclass DataFactory {\n    constructor(options) {\n        this.blankNodeCounter = 0;\n        options = options || {};\n        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;\n    }\n    /**\n     * @param value The IRI for the named node.\n     * @return A new instance of NamedNode.\n     * @see NamedNode\n     */\n    namedNode(value) {\n        return new NamedNode_1.NamedNode(value);\n    }\n    /**\n     * @param value The optional blank node identifier.\n     * @return A new instance of BlankNode.\n     *         If the `value` parameter is undefined a new identifier\n     *         for the blank node is generated for each call.\n     * @see BlankNode\n     */\n    blankNode(value) {\n        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);\n    }\n    /**\n     * @param value              The literal value.\n     * @param languageOrDatatype The optional language or datatype.\n     *                           If `languageOrDatatype` is a NamedNode,\n     *                           then it is used for the value of `NamedNode.datatype`.\n     *                           Otherwise `languageOrDatatype` is used for the value\n     *                           of `NamedNode.language`.\n     * @return A new instance of Literal.\n     * @see Literal\n     */\n    literal(value, languageOrDatatype) {\n        return new Literal_1.Literal(value, languageOrDatatype);\n    }\n    /**\n     * This method is optional.\n     * @param value The variable name\n     * @return A new instance of Variable.\n     * @see Variable\n     */\n    variable(value) {\n        return new Variable_1.Variable(value);\n    }\n    /**\n     * @return An instance of DefaultGraph.\n     */\n    defaultGraph() {\n        return DefaultGraph_1.DefaultGraph.INSTANCE;\n    }\n    /**\n     * @param subject   The quad subject term.\n     * @param predicate The quad predicate term.\n     * @param object    The quad object term.\n     * @param graph     The quad graph term.\n     * @return A new instance of Quad.\n     * @see Quad\n     */\n    quad(subject, predicate, object, graph) {\n        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());\n    }\n    /**\n     * Create a deep copy of the given term using this data factory.\n     * @param original An RDF term.\n     * @return A deep copy of the given term.\n     */\n    fromTerm(original) {\n        // TODO: remove nasty any casts when this TS bug has been fixed:\n        //  https://github.com/microsoft/TypeScript/issues/26933\n        switch (original.termType) {\n            case 'NamedNode':\n                return this.namedNode(original.value);\n            case 'BlankNode':\n                return this.blankNode(original.value);\n            case 'Literal':\n                if (original.language) {\n                    return this.literal(original.value, original.language);\n                }\n                if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {\n                    return this.literal(original.value, this.fromTerm(original.datatype));\n                }\n                return this.literal(original.value);\n            case 'Variable':\n                return this.variable(original.value);\n            case 'DefaultGraph':\n                return this.defaultGraph();\n            case 'Quad':\n                return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));\n        }\n    }\n    /**\n     * Create a deep copy of the given quad using this data factory.\n     * @param original An RDF quad.\n     * @return A deep copy of the given quad.\n     */\n    fromQuad(original) {\n        return this.fromTerm(original);\n    }\n    /**\n     * Reset the internal blank node counter.\n     */\n    resetBlankNodeCounter() {\n        this.blankNodeCounter = 0;\n    }\n}\nexports.DataFactory = DataFactory;\n//# sourceMappingURL=DataFactory.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultGraph = void 0;\n/**\n * A singleton term instance that represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass DefaultGraph {\n    constructor() {\n        this.termType = 'DefaultGraph';\n        this.value = '';\n        // Private constructor\n    }\n    equals(other) {\n        return !!other && other.termType === 'DefaultGraph';\n    }\n}\nexports.DefaultGraph = DefaultGraph;\nDefaultGraph.INSTANCE = new DefaultGraph();\n//# sourceMappingURL=DefaultGraph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Literal = void 0;\nconst NamedNode_1 = require(\"./NamedNode\");\n/**\n * A term that represents an RDF literal, containing a string with an optional language tag or datatype.\n */\nclass Literal {\n    constructor(value, languageOrDatatype) {\n        this.termType = 'Literal';\n        this.value = value;\n        if (typeof languageOrDatatype === 'string') {\n            this.language = languageOrDatatype;\n            this.datatype = Literal.RDF_LANGUAGE_STRING;\n        }\n        else if (languageOrDatatype) {\n            this.language = '';\n            this.datatype = languageOrDatatype;\n        }\n        else {\n            this.language = '';\n            this.datatype = Literal.XSD_STRING;\n        }\n    }\n    equals(other) {\n        return !!other && other.termType === 'Literal' && other.value === this.value &&\n            other.language === this.language && other.datatype.equals(this.datatype);\n    }\n}\nexports.Literal = Literal;\nLiteral.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');\nLiteral.XSD_STRING = new NamedNode_1.NamedNode('http://www.w3.org/2001/XMLSchema#string');\n//# sourceMappingURL=Literal.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NamedNode = void 0;\n/**\n * A term that contains an IRI.\n */\nclass NamedNode {\n    constructor(value) {\n        this.termType = 'NamedNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'NamedNode' && other.value === this.value;\n    }\n}\nexports.NamedNode = NamedNode;\n//# sourceMappingURL=NamedNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Quad = void 0;\n/**\n * An instance of DefaultGraph represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass Quad {\n    constructor(subject, predicate, object, graph) {\n        this.termType = 'Quad';\n        this.value = '';\n        this.subject = subject;\n        this.predicate = predicate;\n        this.object = object;\n        this.graph = graph;\n    }\n    equals(other) {\n        // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n        return !!other && (other.termType === 'Quad' || !other.termType) &&\n            this.subject.equals(other.subject) &&\n            this.predicate.equals(other.predicate) &&\n            this.object.equals(other.object) &&\n            this.graph.equals(other.graph);\n    }\n}\nexports.Quad = Quad;\n//# sourceMappingURL=Quad.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Variable = void 0;\n/**\n * A term that represents a variable.\n */\nclass Variable {\n    constructor(value) {\n        this.termType = 'Variable';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'Variable' && other.value === this.value;\n    }\n}\nexports.Variable = Variable;\n//# sourceMappingURL=Variable.js.map","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./lib/Resolve\"));\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Convert the given relative IRI to an absolute IRI\n * by taking into account the given optional baseIRI.\n *\n * @param {string} relativeIRI The relative IRI to convert to an absolute IRI.\n * @param {string} baseIRI The optional base IRI.\n * @return {string} an absolute IRI.\n */\nfunction resolve(relativeIRI, baseIRI) {\n    baseIRI = baseIRI || '';\n    const baseFragmentPos = baseIRI.indexOf('#');\n    // Ignore any fragments in the base IRI\n    if (baseFragmentPos > 0) {\n        baseIRI = baseIRI.substr(0, baseFragmentPos);\n    }\n    // Convert empty value directly to base IRI\n    if (!relativeIRI.length) {\n        // At this point, the baseIRI MUST be absolute, otherwise we error\n        if (baseIRI.indexOf(':') < 0) {\n            throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n        }\n        return baseIRI;\n    }\n    // If the value starts with a query character, concat directly (but strip the existing query)\n    if (relativeIRI.startsWith('?')) {\n        const baseQueryPos = baseIRI.indexOf('?');\n        if (baseQueryPos > 0) {\n            baseIRI = baseIRI.substr(0, baseQueryPos);\n        }\n        return baseIRI + relativeIRI;\n    }\n    // If the value starts with a fragment character, concat directly\n    if (relativeIRI.startsWith('#')) {\n        return baseIRI + relativeIRI;\n    }\n    // Ignore baseIRI if it is empty\n    if (!baseIRI.length) {\n        const relativeColonPos = relativeIRI.indexOf(':');\n        if (relativeColonPos < 0) {\n            throw new Error(`Found invalid relative IRI '${relativeIRI}' for a missing baseIRI`);\n        }\n        return removeDotSegmentsOfPath(relativeIRI, relativeColonPos);\n    }\n    // Ignore baseIRI if the value is absolute\n    const valueColonPos = relativeIRI.indexOf(':');\n    if (valueColonPos >= 0) {\n        return removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // At this point, the baseIRI MUST be absolute, otherwise we error\n    const baseColonPos = baseIRI.indexOf(':');\n    if (baseColonPos < 0) {\n        throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n    }\n    const baseIRIScheme = baseIRI.substr(0, baseColonPos + 1);\n    // Inherit the baseIRI scheme if the value starts with '//'\n    if (relativeIRI.indexOf('//') === 0) {\n        return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // Check cases where '://' occurs in the baseIRI, and where there is no '/' after a ':' anymore.\n    let baseSlashAfterColonPos;\n    if (baseIRI.indexOf('//', baseColonPos) === baseColonPos + 1) {\n        // If there is no additional '/' after the '//'.\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 3);\n        if (baseSlashAfterColonPos < 0) {\n            // If something other than a '/' follows the '://', append the value after a '/',\n            // otherwise, prefix the value with only the baseIRI scheme.\n            if (baseIRI.length > baseColonPos + 3) {\n                return baseIRI + '/' + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n            else {\n                return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n        }\n    }\n    else {\n        // If there is not even a single '/' after the ':'\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 1);\n        if (baseSlashAfterColonPos < 0) {\n            // If we don't have a '/' after the ':',\n            // prefix the value with only the baseIRI scheme.\n            return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n        }\n    }\n    // If the value starts with a '/', then prefix it with everything before the first effective slash of the base IRI.\n    if (relativeIRI.indexOf('/') === 0) {\n        return baseIRI.substr(0, baseSlashAfterColonPos) + removeDotSegments(relativeIRI);\n    }\n    let baseIRIPath = baseIRI.substr(baseSlashAfterColonPos);\n    const baseIRILastSlashPos = baseIRIPath.lastIndexOf('/');\n    // Ignore everything after the last '/' in the baseIRI path\n    if (baseIRILastSlashPos >= 0 && baseIRILastSlashPos < baseIRIPath.length - 1) {\n        baseIRIPath = baseIRIPath.substr(0, baseIRILastSlashPos + 1);\n        // Also remove the first character of the relative path if it starts with '.' (and not '..' or './')\n        // This change is only allowed if there is something else following the path\n        if (relativeIRI[0] === '.' && relativeIRI[1] !== '.' && relativeIRI[1] !== '/' && relativeIRI[2]) {\n            relativeIRI = relativeIRI.substr(1);\n        }\n    }\n    // Prefix the value with the baseIRI path where\n    relativeIRI = baseIRIPath + relativeIRI;\n    // Remove dot segment from the IRI\n    relativeIRI = removeDotSegments(relativeIRI);\n    // Prefix our transformed value with the part of the baseIRI until the first '/' after the first ':'.\n    return baseIRI.substr(0, baseSlashAfterColonPos) + relativeIRI;\n}\nexports.resolve = resolve;\n/**\n * Remove dot segments from the given path,\n * as described in https://www.ietf.org/rfc/rfc3986.txt (page 32).\n * @param {string} path An IRI path.\n * @return {string} A path, will always start with a '/'.\n */\nfunction removeDotSegments(path) {\n    // Prepare a buffer with segments between each '/.\n    // Each segment represents an array of characters.\n    const segmentBuffers = [];\n    let i = 0;\n    while (i < path.length) {\n        // Remove '/.' or '/..'\n        switch (path[i]) {\n            case '/':\n                if (path[i + 1] === '.') {\n                    if (path[i + 2] === '.') {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 3])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Go to parent directory,\n                        // so we remove a parent segment\n                        segmentBuffers.pop();\n                        // Ensure that we end with a slash if there is a trailing '/..'\n                        if (!path[i + 3]) {\n                            segmentBuffers.push([]);\n                        }\n                        i += 3;\n                    }\n                    else {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 2])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Ensure that we end with a slash if there is a trailing '/.'\n                        if (!path[i + 2]) {\n                            segmentBuffers.push([]);\n                        }\n                        // Go to the current directory,\n                        // so we do nothing\n                        i += 2;\n                    }\n                }\n                else {\n                    // Start a new segment\n                    segmentBuffers.push([]);\n                    i++;\n                }\n                break;\n            case '#':\n            case '?':\n                // Query and fragment string should be appended unchanged\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path.substr(i));\n                // Break the while loop\n                i = path.length;\n                break;\n            default:\n                // Not a special character, just append it to our buffer\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path[i]);\n                i++;\n                break;\n        }\n    }\n    return '/' + segmentBuffers.map((buffer) => buffer.join('')).join('/');\n}\nexports.removeDotSegments = removeDotSegments;\n/**\n * Removes dot segments of the given IRI.\n * @param {string} iri An IRI (or part of IRI).\n * @param {number} colonPosition The position of the first ':' in the IRI.\n * @return {string} The IRI where dot segments were removed.\n */\nfunction removeDotSegmentsOfPath(iri, colonPosition) {\n    // Determine where we should start looking for the first '/' that indicates the start of the path\n    let searchOffset = colonPosition + 1;\n    if (colonPosition >= 0) {\n        if (iri[colonPosition + 1] === '/' && iri[colonPosition + 2] === '/') {\n            searchOffset = colonPosition + 3;\n        }\n    }\n    else {\n        if (iri[0] === '/' && iri[1] === '/') {\n            searchOffset = 2;\n        }\n    }\n    // Determine the path\n    const pathSeparator = iri.indexOf('/', searchOffset);\n    if (pathSeparator < 0) {\n        return iri;\n    }\n    const base = iri.substr(0, pathSeparator);\n    const path = iri.substr(pathSeparator);\n    // Remove dot segments from the path\n    return base + removeDotSegments(path);\n}\nexports.removeDotSegmentsOfPath = removeDotSegmentsOfPath;\nfunction isCharacterAllowedAfterRelativePathSegment(character) {\n    return !character || character === '#' || character === '?' || character === '/';\n}\n//# sourceMappingURL=Resolve.js.map"],"names":["Sink","ParserStream","Parser","constructor","options","super","module","exports","rdf","JsonLdParser","Transform","relativeIriProtocol","termCleanup","factory","term","termType","value","startsWith","namedNode","slice","length","quadCleanup","cleanup","quad","parts","subject","predicate","object","graph","input","baseIRI","context","parser","dataFactory","streamingProfile","pipe","transform","objectMode","encoding","callback","on","Object","entries","forEach","prefix","iri","emit","err","destroy","Impl","this","import","output","assign","readable","serialize","toJSON","JSON","stringify","Array","isArray","reduce","t","cv","ci","comma","undefined","keys","sort","self","support","searchParams","iterable","Symbol","blob","Blob","e","formData","arrayBuffer","isDataView","obj","DataView","prototype","isPrototypeOf","viewClasses","isArrayBufferView","ArrayBuffer","isView","indexOf","toString","call","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","iteratorFor","items","iterator","next","shift","done","Headers","headers","map","append","header","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","result","onerror","error","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","buf","view","Uint8Array","chars","i","fromCharCode","join","bufferClone","byteLength","set","buffer","Body","_initBody","_bodyInit","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","get","type","rejected","Error","then","text","decode","json","parse","oldValue","has","hasOwnProperty","thisArg","push","values","methods","normalizeMethod","method","upcased","toUpperCase","Request","url","credentials","mode","signal","referrer","form","trim","split","bytes","replace","decodeURIComponent","parseHeaders","rawHeaders","preProcessedHeaders","line","key","Response","bodyInit","status","ok","statusText","clone","response","redirectStatuses","redirect","RangeError","location","DOMException","message","stack","create","fetch","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","defineProperty","COMPATIBLE_ENCODING_PATTERN","WS_TRIM_PATTERN","WS_CHAR_PATTERN","WS_FOLD_PATTERN","DELIMITER_PATTERN","WS_DELIMITER_PATTERN","TOKEN_PATTERN","STATE","IDLE","URI","ATTR","hasWhitespace","skipWhitespace","offset","needsQuotes","Link","refs","rel","links","attr","link","state","ref","expandRelations","end","uri","attrValue","isSingleOccurenceAttr","parseExtendedValue","formatAttribute","isCompatibleEncoding","isTokenAttr","escapeQuotes","rels","exec","language","formatExtendedAttribute","data","encodedValue","Buffer","isBuffer","encodeURIComponent","item","__createBinding","o","m","k","k2","enumerable","__exportStar","p","defaultExpandOptions","ContextParser","relative_to_absolute_iri_1","ErrorCoded_1","FetchDocumentLoader_1","JsonLdContextNormalized_1","Util_1","canonicalizeJson","documentLoader","FetchDocumentLoader","documentCache","validateContext","skipValidation","expandContentTypeToBase","remoteContextsDepthLimit","redirectSchemaOrgHttps","static","strictRange","errorCode","ErrorCoded","Util","REGEX_LANGUAGE_TAG","strictValues","ERROR_CODES","INVALID_BASE_DIRECTION","REGEX_DIRECTION_TAG","idifyReverseTerms","isValidKeyword","INVALID_IRI_MAPPING","isPotentialKeyword","expandPrefixedTerms","contextRaw","getContextRaw","EXPAND_KEYS_BLACKLIST","isReservedInternalKeyword","keyValue","ALIAS_DOMAIN_BLACKLIST","KEYWORD_REDEFINITION","ALIAS_RANGE_BLACKLIST","getContextValueId","INVALID_KEYWORD_ALIAS","INVALID_TERM_DEFINITION","isPrefixValue","changed","expandTerm","id","canAddIdEntry","isValidIri","newId","normalize","processingMode","normalizeLanguageTags","containersToHash","newValue","containerValue","applyScopedProtected","isTermProtected","validateKeywordRedefinitions","contextBefore","contextAfter","expandOptions","isPrefix","isSimpleTermDefinitionPrefix","valueBefore","valueAfter","PROTECTED_TERM_REDEFINITION","validate","valueType","substr","INVALID_VOCAB_MAPPING","INVALID_BASE_IRI","validateLanguage","INVALID_DEFAULT_LANGUAGE","INVALID_VERSION_VALUE","validateDirection","INVALID_CONTEXT_ENTRY","INVALID_PROPAGATE_VALUE","getPrefix","CYCLIC_IRI_MAPPING","isValidIriWeak","JsonLdContextNormalized","isCompactIri","objectKey","objectValue","INVALID_TYPE_MAPPING","INVALID_REVERSE_PROPERTY","CONTAINERS_1_0","INVALID_CONTAINER_MAPPING","CONTAINERS","INVALID_LANGUAGE_MAPPING","INVALID_PREFIX_VALUE","INVALID_NEST_VALUE","applyBaseEntry","inheritFromParent","parentContext","external","normalizeContextIri","contextIri","_a","async","ignoreScopedContexts","ignoreProtection","ignoreRemoteScopedContexts","INVALID_SCOPED_CONTEXT","minimalProcessing","parentContextInitial","DEFAULT_PROCESSING_MODE","remoteContexts","CONTEXT_OVERFLOW","hasProtectedTerms","INVALID_CONTEXT_NULLIFICATION","overriddenLoad","getOverriddenLoad","parsedStringContext","load","contextIris","contexts","all","subContext","reducedContexts","accContextPromise","contextEntry","accContext","newContext","importContext","INVALID_IMPORT_VALUE","loadImportContext","newContextWrapped","parseInnerContexts","INVALID_LOCAL_CONTEXT","cached","document","LOADING_REMOTE_CONTEXT_FAILED","INVALID_REMOTE_CONTEXT","RECURSIVE_CONTEXT_INCLUSION","importContextIri","allowPrefixForcing","allowPrefixNonGenDelims","allowVocabRelativeToBase","code","http_link_header_1","fetcher","accept","mediaType","colonPos","alternateUrl","linkHeader","LOADING_DOCUMENT_FAILED","ContextParser_1","expandVocab","contextValue","validIriMapping","vocab","vocabRelative","base","potentialKeyword","contextPrefixValue","compactIri","shortestPrefixing","suffix","separatorPos","charAt","isPrefixIriEndingWithGenDelim","keyword","KEYWORD_REGEX","prefixIri","ENDS_WITH_GEN_DELIM","Boolean","IRI_REGEX","IRI_REGEX_WEAK","VALID_KEYWORDS","ContextTree","subTrees","getContext","head","tail","subTree","depth","setContext","removeContext","path","jsonld_context_parser_1","stream_1","EntryHandlerArrayValue_1","EntryHandlerContainer_1","EntryHandlerInvalidFallback_1","EntryHandlerPredicate_1","EntryHandlerKeywordContext_1","EntryHandlerKeywordGraph_1","EntryHandlerKeywordId_1","EntryHandlerKeywordIncluded_1","EntryHandlerKeywordNest_1","EntryHandlerKeywordType_1","EntryHandlerKeywordUnknownFallback_1","EntryHandlerKeywordValue_1","ParsingContext_1","readableObjectMode","parsingContext","ParsingContext","util","jsonParser","contextJobs","typeJobs","contextAwaitingJobs","lastDepth","lastKeys","lastOnValueJob","attachJsonParserListeners","endsWith","MULTIPLE_CONTEXT_LINK_HEADERS","ignoreMissingContextLinkHeader","contentType","match","stream","PassThrough","parsed","_transform","chunk","write","lastDepthCheck","flushStacks","listPointer","listPointerStack","rdfRest","rdfNil","getDefaultGraph","listId","listHead","idStack","listRootDepth","splice","EntryHandlerContainer","isBufferableContainerHandler","pendingContainerFlushBuffers","flushBuffer","unaliasKeyword","parentKey","unaliasKeywordParent","emittedStack","handleKey","INVALID_REVERSE_PROPERTY_MAP","inProperty","validationStack","property","Math","max","validationResult","validateKey","valid","isLiteral","entryHandler","ENTRY_HANDLERS","testResult","handle","isStackProcessor","processingStack","validateValueIndexes","unaliasedKeywordCacheStack","processingType","graphStack","graphContainerTermStack","jsonLiteralStack","literalStack","subjects","blankNode","valueBuffer","unidentifiedValuesBuffer","depthOffsetGraph","getDepthOffsetGraph","graphs","getGraphContainerValue","bufferedValue","reverse","emitQuad","subGraphBuffer","getUnidentifiedGraphBufferSafe","graphBuffer","unidentifiedGraphsBuffer","topLevelProperties","isPropertyHandler","onValue","fill","v","isParsingContextInner","valueJobCb","newOnValueJob","contextTree","jobs","job","executeBufferedJobs","onError","applicableTypeJobs","applicableTypeJobIds","typeJob","isPrefixArray","sortedTypeJobs","job1","job2","sortedApplicableTypeJobIds","jobId","EntryHandlerArrayValue","EntryHandlerKeywordContext","EntryHandlerKeywordId","EntryHandlerKeywordIncluded","EntryHandlerKeywordGraph","EntryHandlerKeywordNest","EntryHandlerKeywordType","EntryHandlerKeywordValue","EntryHandlerKeywordUnknownFallback","EntryHandlerPredicate","EntryHandlerInvalidFallback","ContextTree_1","JsonLdParser_1","contextParser","skipContextValidation","produceGeneralizedRdf","allowSubjectList","defaultGraph","rdfDirection","streamingProfileAllowOutOfOrderPlainType","activeProcessingMode","parseFloat","rootContext","parseContext","activeVersion","PROCESSING_MODE_CONFLICT","keysOriginal","contextData","getContextPropagationAware","contextKeyEntry","scopedContext","propagate","originalDepth","hasApplicablePropertyScopedContext","lastKey","lastKeyValue","pendingFlushBuffer","emitError","emitContext","getUnidentifiedValueBufferSafe","getExpandOptions","EXPAND_OPTIONS","shiftStack","depthOffset","deeperIdStack","rdf_data_factory_1","DataFactory","rdfFirst","RDF","rdfType","rdfJson","contextKey","fallback","entry","getContextValue","isContextValueReverse","needle","haystack","indexHashes","index","existingIndexValue","CONFLICTING_INDEXES","getContextValueType","literal","valueToJsonString","getContextValueContainer","getContextSelfOrPropertyScoped","unaliasKeywords","val","valueLanguage","valueDirection","valueIndex","subValue","INVALID_VALUE_OBJECT","INVALID_VALUE_OBJECT_VALUE","INVALID_INDEX_VALUE","INVALID_LANGUAGE_TAGGED_VALUE","INVALID_LANGUAGE_TAGGED_STRING","nullableTermToArray","createLanguageDirectionLiteral","INVALID_TYPED_VALUE","typeTerm","createVocabOrBaseTerm","valueToTerm","INVALID_SET_OR_LIST_OBJECT","listValue","graphContainerEntries","resourceToTerm","stringValueToTerm","XSD_BOOLEAN","XSD_INTEGER","XSD_DOUBLE","predicateToTerm","expanded","intToString","datatype","Number","isFinite","isInteger","toExponential","defaultDatatype","contextType","contextLanguage","getContextValueLanguage","contextDirection","getContextValueDirection","direction","valueNode","disableCache","cachedUnaliasedKeyword","unliased","hash","newHash","containers","getContainerHandler","isComplexGraphContainer","validateReverseSubject","INVALID_REVERSE_PROPERTY_VALUE","depthContainer","graphContainerIndex","getContainerGraphIndex","graphId","keyUnaliased","getContainerKey","lastValidDepth","XSD","ContainerHandlerIdentifier","canCombineWithGraph","maybeId","ids","some","equals","handlePendingContainerFlushBuffers","ContainerHandlerIndex","graphContainer","indexKey","indexPropertyRaw","getContextValueIndex","indexProperty","indexValues","indexValue","handlePredicateObject","ContainerHandlerLanguage","INVALID_LANGUAGE_MAP_VALUE","ContainerHandlerType","containerTypeType","entryHasIdentifier","keyOriginal","listRootKey","keyOption","handleListElement","valueOriginal","listRootKeys","newLinkTerm","linkTerm","ContainerHandlerIdentifier_1","ContainerHandlerIndex_1","ContainerHandlerLanguage_1","ContainerHandlerType_1","isSimpleGraphContainer","checkGraphContainer","containersSelf","containersParent","containerHandleName","CONTAINER_HANDLERS","handler","containerName","depthProperties","getPropertiesDepth","depthPropertiesGraph","atGraph","objects","isPropertyReverse","listValueContainer","EntryHandlerKeyword","EntryHandlerKeyword_1","INVALID_STREAMING_KEY_ORDER","INVALID_ID_VALUE","COLLIDING_KEYWORDS","INVALID_INCLUDED_VALUE","valueUnliased","elements","element","INVALID_TYPE_VALUE","hasTypedScopedContext","typeContext","c","keywordType","VALID_KEYWORDS_TYPES","INVALID_REVERSE_VALUE","C","LEFT_BRACE","RIGHT_BRACE","LEFT_BRACKET","RIGHT_BRACKET","COLON","COMMA","TRUE","FALSE","NULL","STRING","NUMBER","START","STOP","TRUE1","TRUE2","TRUE3","FALSE1","FALSE2","FALSE3","FALSE4","NULL1","NULL2","NULL3","NUMBER1","NUMBER3","STRING1","STRING2","STRING3","STRING4","STRING5","STRING6","VALUE","KEY","OBJECT","ARRAY","BACK_SLASH","charCodeAt","FORWARD_SLASH","BACKSPACE","FORM_FEED","NEWLINE","CARRIAGE_RETURN","TAB","STRING_BUFFER_SIZE","tState","string","stringBuffer","alloc","stringBufferOffset","unicode","highSurrogate","bytes_remaining","bytes_in_sequence","temp_buffs","toknam","l","proto","charError","appendStringChar","char","appendStringBuf","start","size","copy","n","onToken","j","intVal","parseInt","isNaN","token","parseError","pop","parent","BlankNode","other","BlankNode_1","DefaultGraph_1","Literal_1","NamedNode_1","Quad_1","Variable_1","dataFactoryCounter","blankNodeCounter","blankNodePrefix","NamedNode","languageOrDatatype","Literal","variable","Variable","DefaultGraph","INSTANCE","Quad","fromTerm","original","XSD_STRING","fromQuad","resetBlankNodeCounter","RDF_LANGUAGE_STRING","__export","relativeIRI","baseFragmentPos","baseQueryPos","relativeColonPos","removeDotSegmentsOfPath","valueColonPos","baseColonPos","baseIRIScheme","baseSlashAfterColonPos","removeDotSegments","baseIRIPath","baseIRILastSlashPos","lastIndexOf","segmentBuffers","isCharacterAllowedAfterRelativePathSegment","colonPosition","searchOffset","pathSeparator","character"],"sourceRoot":""}