{"version":3,"file":"js/853.69693908.js","mappings":"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","sources":["webpack://@zazuko/rdf-sketch/./node_modules/@graphy/core.data.factory/main.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdf-esm/to-ntriples/lib/blankNode.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdf-esm/to-ntriples/lib/dataset.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdf-esm/to-ntriples/lib/defaultGraph.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdf-esm/to-ntriples/lib/namedNode.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdf-esm/to-ntriples/lib/literal.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdf-esm/to-ntriples/lib/quad.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdf-esm/to-ntriples/lib/variable.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdf-esm/to-ntriples/index.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdf-esm/term-map/index.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdfjs-elements/formats-pretty/serializers/TransformToConciseHash.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdfjs-elements/formats-pretty/serializers/graphy.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdfjs-elements/formats-pretty/parsers/graphy.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdfjs-elements/formats-pretty/serializers/jsonld.js","webpack://@zazuko/rdf-sketch/./node_modules/@rdfjs-elements/formats-pretty/index.js"],"sourcesContent":["\n\n\nconst crypto = require('crypto');\n\nconst R_INVALID_IRIREF = /([\\x00-\\x20<>\"{}|^`\\\\]|%(?![0-9A-F][0-9A-F]))/g;\nconst F_REPLACE_INVALID_IRIREF = (s_, s_v) => {\n\tlet s_code = s_v.codePointAt(0).toString(16)+'';\n\treturn s_code.length > 4\n\t\t? '\\\\U'+s_code.padStart(8, '0')\n\t\t: '\\\\u'+s_code.padStart(4, '0');\n};\n\nconst clean_iri = p_iri_dirty => p_iri_dirty.replace(R_INVALID_IRIREF, F_REPLACE_INVALID_IRIREF);\n\n\n\n// eslint-disable-next-line no-misleading-character-class\nconst RT_AVOID_PNAME_NS = /^(?:[\\u0000-@[-`{-\\u00bf\\u00d7\\u00f7\\u0300-\\u306f\\u037e\\u2000-\\u200b\\u200e-\\u206f\\u2190-\\u2bff\\u2ff0-\\u3000\\ud800-\\uf8ff\\ufdd0-\\ufddf\\ufffe\\uffff].+|(?:.+?[\\u0000-,\\/:-@[-^`{-\\u00b6\\u00b8-\\u00bf\\u00d7\\u00f7\\u037e\\u2000-\\u200b\\u200e-\\u203e\\u2041-\\u206f\\u2190-\\u2bff\\u2ff0-\\u3000\\ud800-\\uf8ff\\ufdd0-\\ufddf\\ufffe\\uffff].*)|.+\\.)$/;\n\n// eslint-disable-next-line no-misleading-character-class\nconst RT_AVOID_PNAME_LOCAL = /^(?:\\\\|[\\u0000-\\/;-@[-^`{-\\u00bf\\u00d7\\u00f7\\u0300-\\u306f\\u037e\\u2000-\\u200b\\u200e-\\u206f\\u2190-\\u2bff\\u2ff0-\\u3000\\ud800-\\uf8ff\\ufdd0-\\ufddf\\ufffe\\uffff].+|(?:.+?(?:\\\\|[\\u0000-,\\/;-@[-^`{-\\u00b6\\u00b8-\\u00bf\\u00d7\\u00f7\\u037e\\u2000-\\u200b\\u200e-\\u203e\\u2041-\\u206f\\u2190-\\u2bff\\u2ff0-\\u3000\\ud800-\\uf8ff\\ufdd0-\\ufddf\\ufffe\\uffff]).+)|(?:.+?(?:\\\\|[\\u0000-,.\\/;-@[-^`{-\\u00b6\\u00b8-\\u00bf\\u00d7\\u00f7\\u037e\\u2000-\\u200b\\u200e-\\u203e\\u2041-\\u206f\\u2190-\\u2bff\\u2ff0-\\u3000\\ud800-\\uf8ff\\ufdd0-\\ufddf\\ufffe\\uffff])))$/;\n\nconst RT_BOOLEAN_TRUE = /^([Tt](rue)?|TRUE)$/;\nconst RT_BOOLEAN_FALSE = /^([Ff](alse)?|FALSE)$/;\n\nconst S_UUID_V4 = 'xxxxxxxx_xxxx_4xxx_yxxx_xxxxxxxxxxxx';\nconst R_UUID_V4 = /[xy]/g;\n\nconst uuid_v4 = () => {\n\tlet dt_now = Date.now();\n\tif('undefined' !== typeof performance) dt_now += performance.now();\n\treturn S_UUID_V4.replace(R_UUID_V4, (s) => {\n\t\tlet x_r = (dt_now + (Math.random()*16)) % 16 | 0;\n\t\tdt_now = Math.floor(dt_now / 16);\n\t\treturn ('x' === s? x_r: ((x_r & 0x3) | 0x8)).toString(16);\n\t});\n};\n\n\n// symbol to access cache on a prefix mapping\nconst $_PREFIX_CACHE = Symbol('prefix-cache');\n\n// escape characters for compiling regexes\nconst R_REGEX_ESCAPE = /[$^*()+[\\\\{}|.?]/g;\n\n// valid locals of prefixed names\nconst SR_PN_LOCAL = '((?:[A-Za-z\\\\xc0-\\\\xd6\\\\xd8-\\\\xf6\\\\xf8-\\\\u{02ff}\\\\u{0370}-\\\\u{037d}\\\\u{037f}-\\\\u{1fff}\\\\u{200c}-\\\\u{200d}\\\\u{2070}-\\\\u{218f}\\\\u{2c00}-\\\\u{2fef}\\\\u{3001}-\\\\u{d7ff}\\\\u{f900}-\\\\u{fdcf}\\\\u{fdf0}-\\\\u{fffd}\\\\u{10000}-\\\\u{effff}_:0-9]|%[A-Fa-f0-9]{2}|\\\\\\\\[_~.\\\\-!$&\\'()*+,;=/?#@%])(?:(?:[A-Za-z\\\\xc0-\\\\xd6\\\\xd8-\\\\xf6\\\\xf8-\\\\u{02ff}\\\\u{0370}-\\\\u{037d}\\\\u{037f}-\\\\u{1fff}\\\\u{200c}-\\\\u{200d}\\\\u{2070}-\\\\u{218f}\\\\u{2c00}-\\\\u{2fef}\\\\u{3001}-\\\\u{d7ff}\\\\u{f900}-\\\\u{fdcf}\\\\u{fdf0}-\\\\u{fffd}\\\\u{10000}-\\\\u{effff}_\\\\-0-9\\\\xb7\\\\u{0300}-\\\\u{036f}\\\\u{203f}-\\\\u{2040}.:]|%[A-Fa-f0-9]{2}|\\\\\\\\[_~.\\\\-!$&\\'()*+,;=/?#@%])*(?:[A-Za-z\\\\xc0-\\\\xd6\\\\xd8-\\\\xf6\\\\xf8-\\\\u{02ff}\\\\u{0370}-\\\\u{037d}\\\\u{037f}-\\\\u{1fff}\\\\u{200c}-\\\\u{200d}\\\\u{2070}-\\\\u{218f}\\\\u{2c00}-\\\\u{2fef}\\\\u{3001}-\\\\u{d7ff}\\\\u{f900}-\\\\u{fdcf}\\\\u{fdf0}-\\\\u{fffd}\\\\u{10000}-\\\\u{effff}_\\\\-0-9\\\\xb7\\\\u{0300}-\\\\u{036f}\\\\u{203f}-\\\\u{2040}:]|%[A-Fa-f0-9]{2}|\\\\\\\\[_~.\\\\-!$&\\'()*+,;=/?#@%]))?)$';\n\n\n// create a cache on a prefix mapping\nfunction cache_prefixes(h_prefixes, b_terse=false) {\n\t// regex cache string building\n\tlet a_cache = [];\n\n\t// inverse mappings\n\tlet h_inverse = {};\n\n\t// each prefix/iri pair\n\tfor(let si_prefix in h_prefixes) {\n\t\tlet p_iri = h_prefixes[si_prefix];\n\n\t\t// prefix would make an invalid namespace; skip\n\t\tif(b_terse && RT_AVOID_PNAME_NS.test(si_prefix)) continue;\n\n\t\t// save inverse mapping\n\t\th_inverse[p_iri] = si_prefix;\n\n\t\t// push iri\n\t\ta_cache.push(p_iri.replace(R_REGEX_ESCAPE, '\\\\$&'));\n\t}\n\n\t// no prefixes; forgo cache\n\tif(!a_cache.length) return h_prefixes;\n\n\t// save cache object\n\th_prefixes[$_PREFIX_CACHE] = {\n\t\t_r_iris: new RegExp(`^(${a_cache.join('|')})${SR_PN_LOCAL}`, 'u'),\n\t\t_h_inverse: h_inverse,\n\t};\n\n\t// freeze object\n\treturn Object.freeze(h_prefixes);\n}\n\n\n\n// attempt to turn an iri into a terse prefixed name\nconst terse = (p_iri, h_prefixes) => {\n\t// ref cache\n\tlet g_cache = h_prefixes[$_PREFIX_CACHE];\n\n\t// cache exists\n\tif(g_cache) {\n\t\t// iri matching\n\t\tlet m_iri = g_cache._r_iris.exec(p_iri);\n\n\t\t// prefix mapped; compress\n\t\tif(m_iri) {\n\t\t\treturn g_cache._h_inverse[m_iri[1]]+':'+m_iri[2];\n\t\t}\n\t}\n\t// cache does not exist\n\telse {\n\t\t// best prefix id\n\t\tlet si_best_prefix = '';\n\t\tlet s_best_suffix = '';\n\n\t\t// length of longest matching iri\n\t\tlet nl_best_prefix_iri = -1;\n\n\t\t// each prefix in hash\n\t\tfor(let si_prefix in h_prefixes) {\n\t\t\tlet p_prefix_iri = h_prefixes[si_prefix];\n\n\t\t\t// target iri starts with prefix iri and its longer than the current best\n\t\t\tif(0 === p_iri.indexOf(p_prefix_iri) && p_prefix_iri.length > nl_best_prefix_iri\n\t\t\t\t// namespace is okay to use\n\t\t\t\t&& !RT_AVOID_PNAME_NS.test(si_prefix)\n\t\t\t) {\n\t\t\t\t// compute suffix\n\t\t\t\tlet s_suffix = p_iri.slice(p_prefix_iri.length);\n\n\t\t\t\t// suffix is okay to use\n\t\t\t\tif(!RT_AVOID_PNAME_LOCAL.test(s_suffix)) {\n\t\t\t\t\ts_best_suffix = s_suffix;\n\n\t\t\t\t\t// save prefix id as best\n\t\t\t\t\tsi_best_prefix = si_prefix;\n\n\t\t\t\t\t// update best iri length\n\t\t\t\t\tnl_best_prefix_iri = p_prefix_iri.length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// found a prefix\n\t\tif(-1 !== nl_best_prefix_iri) {\n\t\t\t// use terse prefixed name\n\t\t\treturn si_best_prefix+':'+s_best_suffix;\n\t\t}\n\t}\n\n\t// fallback\n\treturn '<'+p_iri+'>';\n};\n\n// attempt to turn an iri into a concise prefixed name\nconst concise = (p_iri, h_prefixes={}) => {\n\t// ref cache\n\tlet g_cache = h_prefixes[$_PREFIX_CACHE];\n\n\t// cache exists\n\tif(g_cache) {\n\t\t// iri matching\n\t\tlet m_iri = g_cache._r_iris.exec(p_iri);\n\n\t\t// prefix mapped; compress\n\t\tif(m_iri) {\n\t\t\treturn g_cache._h_inverse[m_iri[1]]+':'+m_iri[2];\n\t\t}\n\t}\n\t// cache does not exists\n\telse {\n\t\t// best prefix id\n\t\tlet s_best_prefix_id = '';\n\n\t\t// length of longest matching iri\n\t\tlet nl_best_prefix_iri = -1;\n\n\t\t// each prefix in hash\n\t\tfor(let s_prefix_id in h_prefixes) {\n\t\t\tlet p_prefix_iri = h_prefixes[s_prefix_id];\n\n\t\t\t// target iri starts with prefix iri and its longer than the current best\n\t\t\tif(p_iri.startsWith(p_prefix_iri) && p_prefix_iri.length > nl_best_prefix_iri) {\n\t\t\t\t// save prefix id as best\n\t\t\t\ts_best_prefix_id = s_prefix_id;\n\n\t\t\t\t// update best iri length\n\t\t\t\tnl_best_prefix_iri = p_prefix_iri.length;\n\t\t\t}\n\t\t}\n\n\t\t// found a prefix\n\t\tif(-1 !== nl_best_prefix_iri) {\n\t\t\treturn s_best_prefix_id+':'+p_iri.slice(nl_best_prefix_iri);\n\t\t}\n\t}\n\n\t// no prefix found; default to full iri\n\treturn '>'+p_iri;\n};\n\nconst R_C1N_DECONSTRUCT = /^([^:]*):(.*)$/;\n\nfunction c1_to_nt(sc1_in, h_prefixes={}, b_verbose=false) {\n\tswitch(sc1_in[0]) {\n\t\t// absolute iri\n\t\tcase '>': return '<'+sc1_in.slice(1)+'>';\n\n\t\t// blank node\n\t\tcase '_': {\n\t\t\t// ephemeral hint\n\t\t\tif(sc1_in.length <= 2 || '#' === sc1_in[2]) {\n\t\t\t\treturn (new EphemeralBlankNode())[b_verbose? 'verbose': 'terse']();\n\t\t\t}\n\t\t\t// labeled\n\t\t\telse {\n\t\t\t\treturn sc1_in;\n\t\t\t}\n\t\t}\n\n\t\t// simple literal\n\t\tcase '\"': return JSON.stringify(sc1_in.slice(1));\n\n\t\t// languaged literal\n\t\tcase '@': {\n\t\t\tlet i_contents = sc1_in.indexOf('\"');\n\t\t\treturn JSON.stringify(sc1_in.slice(i_contents+1))+sc1_in.slice(0, i_contents);\n\t\t}\n\n\t\t// datatyped literal\n\t\tcase '^': {\n\t\t\tlet i_contents = sc1_in.indexOf('\"');\n\t\t\treturn JSON.stringify(sc1_in.slice(i_contents+1))+'^^'+c1_to_nt(sc1_in.slice(1, i_contents), h_prefixes, b_verbose);\n\t\t}\n\n\t\t// default graph\n\t\tcase '*': return '';\n\n\t\t// directive / node explicit\n\t\tcase '<':\n\t\tcase '`': return factory.c1(sc1_in).terse(h_prefixes);\n\n\t\t// otherwise\n\t\tdefault: {\n\t\t\t// rdf:type alis\n\t\t\tif('a' === sc1_in) return b_verbose? '<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>': 'a';\n\n\t\t\t// deconstruct prefixed name\n\t\t\tlet [, si_prefix, s_suffix] = R_C1N_DECONSTRUCT.exec(sc1_in);\n\n\t\t\t// avoid illegal prefixed name parts\n\t\t\tif(b_verbose || RT_AVOID_PNAME_LOCAL.test(s_suffix) || RT_AVOID_PNAME_NS.test(si_prefix)) {\n\t\t\t\treturn '<'+h_prefixes[si_prefix]+s_suffix+'>';\n\t\t\t}\n\n\t\t\t// good as-is\n\t\t\treturn sc1_in;\n\t\t}\n\t}\n}\n\n\nclass GenericTerm {\n\tvalueOf() {\n\t\treturn this.concise();\n\t}\n\n\ttoString() {\n\t\treturn this.concise();\n\t}\n\n\tequals(z_other) {\n\t\treturn z_other\n\t\t\t? this === z_other\n\t\t\t\t|| (z_other.termType === this.termType && z_other.value === this.value)\n\t\t\t: false;\n\t}\n} Object.assign(GenericTerm.prototype, {\n\tisGraphyTerm: true,\n});\n\n\nclass NamedNode extends GenericTerm {\n\tconstructor(s_iri) {\n\t\tsuper();\n\t\tthis.value = s_iri;\n\t}\n\n\tconcise(h_prefixes={}) {\n\t\treturn concise(this.value, h_prefixes);\n\t}\n\n\tterse(h_prefixes={}, b_opt=false) {\n\t\treturn terse(clean_iri(this.value), h_prefixes, b_opt);\n\t}\n\n\tverbose() {\n\t\treturn '<'+clean_iri(this.value)+'>';\n\t}\n\n\tisolate() {\n\t\treturn {\n\t\t\ttermType: 'NamedNode',\n\t\t\tvalue: this.value,\n\t\t};\n\t}\n} Object.assign(NamedNode.prototype, {\n\ttermType: 'NamedNode',\n\tisNamedNode: true,\n});\n\nconst KT_RDF_TYPE = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type');\nKT_RDF_TYPE.isRdfTypeAlias = true;  // for serialization\n\nconst KT_RDF_LANG_STRING = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');\nconst G_ISOLATE_RDF_LANG_STRING = KT_RDF_LANG_STRING.isolate();\n\nconst KT_RDF_FIRST = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first');\nconst KT_RDF_REST = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#rest');\nconst KT_RDF_NIL = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#nil');\n\nconst KT_XSD_DATE = new NamedNode('http://www.w3.org/2001/XMLSchema#date');\nconst KT_XSD_DATETIME = new NamedNode('http://www.w3.org/2001/XMLSchema#dateTime');\nconst KT_XSD_STRING = new NamedNode('http://www.w3.org/2001/XMLSchema#string');\n\nclass GenericLiteral extends GenericTerm {\n\tequals(z_other) {\n\t\treturn z_other\n\t\t\t? this === z_other\n\t\t\t\t|| ('Literal' === z_other.termType && z_other.value === this.value\n\t\t\t\t\t&& this.datatype.equals(z_other.datatype) && z_other.language === this.language)\n\t\t\t: false;\n\t}\n\n\tverbose() {\n\t\treturn JSON.stringify(this.value)\n\t\t\t+ (this.language\n\t\t\t\t? '@'+this.language\n\t\t\t\t: '^^'+this.datatype.verbose());\n\t}\n\n\tconcise(h_prefixes) {\n\t\tif(this.language) {\n\t\t\treturn '@'+this.language+'\"'+this.value;\n\t\t}\n\t\telse {\n\t\t\treturn '^'+concise(this.datatype.value, h_prefixes)+'\"'+this.value;\n\t\t}\n\t}\n\n\tterse(h_prefixes={}) {\n\t\t// turn into terse\n\t\tlet st_datatype = this.datatype.terse(h_prefixes);\n\n\t\t// stringify literal\n\t\treturn JSON.stringify(this.value)\n\t\t\t+ (this.language\n\t\t\t\t? '@'+this.language\n\t\t\t\t: '^^'+st_datatype);\n\t}\n\n\tisolate() {\n\t\treturn {\n\t\t\ttermType: 'Literal',\n\t\t\tvalue: this.value,\n\t\t\tlanguage: this.language,\n\t\t\tdatatype: this.datatype.isolate(),\n\t\t};\n\t}\n} Object.assign(GenericLiteral.prototype, {\n\tdatatype: KT_XSD_STRING,\n\tlanguage: '',\n\ttermType: 'Literal',\n\tisLiteral: true,\n\tisSimple: false,\n});\n\nclass LanguagedLiteral extends GenericLiteral {\n\tconstructor(s_value, s_lang) {\n\t\tsuper();\n\t\tthis.value = s_value;\n\n\t\t// remove optional '@' character from beginning\n\t\tthis.language = ('@' === s_lang[0]? s_lang.slice(1): s_lang).toLowerCase();\n\t}\n\n\tverbose() {\n\t\treturn JSON.stringify(this.value)+'@'+this.language;\n\t}\n\n\tconcise() {\n\t\treturn '@'+this.language+'\"'+this.value;\n\t}\n\n\tterse() {\n\t\t// stringify literal\n\t\treturn JSON.stringify(this.value)+'@'+this.language;\n\t}\n\n\tisolate() {\n\t\treturn {\n\t\t\ttermType: 'Literal',\n\t\t\tvalue: this.value,\n\t\t\tlanguage: this.language,\n\t\t\tdatatype: G_ISOLATE_RDF_LANG_STRING,\n\t\t};\n\t}\n} Object.assign(LanguagedLiteral.prototype, {\n\tdatatype: KT_RDF_LANG_STRING,\n\tisLanguaged: true,\n});\n\n\nclass DatatypedLiteral extends GenericLiteral {\n\tverbose() {\n\t\treturn JSON.stringify(this.value)+'^^'+this.datatype.verbose();\n\t}\n\n\tconcise(h_prefixes) {\n\t\treturn '^'+concise(this.datatype.value, h_prefixes)+'\"'+this.value;\n\t}\n\n\tterse(h_prefixes={}) {\n\t\t// turn into terse\n\t\tlet st_datatype = this.datatype.terse(h_prefixes);\n\n\t\t// stringify literal\n\t\treturn JSON.stringify(this.value)+'^^'+st_datatype;\n\t}\n\n\tisolate() {\n\t\treturn {\n\t\t\ttermType: 'Literal',\n\t\t\tvalue: this.value,\n\t\t\tlanguage: this.language,\n\t\t\tdatatype: this.datatype.isolate(),\n\t\t};\n\t}\n} Object.assign(DatatypedLiteral.prototype, {\n\tisDatatyped: true,\n});\n\nclass ExplicitlyDatatypedLiteral extends DatatypedLiteral {\n\tconstructor(s_value, kt_datatype) {\n\t\tsuper();\n\t\tthis.value = s_value;\n\t\tthis.datatype = kt_datatype;\n\t}\n}\n\nclass RawLiteral extends GenericTerm {\n\tconstructor(s_value) {\n\t\tsuper();\n\t\tthis.value = s_value;\n\t}\n\n\tget isSimple() {\n\t\treturn !this.language && !this.datatype.equals(KT_XSD_STRING);\n\t}\n\n\tget isLanguaged() {\n\t\treturn !!this.language;\n\t}\n\n\tget isDatatyped() {\n\t\treturn KT_XSD_STRING.equals(this.datatype);\n\t}\n\n\tequals(z_other) {\n\t\treturn z_other\n\t\t\t? this === z_other\n\t\t\t\t|| ('Literal' === z_other.termType && z_other.value === this.value\n\t\t\t\t\t&& this.datatype.equals(z_other.datatype) && z_other.language === this.language)\n\t\t\t: false;\n\t}\n\n\tverbose() {\n\t\treturn JSON.stringify(this.value)\n\t\t\t+ (this.language\n\t\t\t\t? '@'+this.language\n\t\t\t\t: '^^'+this.datatype.verbose());\n\t}\n\n\tconcise(h_prefixes) {\n\t\tif(this.language) {\n\t\t\treturn '@'+this.language+'\"'+this.value;\n\t\t}\n\t\telse {\n\t\t\treturn '^'+concise(this.datatype.value, h_prefixes)+'\"'+this.value;\n\t\t}\n\t}\n\n\tterse(h_prefixes={}) {\n\t\t// turn into terse\n\t\tlet st_datatype = this.datatype.terse(h_prefixes);\n\n\t\t// stringify literal\n\t\treturn JSON.stringify(this.value)\n\t\t\t+ (this.language\n\t\t\t\t? '@'+this.language\n\t\t\t\t: '^^'+st_datatype);\n\t}\n\n\tisolate() {\n\t\treturn {\n\t\t\ttermType: 'Literal',\n\t\t\tvalue: this.value,\n\t\t\tlanguage: this.language,\n\t\t\tdatatype: this.datatype.isolate(),\n\t\t};\n\t}\n} Object.assign(RawLiteral.prototype, {\n\tdatatype: KT_XSD_STRING,\n\tlanguage: '',\n\ttermType: 'Literal',\n\tisLiteral: true,\n});\n\nclass SimpleLiteral extends GenericLiteral {\n\tconstructor(s_value) {\n\t\tsuper();\n\t\tthis.value = s_value;\n\t}\n\n\tverbose() {\n\t\treturn JSON.stringify(this.value);\n\t}\n\n\tconcise() {\n\t\treturn '\"'+this.value;\n\t}\n\n\tterse() {\n\t\treturn JSON.stringify(this.value);\n\t}\n} Object.assign(SimpleLiteral.prototype, {\n\tisSimple: true,\n});\n\n\n\nconst KT_XSD_INTEGER = new NamedNode('http://www.w3.org/2001/XMLSchema#integer');\nclass Literal_Integer extends DatatypedLiteral {\n\tstatic from(s_literal) {\n\t\tlet kt = new Literal_Integer(+s_literal);\n\t\tkt.value = s_literal;\n\t\treturn kt;\n\t}\n\n\tconstructor(x_value) {\n\t\tsuper();\n\t\tthis.value = x_value+'';\n\n\t\tthis.number = x_value;\n\t}\n\n\tconcise(h_prefixes={}) {\n\t\treturn '^'+KT_XSD_INTEGER.concise(h_prefixes)+'\"'+this.value;\n\t}\n\n\tterse() {\n\t\treturn this.value.includes('e')\n\t\t\t? `\"${this.value}\"^^<http://www.w3.org/2001/XMLSchema#integer>`\n\t\t\t: this.value;\n\t}\n} Object.assign(Literal_Integer.prototype, {\n\tdatatype: KT_XSD_INTEGER,\n\n\tisNumeric: true,\n\tisInteger: true,\n});\nconst KT_XSD_DOUBLE = new NamedNode('http://www.w3.org/2001/XMLSchema#double');\nclass Literal_Double extends DatatypedLiteral {\n\tstatic from(s_literal) {\n\t\tlet kt = new Literal_Double(+s_literal);\n\t\tkt.value = s_literal;\n\t\treturn kt;\n\t}\n\n\tconstructor(x_value) {\n\t\tsuper();\n\t\tthis.value = x_value+'';\n\n\t\tthis.number = x_value;\n\t}\n\n\tconcise(h_prefixes={}) {\n\t\treturn '^'+KT_XSD_DOUBLE.concise(h_prefixes)+'\"'+this.value;\n\t}\n\n\tterse() {\n\t\treturn this.number.toExponential();\n\t}\n} Object.assign(Literal_Double.prototype, {\n\tdatatype: KT_XSD_DOUBLE,\n\n\tisNumeric: true,\n\tisDouble: true,\n});\nconst KT_XSD_DECIMAL = new NamedNode('http://www.w3.org/2001/XMLSchema#decimal');\nclass Literal_Decimal extends DatatypedLiteral {\n\tstatic from(s_literal) {\n\t\tlet kt = new Literal_Decimal(+s_literal);\n\t\tkt.value = s_literal;\n\t\treturn kt;\n\t}\n\n\tconstructor(x_value) {\n\t\tsuper();\n\t\tthis.value = x_value+'';\n\n\t\tthis.number = x_value;\n\t}\n\n\tconcise(h_prefixes={}) {\n\t\treturn '^'+KT_XSD_DECIMAL.concise(h_prefixes)+'\"'+this.value;\n\t}\n\n\tterse() {\n\t\treturn this.value.includes('e')\n\t\t\t? `\"${this.value}\"^^<http://www.w3.org/2001/XMLSchema#decimal>`\n\t\t\t: this.value+(this.value.includes('.')? '': '.0');\n\t}\n} Object.assign(Literal_Decimal.prototype, {\n\tdatatype: KT_XSD_DECIMAL,\n\n\tisNumeric: true,\n\tisDecimal: true,\n});\nconst KT_XSD_BOOLEAN = new NamedNode('http://www.w3.org/2001/XMLSchema#boolean');\nclass Literal_Boolean extends DatatypedLiteral {\n\tstatic from(s_literal) {\n\t\tlet kt = new Literal_Boolean(+s_literal);\n\t\tkt.value = s_literal;\n\t\treturn kt;\n\t}\n\n\tconstructor(b_value) {\n\t\tsuper();\n\t\tthis.value = b_value+'';\n\t\tthis.boolean = b_value;\n\t}\n\n\tconcise(h_prefixes={}) {\n\t\treturn '^'+KT_XSD_BOOLEAN.concise(h_prefixes)+'\"'+this.value;\n\t}\n\n\tterse() {\n\t\treturn this.value+'';\n\t}\n} Object.assign(Literal_Boolean.prototype, {\n\tdatatype: KT_XSD_BOOLEAN,\n\tisBoolean: true,\n});\n\n\n\nclass Literal_PositiveInfinity extends Literal_Double {\n\tconstructor() {\n\t\tsuper(Infinity);\n\t\tthis.value = 'INF';\n\t}\n\n\tterse(h_prefixes) {\n\t\treturn '\"INF\"^^'+KT_XSD_DOUBLE.terse(h_prefixes);\n\t}\n} Object.assign(Literal_PositiveInfinity.prototype, {\n\tisInfinite: true,\n});\n\nclass Literal_NegativeInfinity extends Literal_Double {\n\tconstructor() {\n\t\tsuper(-Infinity);\n\t\tthis.value = '-INF';\n\t}\n\n\tterse(h_prefixes) {\n\t\treturn '\"-INF\"^^'+KT_XSD_DOUBLE.terse(h_prefixes);\n\t}\n} Object.assign(Literal_NegativeInfinity.prototype, {\n\tisInfinite: true,\n});\n\nclass Literal_NaN extends Literal_Double {\n\tconstructor() {\n\t\tsuper(NaN);\n\t\tthis.value = 'NaN';\n\t}\n\n\tterse(h_prefixes) {\n\t\treturn '\"NaN\"^^'+KT_XSD_DOUBLE.terse(h_prefixes);\n\t}\n} Object.assign(Literal_NaN.prototype, {\n\tisNaN: true,\n});\n\n\nfunction BlankNode(s_value, b_anonymous=false) {\n\tthis.value = s_value;\n\tthis.isAnonymous = b_anonymous;\n} BlankNode.prototype = Object.assign(\n\tObject.create(GenericTerm.prototype), {\n\t\ttermType: 'BlankNode',\n\t\tisBlankNode: true,\n\n\t\tconcise() {\n\t\t\treturn '_:'+this.value;\n\t\t},\n\n\t\tterse() {\n\t\t\treturn '_:'+this.value;\n\t\t},\n\n\t\tverbose() {\n\t\t\treturn '_:'+this.value;\n\t\t},\n\n\t\tisolate() {\n\t\t\treturn {\n\t\t\t\ttermType: 'BlankNode',\n\t\t\t\tvalue: this.value,\n\t\t\t};\n\t\t},\n\t});\n\n\nfunction EphemeralBlankNode() {}\nEphemeralBlankNode.prototype = Object.assign(\n\tObject.create(BlankNode.prototype), {\n\t\tisAnonymous: true,\n\t\tisEphemeral: true,\n\n\t\tconcise() {\n\t\t\treturn '_:#'+this.value;\n\t\t},\n\n\t\tterse() {\n\t\t\treturn '[]';\n\t\t},\n\n\t\tverbose() {\n\t\t\treturn '_:'+this.value;\n\t\t},\n\n\t\tisolate() {\n\t\t\treturn {\n\t\t\t\ttermType: 'BlankNode',\n\t\t\t\tvalue: this.value,\n\t\t\t};\n\t\t},\n\n\t\tequals() {\n\t\t\treturn false;\n\t\t},\n\t});\nObject.defineProperty(EphemeralBlankNode.prototype, 'value', {\n\tget() {\n\t\treturn '_'+uuid_v4();\n\t},\n});\n\nclass Variable extends GenericTerm {\n\tconstructor(s_label) {\n\t\tsuper();\n\t\tthis.value = s_label;\n\t}\n\n\tconcise() {\n\t\treturn '?'+this.value;\n\t}\n\n\tterse() {\n\t\tthrow new Error(`Cannot call .terse() on 'Variable' term type`);\n\t}\n\n\tverbose() {\n\t\tthrow new Error(`Cannot call .verbose() on 'Variable' term type`);\n\t}\n\n\tisolate() {\n\t\treturn {\n\t\t\ttermType: 'Variable',\n\t\t\tvalue: this.value,\n\t\t};\n\t}\n} Object.assign(Variable.prototype, {\n\ttermType: 'Variable',\n\tisVariable: true,\n});\n\n\nfunction DefaultGraph() {}\nDefaultGraph.prototype = Object.assign(\n\tObject.create(GenericTerm.prototype), {\n\t\tvalue: '',\n\t\ttermType: 'DefaultGraph',\n\t\tisDefaultGraph: true,\n\n\t\tconcise() {\n\t\t\treturn '*';\n\t\t},\n\n\t\tterse() {\n\t\t\treturn '';\n\t\t},\n\n\t\tverbose() {\n\t\t\treturn '';\n\t\t},\n\n\t\tisolate() {\n\t\t\treturn {\n\t\t\t\ttermType: 'DefaultGraph',\n\t\t\t\tvalue: '',\n\t\t\t};\n\t\t},\n\t});\n\nfunction NoGraph() {}\nNoGraph.prototype = Object.assign(\n\tObject.create(GenericTerm.prototype), {\n\t\tvalue: '',\n\t\ttermType: 'NoGraph',\n\n\t\tconcise() {\n\t\t\treturn '';\n\t\t},\n\n\t\tterse() {\n\t\t\treturn '';\n\t\t},\n\n\t\tverbose() {\n\t\t\treturn '';\n\t\t},\n\n\t\tisolate() {\n\t\t\treturn {\n\t\t\t\ttermType: 'NoGraph',\n\t\t\t\tvalue: '',\n\t\t\t};\n\t\t},\n\t});\n\nconst KT_DEFAULT_GRAPH = new DefaultGraph();\nfunction Quad(h_subject, h_predicate, h_object, h_graph=KT_DEFAULT_GRAPH) {\n\tthis.subject = h_subject;\n\tthis.predicate = h_predicate;\n\tthis.object = h_object;\n\tthis.graph = h_graph;\n} Object.assign(Quad.prototype, {\n\tisGraphyQuad: true,\n\n\tequals(z_other) {\n\t\treturn z_other\n\t\t\t? this === z_other\n\t\t\t\t|| (this.object.equals(z_other.object)\n\t\t\t\t\t&& this.subject.equals(z_other.subject)\n\t\t\t\t\t&& this.predicate.equals(z_other.predicate)\n\t\t\t\t\t&& this.graph.equals(z_other.graph))\n\t\t\t: false;\n\t},\n\n\tvalueOf() {\n\t\treturn this.verbose();\n\t},\n\n\tconcise(h_prefixes={}) {\n\t\treturn [\n\t\t\tthis.subject.concise(h_prefixes),\n\t\t\tthis.predicate.concise(h_prefixes),\n\t\t\tthis.object.concise(h_prefixes),\n\t\t\tthis.graph.concise(h_prefixes),\n\t\t];\n\t},\n\n\tterse(h_prefixes) {\n\t\tlet b_default_graph = this.graph.isDefaultGraph;\n\t\treturn (b_default_graph? '': this.graph.terse(h_prefixes)+' { ')\n\t\t\t+this.subject.terse(h_prefixes)\n\t\t\t+' '+this.predicate.terse(h_prefixes)\n\t\t\t+' '+this.object.terse(h_prefixes)+' .'\n\t\t\t+(b_default_graph? '': ' }');\n\t},\n\n\tverbose() {\n\t\treturn this.subject.verbose()\n\t\t\t+' '+this.predicate.verbose()\n\t\t\t+' '+this.object.verbose()\n\t\t\t+' '+(this.graph.isDefaultGraph? '': this.graph.verbose()+' ')+'.';\n\t},\n\n\tisolate() {\n\t\treturn {\n\t\t\tsubject: this.subject.isolate(),\n\t\t\tpredicate: this.predicate.isolate(),\n\t\t\tobject: this.object.isolate(),\n\t\t\tgraph: this.graph.isolate(),\n\t\t};\n\t},\n});\n\n\n\nlet g_raw = {\n\tnamedNode(p_iri) {\n\t\treturn new NamedNode(p_iri);\n\t},\n\n\tblankNode(s_label, b_anonymous) {\n\t\treturn new BlankNode(s_label, b_anonymous);\n\t},\n\n\tliteral(s_value) {\n\t\treturn new RawLiteral(s_value);\n\t},\n\n\tdefaultGraph() {\n\t\treturn new DefaultGraph();\n\t},\n\n\tquad(kt_subject, kt_predicate, kt_object, kt_graph) {\n\t\treturn new Quad(kt_subject, kt_predicate, kt_object, kt_graph || KT_DEFAULT_GRAPH);\n\t},\n\n\tinteger(w) {\n\t\treturn Literal_Integer.from(w);\n\t},\n\n\tdouble(w) {\n\t\treturn Literal_Double.from(w);\n\t},\n\n\tdecimal(w) {\n\t\treturn Literal_Decimal.from(w);\n\t},\n\n\tboolean(w) {\n\t\treturn new Literal_Boolean(w);\n\t},\n\n};\n\n\nconst factory = module.exports = {\n\tconcise,\n\n\tadopt(dc_factory) {\n\t\tlet dc_extend = Object.create(dc_factory);\n\t\tlet b_use_extend = false;\n\n\t\tif('function' !== typeof dc_factory.boolean) {\n\t\t\tlet kt_xsd_boolean = dc_factory.namedNode('http://www.w3.org/2001/XMLSchema#boolean');\n\t\t\tdc_extend.boolean = b_value => dc_factory.literal(b_value, kt_xsd_boolean);\n\t\t\tb_use_extend = true;\n\t\t}\n\n\t\tif('function' !== typeof dc_factory.double) {\n\t\t\tlet kt_xsd_double = dc_factory.namedNode('http://www.w3.org/2001/XMLSchema#double');\n\t\t\tdc_extend.double = s_value => dc_factory.double(s_value, kt_xsd_double);\n\t\t\tb_use_extend = true;\n\t\t}\n\n\t\tif('function' !== typeof dc_factory.decimal) {\n\t\t\tlet kt_xsd_decimal = dc_factory.namedNode('http://www.w3.org/2001/XMLSchema#decimal');\n\t\t\tdc_extend.decimal = s_value => dc_factory.decimal(s_value, kt_xsd_decimal);\n\t\t\tb_use_extend = true;\n\t\t}\n\n\t\tif('function' !== typeof dc_factory.integer) {\n\t\t\tlet kt_xsd_integer = dc_factory.namedNode('http://www.w3.org/2001/XMLSchema#integer');\n\t\t\tdc_extend.integer = s_value => dc_factory.integer(s_value, kt_xsd_integer);\n\t\t\tb_use_extend = true;\n\t\t}\n\n\t\tif('function' !== typeof dc_factory.simpleLiteral) {\n\t\t\tdc_extend.simpleLiteral = s_value => dc_factory.literal(s_value);\n\t\t\tb_use_extend = true;\n\t\t}\n\n\t\tif('function' !== typeof dc_factory.languagedLiteral) {\n\t\t\tdc_extend.languagedLiteral = (s_value, s_lang) => dc_factory.literal(s_value, s_lang);\n\t\t\tb_use_extend = true;\n\t\t}\n\n\t\tif('function' !== typeof dc_factory.datatypedLiteral) {\n\t\t\tdc_extend.datatypedLiteral = (s_value, kt_datatype) => dc_factory.literal(s_value, kt_datatype);\n\t\t\tb_use_extend = true;\n\t\t}\n\n\t\tif(b_use_extend) {\n\t\t\treturn dc_extend;\n\t\t}\n\t\telse {\n\t\t\treturn dc_factory;\n\t\t}\n\t},\n\n\traw: g_raw,\n\tunfiltered: {\n\t\t...g_raw,\n\t\tliteral(s_value, z_datatype_or_lang) {\n\t\t\tif(!z_datatype_or_lang || KT_XSD_STRING.equals(z_datatype_or_lang)) {\n\t\t\t\treturn new SimpleLiteral(s_value);\n\t\t\t}\n\t\t\telse if('string' === typeof z_datatype_or_lang) {\n\t\t\t\treturn new LanguagedLiteral(s_value, z_datatype_or_lang);\n\t\t\t}\n\t\t\telse if(KT_XSD_STRING.equals(z_datatype_or_lang)) {\n\t\t\t\treturn new SimpleLiteral(s_value);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new ExplicitlyDatatypedLiteral(s_value, z_datatype_or_lang);\n\t\t\t}\n\t\t},\n\n\t\tsimpleLiteral(s_value) {\n\t\t\treturn new SimpleLiteral(s_value);\n\t\t},\n\n\t\tlanguagedLiteral(s_value, s_language) {\n\t\t\treturn new LanguagedLiteral(s_value, s_language);\n\t\t},\n\n\t\tdatatypedLiteral(s_value, kt_datatype) {\n\t\t\tif(KT_XSD_STRING.equals(kt_datatype)) {\n\t\t\t\treturn new SimpleLiteral(s_value);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn new ExplicitlyDatatypedLiteral(s_value, kt_datatype);\n\t\t\t}\n\t\t},\n\t},\n\n\tnumber(x) {\n\t\t// not finite or not a number\n\t\tif('number' === typeof x && (!Number.isFinite(x) || Number.isNaN(x))) {\n\t\t\treturn factory.double(x);\n\t\t}\n\t\t// integer or bigint\n\t\telse if(Number.isInteger(x) || 'bigint' === typeof x) {  // eslint-disable-line valid-typeof\n\t\t\treturn factory.integer(x);\n\t\t}\n\t\t// non-integer\n\t\telse {\n\t\t\treturn factory.decimal(x);\n\t\t}\n\t},\n\n\tdate(dt) {\n\t\treturn factory.literal(dt.toISOString().replace(/T.+$/, 'Z'), KT_XSD_DATE);\n\t},\n\n\tdateTime(dt) {\n\t\treturn factory.literal(dt.toISOString(), KT_XSD_DATETIME);\n\t},\n\n\tnamedNode(p_iri) {\n\t\treturn new NamedNode(p_iri);\n\t},\n\n\tephemeral() {\n\t\treturn new EphemeralBlankNode();\n\t},\n\n\t// @deprecated\n\tanonymous() {\n\t\treturn new EphemeralBlankNode();\n\t},\n\n\tblankNode(z_label) {\n\t\t// no label given, generate a UUID\n\t\tif(!z_label) {\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\treturn new BlankNode('_'+uuid_v4(), true);\n\t\t}\n\t\t// label given\n\t\telse if('string' === typeof z_label) {\n\t\t\treturn new BlankNode(z_label);\n\t\t}\n\n\t\tthrow new TypeError(`factory.blankNode(label) expects 'label' parameter to be falsy or a string; instead found: ${z_label}`);\n\t},\n\n\tliteral(s_value, z_datatype_or_lang) {\n\t\tif(!z_datatype_or_lang || KT_XSD_STRING.equals(z_datatype_or_lang)) {\n\t\t\treturn new SimpleLiteral(s_value);\n\t\t}\n\t\telse if('string' === typeof z_datatype_or_lang) {\n\t\t\treturn new LanguagedLiteral(s_value, z_datatype_or_lang);\n\t\t}\n\t\telse {\n\t\t\treturn new ExplicitlyDatatypedLiteral(s_value, z_datatype_or_lang);\n\t\t}\n\t},\n\n\tinteger(w_value) {\n\t\tlet s_type = typeof w_value;\n\n\t\t// a number was given\n\t\tif('number' === s_type) {\n\t\t\t// not a finite number\n\t\t\tif(!Number.isFinite(w_value)) {\n\t\t\t\t// NaN\n\t\t\t\tif(Number.isNaN(w_value)) {\n\t\t\t\t\tthrow new Error('XSD integer cannot encode NaN. Try using double');\n\t\t\t\t}\n\n\t\t\t\tthrow new Error('XSD integer cannot encode +/-infinity. Try using double');\n\t\t\t}\n\t\t\t// not an integer\n\t\t\telse if(!Number.isInteger(w_value)) {\n\t\t\t\tthrow new Error('Number is not an integer: '+w_value);\n\t\t\t}\n\n\t\t\treturn new Literal_Integer(w_value);\n\t\t}\n\t\t// string\n\t\telse if('string' === s_type) {\n\t\t\t// empty string\n\t\t\tif('' === w_value) {\n\t\t\t\tthrow new Error('Refusing to serialize empty string as xsd:integer');\n\t\t\t}\n\n\t\t\t// parse to number\n\t\t\tlet x_value = +w_value;\n\n\t\t\t// failed to parse or not an integer\n\t\t\tif(Number.isNaN(x_value) || !Number.isInteger(x_value)) {\n\t\t\t\tthrow new Error('Invalid integer string: '+w_value);\n\t\t\t}\n\n\t\t\treturn new Literal_Integer(x_value);\n\t\t}\n\t\t// undefined\n\t\telse if('undefined' === s_type) {\n\t\t\tthrow new Error('Refusing to serialize undefined value as xsd:integer');\n\t\t}\n\t\t// other\n\t\telse {\n\t\t\t// null\n\t\t\tif(null === w_value) {\n\t\t\t\tthrow new Error('Refusing to serialize null value as xsd:integer');\n\t\t\t}\n\n\t\t\t// invalid\n\t\t\tthrow new Error('XSD integer expects a number type or integer string');\n\t\t}\n\t},\n\tdouble(w_value) {\n\t\tlet s_type = typeof w_value;\n\n\t\t// a number was given\n\t\tif('number' === s_type) {\n\t\t\t// not a finite number\n\t\t\tif(!Number.isFinite(w_value)) {\n\t\t\t\t// NaN\n\t\t\t\tif(Number.isNaN(w_value)) {\n\t\t\t\t\treturn new Literal_NaN();\n\t\t\t\t}\n\n\t\t\t\treturn w_value > 0\n\t\t\t\t\t? new Literal_PositiveInfinity()\n\t\t\t\t\t: new Literal_NegativeInfinity();\n\t\t\t}\n\n\t\t\treturn new Literal_Double(w_value);\n\t\t}\n\t\t// string\n\t\telse if('string' === s_type) {\n\t\t\t// empty string\n\t\t\tif('' === w_value) {\n\t\t\t\tthrow new Error('Refusing to serialize empty string as xsd:double');\n\t\t\t}\n\n\t\t\t// parse to number\n\t\t\tlet x_value = +w_value;\n\n\t\t\t// failed to parse\n\t\t\tif(Number.isNaN(x_value)) {\n\t\t\t\tthrow new Error('Invalid decimal string: '+w_value);\n\t\t\t}\n\n\t\t\treturn new Literal_Double(x_value);\n\t\t}\n\t\t// undefined\n\t\telse if('undefined' === s_type) {\n\t\t\tthrow new Error('Refusing to serialize undefined value as xsd:double');\n\t\t}\n\t\t// other\n\t\telse {\n\t\t\t// null\n\t\t\tif(null === w_value) {\n\t\t\t\tthrow new Error('Refusing to serialize null value as xsd:double');\n\t\t\t}\n\n\t\t\t// invalid\n\t\t\tthrow new Error('XSD double expects a number type or double string');\n\t\t}\n\t},\n\tdecimal(w_value) {\n\t\tlet s_type = typeof w_value;\n\n\t\t// a number was given\n\t\tif('number' === s_type) {\n\t\t\t// not a finite number\n\t\t\tif(!Number.isFinite(w_value)) {\n\t\t\t\t// NaN\n\t\t\t\tif(Number.isNaN(w_value)) {\n\t\t\t\t\tthrow new Error('XSD decimal cannot encode NaN. Try using double');\n\t\t\t\t}\n\n\t\t\t\tthrow new Error('XSD decimal cannot encode +/-infinity. Try using double');\n\t\t\t}\n\n\t\t\treturn new Literal_Decimal(w_value);\n\t\t}\n\t\t// string\n\t\telse if('string' === s_type) {\n\t\t\t// empty string\n\t\t\tif('' === w_value) {\n\t\t\t\tthrow new Error('Refusing to serialize empty string as xsd:decimal');\n\t\t\t}\n\n\t\t\t// parse to number\n\t\t\tlet x_value = +w_value;\n\n\t\t\t// failed to parse\n\t\t\tif(Number.isNaN(x_value)) {\n\t\t\t\tthrow new Error('Invalid decimal string: '+w_value);\n\t\t\t}\n\n\t\t\treturn new Literal_Decimal(x_value);\n\t\t}\n\t\t// undefined\n\t\telse if('undefined' === s_type) {\n\t\t\tthrow new Error('Refusing to serialize undefined value as xsd:decimal');\n\t\t}\n\t\t// other\n\t\telse {\n\t\t\t// null\n\t\t\tif(null === w_value) {\n\t\t\t\tthrow new Error('Refusing to serialize null value as xsd:decimal');\n\t\t\t}\n\n\t\t\t// invalid\n\t\t\tthrow new Error('XSD decimal expects a number type or decimal string');\n\t\t}\n\t},\n\tboolean(w_value) {\n\t\tlet s_type = typeof w_value;\n\n\t\t// boolean\n\t\tif('boolean' === s_type) {\n\t\t\treturn new Literal_Boolean(w_value);\n\t\t}\n\t\t// number\n\t\telse if('number' === s_type) {\n\t\t\t// 1\n\t\t\tif(1 === w_value) {\n\t\t\t\treturn new Literal_Boolean(true);\n\t\t\t}\n\t\t\t// 0\n\t\t\telse if(0 === w_value) {\n\t\t\t\treturn new Literal_Boolean(false);\n\t\t\t}\n\n\t\t\t// invalid\n\t\t\tthrow new Error(`Boolean value 'w_value' must be either a '1' or '0' if using numbers`);\n\t\t}\n\t\t// string\n\t\telse if('string' === s_type) {\n\t\t\t// truthy value\n\t\t\tif(RT_BOOLEAN_TRUE.test(w_value)) {\n\t\t\t\treturn new Literal_Boolean(true);\n\t\t\t}\n\t\t\t// falsy value\n\t\t\telse if(RT_BOOLEAN_FALSE.test(w_value)) {\n\t\t\t\treturn new Literal_Boolean(false);\n\t\t\t}\n\n\t\t\t// empty string\n\t\t\tif('' === w_value) {\n\t\t\t\tthrow new Error('Refusing to serialize empty string as xsd:boolean');\n\t\t\t}\n\n\t\t\t// failed to parse\n\t\t\tthrow new Error('Invalid boolean string: '+w_value);\n\t\t}\n\t\t// undefined\n\t\telse if('undefined' === s_type) {\n\t\t\tthrow new Error('Refusing to serialize undefined value as xsd:boolean');\n\t\t}\n\t\t// other\n\t\telse {\n\t\t\t// null\n\t\t\tif(null === w_value) {\n\t\t\t\tthrow new Error('Refusing to serialize null value as xsd:boolean');\n\t\t\t}\n\n\t\t\t// invalid\n\t\t\tthrow new Error('XSD boolean expects a boolean type or boolean string');\n\t\t}\n\t},\n\n\n\tdefaultGraph() {\n\t\treturn new DefaultGraph();\n\t},\n\n\tvariable(s_label) {\n\t\treturn new Variable(s_label);\n\t},\n\n\t// warn\n\ttriple(h_subject, h_predicate, h_object) {\n\t\tlet e_stack = new Error('It is strongly encouraged to use .quad() instead of .triple()');\n\t\tconsole.warn(e_stack.stack.replace(/^(\\s*)Error:/, '$1Warning:'));\n\t\treturn new Quad(h_subject, h_predicate, h_object);\n\t},\n\n\tquad(h_subject, h_predicate, h_object, h_graph) {\n\t\treturn new Quad(h_subject, h_predicate, h_object, h_graph || KT_DEFAULT_GRAPH);\n\t},\n\n\tterm(z_term, w_prefixes) {\n\t\t// concise term\n\t\tif('string' === typeof z_term) {\n\t\t\treturn factory.c1(z_term, w_prefixes);\n\t\t}\n\t\t// rdfjs term\n\t\telse {\n\t\t\treturn factory.from.rdfjs_term(z_term);\n\t\t}\n\t},\n\n\t/**\n\t * construct a term object from a concise term string\n\t * @param  {c1_string} sc1_term - a representation of the term object to create\n\t * @param  {Object} h_prefixes - mappings for prefixes\n\t * @return {Term} - an RDFJS-compatible term object\n\t */\n\tc1(sc1_term, h_prefixes={}) {\n\t\t// deduce term type\n\t\tswitch(sc1_term[0]) {\n\t\t\t// datatyped literal\n\t\t\tcase '^': {\n\t\t\t\t// find literal's contents delimiter\n\t\t\t\tlet i_contents = sc1_term.indexOf('\"');\n\n\t\t\t\t// no delimiter\n\t\t\t\tif(-1 === i_contents) {\n\t\t\t\t\tthrow new Error(`Invalid concise-term string, no content literal delimiter found: '${sc1_term}'`);\n\t\t\t\t}\n\n\t\t\t\t// extract datatype\n\t\t\t\tlet s_datatype = sc1_term.slice(1, i_contents);\n\n\t\t\t\t// make term\n\t\t\t\treturn factory.literal(sc1_term.slice(i_contents+1), factory.c1_node_explicit(s_datatype, h_prefixes));\n\t\t\t}\n\n\t\t\t// languaged literal\n\t\t\tcase '@': {\n\t\t\t\t// find literal's contents delimiter\n\t\t\t\tlet i_contents = sc1_term.indexOf('\"');\n\n\t\t\t\t// no delimiter\n\t\t\t\tif(-1 === i_contents) {\n\t\t\t\t\tthrow new Error(`Invalid concise-term string, no content literal delimiter found: '${sc1_term}'`);\n\t\t\t\t}\n\n\t\t\t\t// extract language\n\t\t\t\tlet s_language = sc1_term.slice(1, i_contents);\n\n\t\t\t\t// make term\n\t\t\t\treturn factory.literal(sc1_term.slice(i_contents+1), s_language);\n\t\t\t}\n\n\t\t\t// simple literal\n\t\t\tcase '\"': {\n\t\t\t\t// make term\n\t\t\t\treturn factory.literal(sc1_term.slice(1));\n\t\t\t}\n\n\t\t\t// prefixed name\n\t\t\tdefault: return factory.c1_node(sc1_term, h_prefixes);\n\t\t}\n\t},\n\n\t// construct a term object from a concise term string for nodes\n\tc1_node(sc1_node, h_prefixes={}) {\n\t\t// rdf:type shortcut\n\t\tif('a' === sc1_node) return KT_RDF_TYPE;\n\n\t\t// default graph\n\t\tif('*' === sc1_node) return factory.defaultGraph();\n\n\t\t// blank node\n\t\tif('_' === sc1_node[0]) {\n\t\t\tif(':' !== sc1_node[1]) throw new Error(`Invliad concise-term string, prefixes are not allowed to start with an underscore: '${sc1_node}'`);\n\n\t\t\t// interpret ephemeral hint\n\t\t\tif('#' === sc1_node[2] || 2 === sc1_node.length) return factory.ephemeral();\n\n\t\t\t// create blank node\n\t\t\treturn factory.blankNode(sc1_node.slice(2));\n\t\t}\n\n\t\t// other\n\t\treturn factory.c1_node_explicit(sc1_node, h_prefixes);\n\t},\n\n\t// construct a named node\n\tc1_named_node(sc1_node, h_prefixes={}) {\n\t\t// rdf:type shortcut\n\t\tif('a' === sc1_node) return KT_RDF_TYPE;\n\n\t\t// other\n\t\treturn factory.c1_node_explicit(sc1_node, h_prefixes);\n\t},\n\n\t// construct a term object from a concise term string for nodes (no shortcuts)\n\tc1_node_explicit(sc1_node, h_prefixes={}) {\n\t\t// deduce term type\n\t\tswitch(sc1_node[0]) {\n\t\t\t// iri\n\t\t\tcase '>': return factory.namedNode(sc1_node.slice(1));\n\n\t\t\t// invalid concise-term string\n\t\t\tcase '<': throw new Error(`Whoops! It looks like this concise-term string starts with a '<' character. Remember to use '>' if you are trying to make an absolute IRI reference.\\nInvalid concise-term string '${sc1_node}'`);\n\t\t\tcase '`': throw new Error(`The backtick character '\\`' is reserved for concise-struct key directives and should not be used in the object position.\\nInvalid concise-term string '${sc1_node}'`);\n\n\t\t\t// prefixed name\n\t\t\tdefault: return this.c1_prefixed_node(sc1_node, h_prefixes);\n\t\t}\n\t},\n\n\t// construct a term object from a concise term string for prefixed nodes\n\tc1_prefixed_node(sc1_node, h_prefixes={}) {\n\t\t// find prefix delimiter\n\t\tlet i_colon = sc1_node.indexOf(':');\n\n\t\t// no delimter; invalid concise-term string for node\n\t\tif(-1 === i_colon) throw new Error(`A relative or prefixed node must include a ':' character. \\nInvalid concise-term string for node: '${sc1_node}'`);\n\n\t\t// prefix id\n\t\tlet s_prefix_id = sc1_node.slice(0, i_colon);\n\n\t\t// suffix\n\t\tlet s_suffix = sc1_node.slice(i_colon+1);\n\n\t\t// find prefix in hash\n\t\tif(s_prefix_id in h_prefixes) {\n\t\t\treturn factory.namedNode(h_prefixes[s_prefix_id]+s_suffix);\n\t\t}\n\t\t// prefix not exists\n\t\telse {\n\t\t\tthrow new Error(`Prefix not defined: '${s_prefix_id}'`);\n\t\t}\n\t},\n\n\tc1_to_nt,\n\n\t* quads(hc4_quads, h_prefixes={}) {\n\t\tfor(let sc1_graph in hc4_quads) {\n\t\t\tyield* factory.triples(hc4_quads[sc1_graph], h_prefixes, sc1_graph);\n\t\t}\n\t},\n\n\t* triples(hc3_triples, h_prefixes={}, sc1_graph='*') {\n\t\tlet k_graph = factory.c1(sc1_graph, h_prefixes);\n\t\tfor(let sc1_subject in hc3_triples) {\n\t\t\tlet k_subject = factory.c1(sc1_subject, h_prefixes);\n\t\t\tlet hc2_pairs = hc3_triples[sc1_subject];\n\n\t\t\tyield* factory.pairs(k_graph, k_subject, hc2_pairs, h_prefixes);\n\t\t}\n\t},\n\n\t* pairs(k_graph, k_subject, hc2_pairs, h_prefixes={}) {\n\t\tfor(let sc1_predicate in hc2_pairs) {\n\t\t\tlet k_predicate = factory.c1(sc1_predicate, h_prefixes);\n\t\t\tlet z_objects = hc2_pairs[sc1_predicate];\n\n\t\t\tyield* factory.objects(k_graph, k_subject, k_predicate, z_objects, h_prefixes);\n\t\t}\n\t},\n\n\t* collection(k_graph, k_subject, a_objects, h_prefixes={}) {\n\t\t// first item\n\t\tyield* factory.objects(k_graph, k_subject, KT_RDF_FIRST, a_objects[0], h_prefixes);\n\n\t\t// rest of items\n\t\tlet a_rest = a_objects.slice(1);\n\n\t\t// no more\n\t\tif(!a_rest.length) {\n\t\t\tyield new Quad(k_subject, KT_RDF_REST, KT_RDF_NIL, k_graph);\n\t\t}\n\t\t// more remain\n\t\telse {\n\t\t\t// auto blank node\n\t\t\tlet k_hop = factory.blankNode();\n\n\t\t\t// incoming triple\n\t\t\tyield new Quad(k_subject, KT_RDF_REST, k_hop, k_graph);\n\n\t\t\t// outgoing triples\n\t\t\tyield* factory.collection(k_graph, k_hop, a_rest, h_prefixes);\n\t\t}\n\t},\n\n\t* objects(k_graph, k_subject, k_predicate, z_objects, h_prefixes, b_nested=false) {\n\t\t// value type\n\t\tlet s_type = typeof z_objects;\n\t\tswitch(s_type) {\n\t\t\t// c1-string\n\t\t\tcase 'string': {\n\t\t\t\tyield new Quad(k_subject, k_predicate, factory.c1(z_objects, h_prefixes), k_graph);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// number\n\t\t\tcase 'number': {\n\t\t\t\tyield new Quad(k_subject, k_predicate, factory.number(z_objects), k_graph);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// object\n\t\t\tcase 'object': {\n\t\t\t\t// array\n\t\t\t\tif(Array.isArray(z_objects)) {\n\t\t\t\t\t// RDF collection\n\t\t\t\t\tif(b_nested) {\n\t\t\t\t\t\t// auto blank node\n\t\t\t\t\t\tlet k_hop = factory.blankNode();\n\n\t\t\t\t\t\t// incoming triple\n\t\t\t\t\t\tyield new Quad(k_subject, k_predicate, k_hop, k_graph);\n\n\t\t\t\t\t\t// outgoing triple\n\t\t\t\t\t\tyield* factory.collection(k_graph, k_hop, z_objects, h_prefixes);\n\t\t\t\t\t}\n\t\t\t\t\t// list of objects\n\t\t\t\t\telse {\n\t\t\t\t\t\tfor(let z_item of z_objects) {\n\t\t\t\t\t\t\tyield* factory.objects(k_graph, k_subject, k_predicate, z_item, h_prefixes, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// simple object\n\t\t\t\telse {\n\t\t\t\t\t// auto blank node\n\t\t\t\t\tlet k_hop = factory.blankNode();\n\n\t\t\t\t\t// incoming triple\n\t\t\t\t\tyield new Quad(k_subject, k_predicate, k_hop, k_graph);\n\n\t\t\t\t\t// outgoing triples\n\t\t\t\t\tyield* factory.pairs(k_graph, k_hop, z_objects, h_prefixes);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// other\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(`invalid object type: ${typeof z_objects}`);\n\t\t\t}\n\t\t}\n\t},\n\n\tfrom: {\n\t\tterm(z_term) {\n\t\t\tif(z_term.isGraphyTerm) return z_term;\n\n\t\t\treturn factory.from.rdfjs_term(z_term);\n\t\t},\n\n\t\tquad(g_quad) {\n\t\t\tif(g_quad.isGraphyQuad) return g_quad;\n\n\t\t\tlet g_from = factory.from;\n\t\t\treturn new Quad(\n\t\t\t\tg_from.rdfjs_term(g_quad.subject),\n\t\t\t\tg_from.rdfjs_term(g_quad.predicate),\n\t\t\t\tg_from.rdfjs_term(g_quad.object),\n\t\t\t\tg_quad.graph? g_from.rdfjs_term(g_quad.graph): KT_DEFAULT_GRAPH,\n\t\t\t);\n\t\t},\n\n\t\trdfjs_term(g_term) {\n\t\t\tswitch(g_term.termType) {\n\t\t\t\tcase 'NamedNode': return new NamedNode(g_term.value);\n\t\t\t\tcase 'BlankNode': return new BlankNode(g_term.value);\n\t\t\t\tcase 'Literal': return factory.literal(g_term.value, g_term.language\n\t\t\t\t\t? g_term.language\n\t\t\t\t\t: (g_term.datatype\n\t\t\t\t\t\t? new NamedNode(g_term.datatype.value)\n\t\t\t\t\t\t: null));\n\t\t\t\tcase 'DefaultGraph': return new DefaultGraph();\n\t\t\t\tdefault: {\n\t\t\t\t\tthrow new TypeError(`invalid termType: ${g_term.termType}`);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tsparql_result(g_term) {\n\t\t\tswitch(g_term.type) {\n\t\t\t\tcase 'uri': {\n\t\t\t\t\treturn new NamedNode(g_term.value);\n\t\t\t\t}\n\n\t\t\t\tcase 'literal':\n\t\t\t\tcase 'typed-literal': {\n\t\t\t\t\tif('xml:lang' in g_term) {\n\t\t\t\t\t\treturn new LanguagedLiteral(g_term.value, g_term['xml:lang']);\n\t\t\t\t\t}\n\t\t\t\t\telse if('datatype' in g_term && 'http://www.w3.org/2001/XMLSchema#string' !== g_term.datatype) {\n\t\t\t\t\t\treturn new ExplicitlyDatatypedLiteral(g_term.value, new NamedNode(g_term.datatype));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn new SimpleLiteral(g_term.value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcase 'bnode': {\n\t\t\t\t\treturn new BlankNode(g_term.value);\n\t\t\t\t}\n\n\t\t\t\tdefault: {\n\t\t\t\t\tthrow new Error(`unexpected SPARQL Result JSON Format Term type: ${g_term.type}`);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t},\n\n\tto: {\n\t\tboolean: s_boolean => Literal_Boolean.from(s_boolean),\n\t\tinteger: s_integer => Literal_Integer.from(s_integer),\n\t\tdecimal: s_decimal => Literal_Decimal.from(s_decimal),\n\t\tdouble: s_double => Literal_Double.from(s_double),\n\t},\n\n\n\t/**\n\t * @param  {Object} gc_comment -\n\t * @return {string} a `concise-term string` directive to be used as a key in `concise-term structs`\n\t * \tin order to write a comment to the document (only works with supporting serializers)\n\t */\n\tcomment(gc_comment={}) {\n\t\treturn `\\`[${uuid_v4()}]${JSON.stringify({...gc_comment, type:'comment'})}`;\n\t},\n\n\t/**\n\t * @param  {integer} [line_count=1] - number of newlines to insert\n\t * @return {string} a `concise-term string` directive to be used as a key in `concise-term structs`\n\t * \tin order to write the given number of newlines to the document (only works with supporting serializers)\n\t */\n\tnewlines() {\n\t\t// if(!Number.isInteger(n_line_count)) throw new TypeError('graphy/core.data.factory#newlines() expects `line_count` argument to be an integer');\n\t\treturn `\\`[${uuid_v4()}]{\"type\":\"newlines\"}`;\n\t},\n\n\t/**\n\t * @param {string} s_key - key that identifies which aspect to configure. e.g., 'lists'\n\t * @return {string} a `concise-term string` directive to be used as a key in `concise-term structs`\n\t * \tin order to write the given number of newlines to the document (only works with supporting serializers)\n\t */\n\tconfig(s_key) {\n\t\tif('string' !== typeof s_key) throw new TypeError(`Expected 'key' argument to be a string, instead found ${typeof s_key}`);\n\t\treturn `\\`[${uuid_v4()}]{\"type\":\"config\",\"value\":${JSON.stringify(s_key)}}`;\n\t},\n\n\t/**\n\t * @param {AnyQuad} g_quad - quad to hash\n\t * @return {string} a sha256 hash of the quad\n\t */\n\thash(g_quad) {\n\t\t// normalize quad\n\t\tlet k_quad = factory.from.quad(g_quad);\n\n\t\t// create hash\n\t\tlet d_hash = crypto.createHash('sha256');\n\n\t\t// verbose quad\n\t\td_hash.update(k_quad.verbose());\n\n\t\t// return hash string\n\t\treturn d_hash.digest('hex');\n\t},\n\n\n\tcache_prefixes,\n\tcachePrefixes: cache_prefixes,\n\tterse,\n\n\tclean_iri,\n\tcleanIri: clean_iri,\n\n\t$_PREFIX_CACHE,\n};\n\nObject.assign(factory, {\n\tc3: factory.triples,\n\tc4: factory.quads,\n\tfromTerm: factory.from.term,\n\tfromQuad: factory.from.quad,\n});\n","export function blankNode (blankNode) {\n  return '_:' + blankNode.value // TODO: escape special chars\n}\n","export function dataset (dataset, toNT) {\n  return [...dataset].map(quad => toNT(quad)).join('\\n') + '\\n'\n}\n","export function defaultGraph () {\n  return ''\n}\n","export function namedNode (namedNode) {\n  return '<' + namedNode.value + '>'\n}\n","import { namedNode } from './namedNode.js'\n\nconst echarRegEx = /[\"\\\\\\\\\\n\\r]/\nconst echarRegExAll = /[\"\\\\\\\\\\n\\r]/g\n\nconst echarReplacement = {\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r'\n}\n\nfunction echarReplacer (char) {\n  return echarReplacement[char]\n}\n\nfunction escapeValue (value) {\n  if (echarRegEx.test(value)) {\n    return value.replace(echarRegExAll, echarReplacer)\n  }\n\n  return value\n}\n\nexport function literal (literal) {\n  const escapedValue = escapeValue(literal.value)\n\n  if (literal.datatype.value === 'http://www.w3.org/2001/XMLSchema#string') {\n    return '\"' + escapedValue + '\"'\n  }\n\n  if (literal.datatype.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString') {\n    return '\"' + escapedValue + '\"@' + literal.language\n  }\n\n  return '\"' + escapedValue + '\"^^' + namedNode(literal.datatype)\n}\n","export function quad (quad, toNT) {\n  const subjectString = toNT(quad.subject)\n  const predicateString = toNT(quad.predicate)\n  const objectString = toNT(quad.object)\n  const graphString = toNT(quad.graph)\n\n  return `${subjectString} ${predicateString} ${objectString} ${graphString ? graphString + ' ' : ''}.`\n}\n","export function variable (variable) {\n  return '?' + variable.value\n}\n","import { blankNode } from './lib/blankNode.js'\nimport { dataset } from './lib/dataset.js'\nimport { defaultGraph } from './lib/defaultGraph.js'\nimport { literal } from './lib/literal.js'\nimport { namedNode } from './lib/namedNode.js'\nimport { quad } from './lib/quad.js'\nimport { variable } from './lib/variable.js'\n\nexport function toNT (term) {\n  if (!term) {\n    return null\n  }\n\n  if (term.termType === 'BlankNode') {\n    return blankNode(term)\n  }\n\n  if (term.termType === 'DefaultGraph') {\n    return defaultGraph()\n  }\n\n  if (term.termType === 'Literal') {\n    return literal(term)\n  }\n\n  if (term.termType === 'NamedNode') {\n    return namedNode(term)\n  }\n\n  // legacy quad support without .termType\n  if (term.termType === 'Quad' || (term.subject && term.predicate && term.object && term.graph)) {\n    return quad(term, toNT)\n  }\n\n  if (term.termType === 'Variable') {\n    return variable(term)\n  }\n\n  if (term[Symbol.iterator]) {\n    return dataset(term, toNT)\n  }\n\n  throw new Error(`unknown termType ${term.termType}`)\n}\n","import { toNT } from '@rdf-esm/to-ntriples'\n\nexport default class TermMap {\n  constructor (entries) {\n    this.index = new Map()\n\n    if (entries) {\n      for (const [term, value] of entries) {\n        this.set(term, value)\n      }\n    }\n  }\n\n  get size () {\n    return this.index.size\n  }\n\n  clear () {\n    this.index.clear()\n  }\n\n  delete (term) {\n    return this.index.delete(toNT(term))\n  }\n\n  * entries () {\n    for (const [, { term, value }] of this.index) {\n      yield [term, value]\n    }\n  }\n\n  forEach (callback, thisArg) {\n    for (const entry of this.entries()) {\n      callback.call(thisArg, entry[1], entry[0], this)\n    }\n  }\n\n  get (term) {\n    const item = this.index.get(toNT(term))\n\n    return item && item.value\n  }\n\n  has (term) {\n    return this.index.has(toNT(term))\n  }\n\n  * keys () {\n    for (const [, { term }] of this.index) {\n      yield term\n    }\n  }\n\n  set (term, value) {\n    const key = toNT(term)\n\n    this.index.set(key, { term, value })\n\n    return this\n  }\n\n  * values () {\n    for (const [, { value }] of this.index) {\n      yield value\n    }\n  }\n\n  [Symbol.iterator] () {\n    return this.entries()[Symbol.iterator]()\n  }\n}\n","import stream from 'readable-stream'\nimport { rdf, xsd } from '@tpluscode/rdf-ns-builders'\nimport TermMap from '@rdf-esm/term-map'\nimport graphy from '@graphy/core.data.factory'\n\nfunction isBareListNode(predicates) {\n  const isList = predicates.has(rdf.first) && predicates.has(rdf.rest)\n  if (predicates.size === 2 && isList) {\n    return true\n  }\n  if (predicates.size === 3 && isList && predicates.has(rdf.type)) {\n    const [type, ...moreTypes] = predicates.get(rdf.type)\n    return rdf.List.equals(type) && moreTypes.length === 0\n  }\n\n  return false\n}\n\nexport class TransformToConciseHash extends stream.Transform {\n  constructor({ prefixes = {}, strict = false } = {}) {\n    super({ objectMode: true })\n\n    this.prefixes = prefixes\n    this.graphs = new TermMap()\n    this.blankNodes = new TermMap()\n    this.strict = strict\n  }\n\n  _transform({ subject, predicate, object, graph }, _, cb) {\n    const nodes = this.getGraph(graph)\n    const node = nodes.get(subject) || { predicates: new TermMap() }\n\n    const objects = node.predicates.get(predicate) || []\n    node.predicates.set(predicate, [...objects, object])\n\n    if (object.termType === 'BlankNode') {\n      const usageCount = this.blankNodes.get(object) || 0\n      this.blankNodes.set(object, usageCount + 1)\n    }\n\n    nodes.set(subject, node)\n    cb()\n  }\n\n  _flush() {\n    const value = [...this.graphs].reduce((graphs, [graph, nodes]) => {\n      const graphKey = this.toHashKey(graph)\n      let graphHash = graphs[graphKey] || {}\n\n      graphHash = [...nodes].reduce(\n        this.toConciseHash(graph).bind(this),\n        graphHash\n      )\n\n      return {\n        ...graphs,\n        [graphKey]: graphHash,\n      }\n    }, {})\n\n    this.push({\n      type: this.strict ? 'c4r' : 'c4',\n      value,\n    })\n    this.push(null)\n  }\n\n  toConciseHash(graph) {\n    return (hash, [node, { predicates }]) => {\n      if (!this.strict && this.blankNodes.get(node) === 1) {\n        return hash\n      }\n\n      const nodeKey = this.toHashKey(node)\n\n      return {\n        ...hash,\n        [nodeKey]: this.createPropertyMap(graph, predicates),\n      }\n    }\n  }\n\n  createPropertyMap(graph, predicates, level = 0) {\n    const nestedObject = node => {\n      if (!this.strict && this.blankNodes.get(node) === 1) {\n        const entry = this.graphs.get(graph).get(node)\n\n        if (entry) {\n          return this.createPropertyMap(graph, entry.predicates, level + 1)\n        }\n      }\n\n      return this.toHashKey(node)\n    }\n\n    if (!this.strict && isBareListNode(predicates)) {\n      const [first] = predicates.get(rdf.first)\n      const [restNode] = predicates.get(rdf.rest)\n\n      // top-level list node\n      if (level === 0) {\n        const rest = restNode.equals(rdf.nil)\n          ? this.toHashKey(rdf.nil)\n          : [...nestedObject(restNode)]\n\n        return {\n          [this.toHashKey(rdf.first)]: [nestedObject(first)],\n          [this.toHashKey(rdf.rest)]: [rest],\n        }\n      }\n\n      if (restNode.equals(rdf.nil)) {\n        return [nestedObject(first)]\n      }\n\n      const rest = nestedObject(restNode)\n      return [nestedObject(first), ...rest]\n    }\n\n    return [...predicates].reduce((map, [predicate, objects]) => {\n      const propertyKey = this.toHashKey(predicate)\n\n      const objectMaps = objects.map(nestedObject.bind(this))\n\n      return {\n        ...map,\n        [propertyKey]: objectMaps,\n      }\n    }, {})\n  }\n\n  getGraph(graph) {\n    const nodes = this.graphs.get(graph) || new TermMap()\n    this.graphs.set(graph, nodes)\n    return nodes\n  }\n\n  literalHash(term) {\n    if (term.datatype && !this.strict) {\n      switch (term.datatype.value) {\n        case xsd.integer.value: {\n          const number = +term.value\n          if (Number.isInteger(number)) {\n            return number\n          }\n          break\n        }\n        case xsd.decimal.value: {\n          const dec = +term.value\n          if (!Number.isNaN(dec) && !Number.isInteger(dec)) {\n            return dec\n          }\n          break\n        }\n        case xsd.boolean.value: {\n          if (term.value === 'true') {\n            return true\n          }\n          if (term.value === 'false') {\n            return false\n          }\n          break\n        }\n        default:\n      }\n    }\n\n    return graphy.fromTerm(term).concise(this.prefixes)\n  }\n\n  toHashKey(term) {\n    if (term.termType === 'Literal') {\n      return this.literalHash(term)\n    }\n\n    if (term.equals(rdf.type)) {\n      return 'a'\n    }\n\n    return graphy.fromTerm(term).concise(this.prefixes)\n  }\n}\n","import { TransformToConciseHash } from './TransformToConciseHash.js'\n\nasync function serializer(importScribe, { strict, ...defaults } = {}) {\n  const create = (await importScribe).default\n\n  return {\n    import(quadStream, options = {}) {\n      const prefixes = {\n        ...(defaults.prefixes || {}),\n        ...(options.prefixes || {}),\n      }\n\n      const writer = create({\n        prefixes,\n      })\n\n      quadStream\n        .pipe(new TransformToConciseHash({ prefixes, strict }))\n        .pipe(writer)\n\n      return writer\n    },\n  }\n}\n\nexport const turtle = ({ prefixes } = {}) =>\n  serializer(import('@graphy/content.ttl.write'), { prefixes })\nexport const rdfXml = ({ prefixes } = {}) =>\n  serializer(import('@graphy/content.xml.scribe'), { strict: true, prefixes })\nexport const trig = ({ prefixes } = {}) =>\n  serializer(import('@graphy/content.trig.write'), { prefixes })\n","async function parser(module) {\n  const create = (await module).default\n\n  return {\n    import(quadStream, options) {\n      return quadStream.pipe(options ? create(options) : create())\n    },\n  }\n}\n\nexport const trig = () => parser(import('@graphy/content.trig.read'))\nexport const nq = () => parser(import('@graphy/content.nq.read'))\n","export default async function (defaults = {}) {\n  const JsonLdSerializer = (await import('@rdfjs/serializer-jsonld-ext'))\n    .default\n\n  class Serializer extends JsonLdSerializer {\n    import(stream, { prefixes = {} } = {}) {\n      return super.import(stream, {\n        context: {\n          ...(defaults.prefixes || {}),\n          ...prefixes,\n        },\n      })\n    }\n  }\n\n  return new Serializer({\n    compact: true,\n    skipGraphProperty: true,\n    encoding: 'string',\n  })\n}\n","import * as formatsCommon from '@rdf-esm/formats-common'\nimport { SinkMap } from '@rdf-esm/sink-map'\nimport * as graphy from './serializers/graphy.js'\nimport * as graphyReader from './parsers/graphy.js'\nimport jsonld from './serializers/jsonld.js'\n\nexport const serializers = new SinkMap([...formatsCommon.serializers])\nexport const parsers = new SinkMap([...formatsCommon.parsers])\n\nexport const formats = {\n  jsonLd: 'application/ld+json',\n  ntriples: 'application/n-triples',\n  nquads: 'application/n-quads',\n  notation3: 'text/n3',\n  rdfXml: 'application/rdf+xml',\n  trig: 'application/trig',\n  turtle: 'text/turtle',\n}\n\nserializers.set(formats.jsonLd, jsonld)\nserializers.set(formats.notation3, graphy.turtle)\nserializers.set(formats.turtle, graphy.turtle)\nserializers.set(formats.trig, graphy.trig)\nserializers.set(formats.rdfXml, graphy.rdfXml)\n\nparsers.set(formats.notation3, graphyReader.trig)\nparsers.set(formats.turtle, graphyReader.trig)\nparsers.set(formats.trig, graphyReader.trig)\nparsers.set(formats.ntriples, graphyReader.nq)\nparsers.set(formats.nquads, graphyReader.nq)\n"],"names":["crypto","R_INVALID_IRIREF","F_REPLACE_INVALID_IRIREF","s_","s_v","s_code","codePointAt","toString","length","padStart","clean_iri","p_iri_dirty","replace","RT_AVOID_PNAME_NS","RT_AVOID_PNAME_LOCAL","RT_BOOLEAN_TRUE","RT_BOOLEAN_FALSE","S_UUID_V4","R_UUID_V4","uuid_v4","dt_now","Date","now","performance","s","x_r","Math","random","floor","$_PREFIX_CACHE","Symbol","R_REGEX_ESCAPE","SR_PN_LOCAL","cache_prefixes","h_prefixes","b_terse","a_cache","h_inverse","si_prefix","p_iri","test","push","_r_iris","RegExp","join","_h_inverse","Object","freeze","terse","g_cache","m_iri","exec","si_best_prefix","s_best_suffix","nl_best_prefix_iri","p_prefix_iri","indexOf","s_suffix","slice","concise","s_best_prefix_id","s_prefix_id","startsWith","R_C1N_DECONSTRUCT","c1_to_nt","sc1_in","b_verbose","EphemeralBlankNode","JSON","stringify","i_contents","factory","c1","GenericTerm","valueOf","this","equals","z_other","termType","value","assign","prototype","isGraphyTerm","NamedNode","constructor","s_iri","super","b_opt","verbose","isolate","isNamedNode","KT_RDF_TYPE","isRdfTypeAlias","KT_RDF_LANG_STRING","G_ISOLATE_RDF_LANG_STRING","KT_RDF_FIRST","KT_RDF_REST","KT_RDF_NIL","KT_XSD_DATE","KT_XSD_DATETIME","KT_XSD_STRING","GenericLiteral","datatype","language","st_datatype","isLiteral","isSimple","LanguagedLiteral","s_value","s_lang","toLowerCase","isLanguaged","DatatypedLiteral","isDatatyped","ExplicitlyDatatypedLiteral","kt_datatype","RawLiteral","SimpleLiteral","KT_XSD_INTEGER","Literal_Integer","static","s_literal","kt","x_value","number","includes","isNumeric","isInteger","KT_XSD_DOUBLE","Literal_Double","toExponential","isDouble","KT_XSD_DECIMAL","Literal_Decimal","isDecimal","KT_XSD_BOOLEAN","Literal_Boolean","b_value","boolean","isBoolean","Literal_PositiveInfinity","Infinity","isInfinite","Literal_NegativeInfinity","Literal_NaN","NaN","BlankNode","b_anonymous","isAnonymous","isNaN","create","isBlankNode","isEphemeral","defineProperty","get","Variable","s_label","Error","DefaultGraph","NoGraph","isVariable","isDefaultGraph","KT_DEFAULT_GRAPH","Quad","h_subject","h_predicate","h_object","h_graph","subject","predicate","object","graph","isGraphyQuad","b_default_graph","g_raw","namedNode","blankNode","literal","defaultGraph","quad","kt_subject","kt_predicate","kt_object","kt_graph","integer","w","from","double","decimal","module","exports","adopt","dc_factory","dc_extend","b_use_extend","kt_xsd_boolean","kt_xsd_double","kt_xsd_decimal","kt_xsd_integer","simpleLiteral","languagedLiteral","datatypedLiteral","raw","unfiltered","z_datatype_or_lang","s_language","x","Number","isFinite","date","dt","toISOString","dateTime","ephemeral","anonymous","z_label","TypeError","w_value","s_type","variable","triple","e_stack","console","warn","stack","term","z_term","w_prefixes","rdfjs_term","sc1_term","s_datatype","c1_node_explicit","c1_node","sc1_node","c1_named_node","c1_prefixed_node","i_colon","hc4_quads","sc1_graph","triples","hc3_triples","k_graph","sc1_subject","k_subject","hc2_pairs","pairs","sc1_predicate","k_predicate","z_objects","objects","a_objects","a_rest","k_hop","collection","b_nested","Array","isArray","z_item","g_quad","g_from","g_term","sparql_result","type","to","s_boolean","s_integer","s_decimal","s_double","comment","gc_comment","newlines","config","s_key","hash","k_quad","d_hash","createHash","update","digest","cachePrefixes","cleanIri","c3","c4","quads","fromTerm","fromQuad","dataset","toNT","map","echarRegEx","echarRegExAll","echarReplacement","echarReplacer","char","escapeValue","escapedValue","subjectString","predicateString","objectString","graphString","iterator","TermMap","entries","index","Map","set","size","clear","delete","forEach","callback","thisArg","entry","call","item","has","key","isBareListNode","predicates","isList","rdf","moreTypes","TransformToConciseHash","prefixes","strict","objectMode","graphs","blankNodes","_transform","_","cb","nodes","getGraph","node","usageCount","_flush","reduce","graphKey","toHashKey","graphHash","toConciseHash","bind","nodeKey","createPropertyMap","level","nestedObject","first","restNode","rest","propertyKey","objectMaps","literalHash","xsd","dec","async","serializer","importScribe","defaults","default","import","quadStream","options","writer","pipe","turtle","rdfXml","trig","parser","nq","JsonLdSerializer","Serializer","stream","context","compact","skipGraphProperty","encoding","serializers","parsers","f","formats","jsonLd","ntriples","nquads","notation3","jsonld"],"sourceRoot":""}